[{"title":"GoldenGate 12.1.2 新特性参数部分解释","date":"2017-03-30T08:56:26.892Z","path":"2017/03/30/oracle/goldengate/GoldenGate 12.1.2 新特性参数部分解释/","text":"LOGALLSUPCOLSWrites all supplementally logged columns to the trail, including those required for conflict detection and resolution and the scheduling columns required to support integrated Replicat. (Scheduling columns are primary key, unique index, and foreign key columns.) You configure the database to log these columns with GGSCI commands.使用该参数可以记录所有附加日志信息并写入trail文件中。 UPDATERECORDFORMAT COMPACTCombines the before and after images of an UPDATE operation into a single record in the trail. This parameter is valid for Oracle databases version 12c and later to support Replicat in integrated mode. Although not a required parameter, UPDATERECORDFORMAT COMPACT is a best practice and significantly improves Replicat performance.UPDATERECORDFORMAT参数可以控制抽取进程兼容更新操作的前镜像和后镜像信息并写入到一个trail文件中，但是一定要注意的是该参数必须在数据库版本是11.2.0.4或者12c版本。","tags":[{"name":"oracle","slug":"oracle","permalink":"/tags/oracle/"},{"name":"goldengate","slug":"goldengate","permalink":"/tags/goldengate/"}]},{"title":"Oracle expdp中INCLUDE参数限制4000个字符的解决办法","date":"2017-03-29T03:34:17.004Z","path":"2017/03/29/oracle/Oracle_DataPump_INCLUDE_参数限制4000个字符解决办法/","text":"使用expdp的include参数，当需要包含大量表时，一旦字符超4000时就会报错expdp DADM/passwd DIRECTORY=DMP_DIR SCHEMAS=DADM DUMPFILE=dadm_tables_data.dmp CONTENT=DATA_ONLY INCLUDE=TABLE:\"IN ('CBTRFCC','CBTFCCN','CGTGCDD','CGDSALC', ... 'CGTRSGR','CBTFCCE','CGTREPD','CPDORPG')\" UDE-00014 : invalid value for parameter, 'include'. 使用以下技巧可以解决CREATE TABLE list_of_tables ( tbl_name VARCHAR2(30) ); INSERT INTO list_of_tables ( 'CBTRFCC' ); INSERT INTO list_of_tables ( 'CBTFCCN' ); ... INSERT INTO list_of_tables ( 'CPDORPG' ); COMMIT; expdp DADM/passwd DIRECTORY=DMP_DIR SCHEMAS=DADM DUMPFILE=dadm_data.dmp CONTENT=DATA_ONLY include=TABLE:\"IN (SELECT tbl_name FROM list_of_tables)\"","tags":[{"name":"oracle","slug":"oracle","permalink":"/tags/oracle/"},{"name":"expdp","slug":"expdp","permalink":"/tags/expdp/"}]},{"title":"Oracle Database 11g工作中常用的命令和脚本整理","date":"2017-03-28T07:23:05.827Z","path":"2017/03/28/oracle/Oracle 11g工作中常用的命令和脚本整理/","text":"设置Oracle用户密码永不过期alter profile default limit PASSWORD_LIFE_TIME unlimited; # 查看设置 select * from dba_profiles where resource_name like 'PASSWORD_LIFE_TIME%'; 设置Oracle用户登陆失败次数限制# 设置登陆失败次数限制为100，错误登陆数超过100会导致用户被锁 alter profile default limit FAILED_LOGIN_ATTEMPTS 100; # 无限制 alter profile default limit FAILED_LOGIN_ATTEMPTS unlimited; # 查看登陆失败限制设置 select * from dba_profiles where resource_name like 'FAILED_LOGIN_ATTEMPTS%'; 系统进程PID查找对应SQLTEXTSELECT sql_text FROM v$sqltext a WHERE (a.hash_value, a.address) IN (SELECT DECODE (sql_hash_value,0, prev_hash_value,sql_hash_value), DECODE (sql_hash_value, 0, prev_sql_addr, sql_address) FROM v$session b WHERE b.paddr = (SELECT addr FROM v$process c WHERE c.spid =&amp;pid)) ORDER BY piece ASC; 查找长事务对应的SQLTEXTwith ltr as ( select to_char(sysdate,'YYYYMMDDHH24MISS') TM, s.sid, s.sql_id, s.sql_child_number, s.prev_sql_id, xid, to_char(t.start_date,'YYYYMMDDHH24MISS') start_time, e.TYPE,e.block, e.ctime, decode(e.CTIME, 0, (sysdate - t.start_date) * 3600*24, e.ctime) el_second from v$transaction t, v$session s,v$transaction_enqueue e where t.start_date &lt;= sysdate - interval '200' second and t.addr = s.taddr and t.addr = e.addr(+) ) select ltr.* , (select q1.sql_text from v$sql q1 where ltr.prev_sql_id = q1.sql_id(+) and rownum = 1) prev_sql_text , (select q1.sql_text from v$sql q1 where ltr.sql_id = q1.sql_id(+) and ltr.sql_child_number = q1.CHILD_NUMBER(+)) sql_text from ltr ltr; 永久设置sql*plus的环境变量echo \"set pagesize 9999\" &gt;&gt; $ORACLE_HOME/sqlplus/admin/glogin.sql echo \"set line 150\" &gt;&gt; $ORACLE_HOME/sqlplus/admin/glogin.sql echo \"set long 5000\" &gt;&gt; $ORACLE_HOME/sqlplus/admin/glogin.sql 查找非系统用户中无主键表select distinct at.TABLE_NAME, at.OWNER, at.NUM_ROWS from (SELECT owner,table_name FROM all_tables WHERE owner in (select username from dba_users where account_status='OPEN' and username not in ('SYSTEM','SYS','GOLDENGATE')) MINUS SELECT owner,table_name FROM all_constraints WHERE owner in (select username from dba_users where account_status='OPEN' and username not in ('SYSTEM','SYS','GOLDENGATE')) AND constraint_type = 'P' ) vn, all_tables at where vn.TABLE_NAME=at.TABLE_NAME and vn.OWNER=at.OWNER and at.TABLE_NAME not like '%$%' order by 2,1;","tags":[{"name":"oracle","slug":"oracle","permalink":"/tags/oracle/"}]},{"title":"Hexo文章的密码访问","date":"2017-03-28T02:34:03.160Z","path":"2017/03/28/tools/Hexo文章的密码访问/","text":"前言工作中有些文档中的部分内容，虽然机密性不高，但也不便在网上直接公开发布。 这时可以通过以下的小技巧来实现简单的文档密码保护。 方法实现因Hexo中Markdown语言和html是混用的，所以可直接在Markdown中直接插入以下这段script(建议放到&lt;!-- more --&gt;段后面)。这里用到了windows对象的alert()方法和prompt()方法。prompt()方法的作用即是显示一个可提示用户输入的对话框，而其本身的返回值就是你输入的那个字符串。因此只需要将其与你默认的密码比较一下就好，如果不正确，则直接将当前页面的loaction属性设为上一个页面即可。&lt;script&gt; if(\"123\"==prompt(\"请输入文档密码\")) &#123; alert(\"密码正确\"); &#125; else &#123; alert(\"密码错误返回主页\"); location=\"/\"; &#125; &lt;/script&gt;","tags":[]},{"title":"数据库GI PSU，SPU(CPU)，Bundle Patches 和 Patchsets 补丁号码快速参考 (文档 ID 1922396.1)","date":"2017-03-28T01:44:19.269Z","path":"2017/03/28/oracle/Oracle数据库补丁号码快速参考 (文档 ID 1922396.1)/","text":"原文件地址(需登陆MOS)：https://support.oracle.com/epmos/faces/DocumentDisplay?_afrLoop=247921994816714&amp;id=1922396.1 Base Releases 12.2.0.1.0 12.2.0.1.0 Download Page12.1.0.1.0 开一个非技术SR来获取物理介质或下载链接,根据Doc ID 1071023.111.2.0.1.0 11.2.0.1.0 Download PageOlder Versions 开一个非技术SR来获取物理介质或下载链接,根据Doc ID 1071023.1 注意: 对于11.2.0.2或者更高的patchsets, 请参照patch的readme中”Software Availability”部分下的”Table 1 Installation Types and Associated Zip Files”来查找具体哪些zip文件需要下载。 Patchsets l12.1.0.2 (12.1.0.2.0 PATCH SET FOR ORACLE DATABASE SERVER) 21419221 11.2.0.4 (11.2.0.4.0 PATCH SET FOR ORACLE DATABASE SERVER) 13390677 11.2.0.3 (11.2.0.3.0 PATCH SET FOR ORACLE DATABASE SERVER) 10404530 11.2.0.2 (11.2.0.2.0 PATCH SET FOR ORACLE DATABASE SERVER) 10098816 11.1.0.7 (11.1.0.7.0 PATCH SET FOR ORACLE DATABASE SERVER) 6890831 10.2.0.5 (10.2.0.5 PATCH SET FOR ORACLE DATABASE SERVER) 8202632 d10.2.0.4 (10.2.0.4.0 PATCH SET FOR ORACLE DATABASE SERVER) 6810189 e10.2.0.3 (10.2.0.3 PATCH SET FOR ORACLE DATABASE SERVER) 5337014 10.2.0.2 (10.2.0.2 PATCH SET FOR ORACLE DATABASE SERVER) 4547817 10.1.0.5 (10.1.0.5 PATCH SET FOR ORACLE DATABASE SERVER) 4505133 10.1.0.4 (10.1.0.4 PATCH SET FOR ORACLE DATABASE SERVER) 4163362 10.1.0.3 (10.1.0.3 PATCH SET FOR ORACLE DATABASE SERVER) 3761843 9.2.0.8 (9.2.0.8 PATCH SET FOR ORACLE DATABASE SERVER) 4547809 9.2.0.7 (9.2.0.7 PATCH SET FOR ORACLE DATABASE SERVER) 4163445 9.2.0.6 (9.2.0.6 PATCH SET FOR ORACLE DATABASE SERVER) 3948480 9.2.0.5 (ORACLE 9I DATABASE SERVER RELEASE 2 - PATCH SET 4 VERSION 9.2.0.5.0) 3501955 9.2.0.4 (9.2.0.4 PATCH SET FOR ORACLE DATABASE SERVER) 3095277 9.2.0.3 (9.2.0.3 PATCH SET FOR ORACLE DATABASE SERVER) 2761332 9.2.0.2 (9.2.0.2 PATCH SET FOR ORACLE DATABASE SERVER) 2632931 9.0.1.5 (9.0.1.5 PATCHSET) 3301544 9.0.1.4 (9.0.1.4 PATCH SET FOR ORACLE DATABASE SERVER) 2517300 9.0.1.3 (9.0.1.3. PATCH SET FOR ORACLE DATA SERVER) 2271678 8.1.7.4 (8.1.7.4 PATCH SET FOR ORACLE DATA SERVER) 2376472 8.1.7.3 (8.1.7.3 PATCH SET FOR ORACLE DATA SERVER) 2189751 8.1.7.2 (8.1.7.2.1 PATCH SET FOR ORACLE DATA SERVER) 1909158 PSU, SPU(CPU), Bundle Patches 12.1.0.2 Description PSU GI PSU Proactive Bundle Patch Bundle Patch (Windows 32bit &amp; 64bit) JAN2017 24732082 (12.1.0.2.170117) 24917825 (12.1.0.2.170117) 24968615 (12.1.0.2.170117) 25115951 (12.1.0.2.170117) OCT2016 24006101 (12.1.0.2.161018) 24412235 (12.1.0.2.161018) 24448103 (12.1.0.2.161018) 24591642 (12.1.0.2.161018) JUL2016 23054246 (12.1.0.2.160719) 23273629 (12.1.0.2.160719) 23273686 (12.1.0.2.160719) 23530387 (12.1.0.2.160719) APR2016 22291127 (12.1.0.2.160419) 22646084 (12.1.0.2.160419) 22899531 22809813 (12.1.0.2.160419) JAN2016 21948354 (12.1.0.2.160119) 22191349 (12.1.0.2.160119) 22243551 22310559 (12.1.0.2.160119) OCT2015 21359755 (12.1.0.2.5) 21523234 (12.1.0.2.5) 21744410 (12.1.0.2.13) 21821214 (12.1.0.2.10) JUL2015 20831110 (12.1.0.2.4) 20996835 (12.1.0.2.4) 21188742 (12.1.0.2.10) 21126814 (12.1.0.2.7) APR2015 20299023 (12.1.0.2.3) 20485724 (12.1.0.2.3) 20698050 (12.1.0.2.7) 20684004 (12.1.0.2.4) JAN2015 19769480 (12.1.0.2.2) 19954978 (12.1.0.2.2) 20141343 (12.1.0.2.4) 19720843 (12.1.0.2.1) OCT2014 19303936 (12.1.0.2.1) 19392646 (12.1.0.2.1) 19404326 (12.1.0.2.1) N/A 12.1.0.1 Description PSU GI PSU Bundle Patch (Windows64bit) Bundle Patch (Windows32bit) JUL2016 23054354 (12.1.0.1.160719) i23273935 / k23273958 (12.1.0.1.160719) 23530410 (12.1.0.1.160719) APR2016 22291141 (12.1.0.1.160419) i22654153 / k22654166 (12.1.0.1.160419) 22617408 (12.1.0.1.160419) JAN2016 21951844 (12.1.0.1.160119) j22191492 / k22191511 (12.1.0.1.160119) 22494866 (12.1.0.2.160119) OCT2015 21352619 (12.1.0.1.9) j21551666 / k21551685 (12.1.0.1.9) 21744907 (12.1.0.1.21) JUL2015 20831107 (12.1.0.1.8) j20996901 / k20996911 (12.1.0.1.8) 21076681 (12.1.0.1.20) APR2015 20299016 (12.1.0.1.7) j20485762 / k19971331 (12.1.0.1.7) 20558101 (12.1.0.1.18) JAN2015 19769486 (12.1.0.1.6) j19971324 / k19971331 (12.1.0.1.6) 20160748 (12.1.0.1.16) OCT2014 19121550 (12.1.0.1.5) j19392372 / k19392451 (12.1.0.1.5) 19542943 (12.1.0.1.14) JUL2014 18522516 (12.1.0.1.4) j18705901 / k18705972 (12.1.0.1.4) 19062327 (12.1.0.1.11) APR2014 18031528 (12.1.0.1.3) j18139660 / k18413105 (12.1.0.1.3) 18448604 (12.1.0.1.7) JAN2014 17552800 (12.1.0.1.2) 17735306 (12.1.0.1.2) 17977915 (12.1.0.1.3) OCT2013 17027533 (12.1.0.1.1) 17272829 (12.1.0.1.1) 17363796 (12.1.0.1.1) 17363795 (12.1.0.1.1) 11.2.0.4 Description PSU SPU(CPU) GI PSU Bundle Patch (Windows 32bit &amp; 64bit) mJAN2017 N/A N/A N/A N/A OCT2016 24006111 (11.2.0.4.161018) 24433711 (11.2.0.4.161018) 24436338 (11.2.0.4.161018) 24922870 (11.2.0.4.161118) JUL2016 23054359 (11.2.0.4.160719) 23177648 (11.2.0.4.160719) 23274134 (11.2.0.4.160719) 23530402 (11.2.0.4.160719) APR2016 22502456 (11.2.0.4.160419) 22502493 (11.2.0.4.160419) 22646198 (11.2.0.4.160419) 22839608 (11.2.0.4.160419) JAN2016 21948347 (11.2.0.4.160119) 21972320 (11.2.0.4.160119) 22191577 (11.2.0.4.160119) 22310544 (11.2.0.4.160119) OCT2015 21352635 (11.2.0.4.8) 21352646 21523375 (11.2.0.4.8) 21821802 (11.2.0.4.20) JUL2015 20760982 (11.2.0.4.7) 20803583 20996923 (11.2.0.4.7) 21469106 (11.2.0.4.18) APR2015 20299013 (11.2.0.4.6) 20299015 20485808 (11.2.0.4.6) 20544696 (11.2.0.4.15) JAN2015 19769489 (11.2.0.4.5) 19854503 19955028 (11.2.0.4.5) 20127071 (11.2.0.4.12) OCT2014 19121551 (11.2.0.4.4) 19271443 19380115 (11.2.0.4.4) 19651773 (11.2.0.4.10) JUL2014 18522509 (11.2.0.4.3) 18681862 18706472 (11.2.0.4.3) 18842982 (11.2.0.4.7) APR2014 18031668 (11.2.0.4.2) 18139690 18139609 (11.2.0.4.2) 18296644 (11.2.0.4.4) JAN2014 17478514 (11.2.0.4.1) 17551709 N/A 17987366 (11.2.0.4.1) 11.2.0.3 Description PSU SPU(CPU) GI PSU Bundle Patch (Windows64bit) Bundle Patch (Windows32bit) aJUL2015 20760997 (11.2.0.3.15) 20803576 20996944 (11.2.0.3.15) 21104036 21104035 APR2015 20299017 (11.2.0.3.14) 20299010 20485830 (11.2.0.3.14) 20420395 20420394 JAN2015 19769496 (11.2.0.3.13) 19854461 19971343 (11.2.0.3.13) 20233168 20233167 OCT2014 19121548 (11.2.0.3.12) 19271438 19440385 (11.2.0.3.12) 19618575 19618574 JUL2014 18522512 (11.2.0.3.11) 18681866 18706488 (11.2.0.3.11) 18940194 18940193 APR2014 18031683 (11.2.0.3.10) 18139695 18139678 (11.2.0.3.10) 18372244 18372243 JAN2014 17540582 (11.2.0.3.9) 17478415 17735354 (11.2.0.3.9) 18075406 17906981 OCT2013 16902043 (11.2.0.3.8) 17082364 17272731 (11.2.0.3.8) 17363850 17363844 JUL2013 16619892 (11.2.0.3.7) 16742095 16742216 (11.2.0.3.7) 16803775 16803774 APR2013 16056266 (11.2.0.3.6) 16294378 16083653 (11.2.0.3.6) 16345834 16345833 JAN2013 14727310 (11.2.0.3.5) 14841409 14727347 (11.2.0.3.5) 16042648 16042647 OCT2012 14275605 (11.2.0.3.4) 14390252 14275572 (11.2.0.3.4) 14613223 14613222 JUL2012 13923374 (11.2.0.3.3) 14038787 13919095 (11.2.0.3.3) 14223718 14223717 APR2012 13696216 (11.2.0.3.2) 13632717 13696251 (11.2.0.3.2) 13885389 13885388 JAN2012 13343438 (11.2.0.3.1) 13466801 13348650 (11.2.0.3.1) 13413168 13413167 11.2.0.2 Description PSU SPU(CPU) GI PSU Bundle Patch (Windows64bit) Bundle Patch (Windows32bit) aOCT2013 17082367 (11.2.0.2.12) 17082375 17272753 (11.2.0.2.12) 17363838 17363837 JUL2013 16619893 (11.2.0.2.11) 16742100 16742320 (11.2.0.2.11) 16345852 16345851 APR2013 16056267 (11.2.0.2.10) 16294412 16166868 (11.2.0.2.10) 16345846 16345845 JAN2013 14727315 (11.2.0.2.9) 14841437 14841385 (11.2.0.2.9) 16100399 16100398 OCT2012 14275621 (11.2.0.2.8) 14390377 14390437 (11.2.0.2.8) 14672268 14672267 JUL2012 13923804 (11.2.0.2.7) 14038791 14192201 (11.2.0.2.7) 14134043 14134042 APR2012 13696224 (11.2.0.2.6) 13632725 13696242 (11.2.0.2.6) 13697074 13697073 JAN2012 13343424 (11.2.0.2.5) 13343244 13653086 (11.2.0.2.5) 13413155 13413154 OCT2011 12827726 (11.2.0.2.4) 12828071 12827731 (11.2.0.2.4) 13038788 13038787 JUL2011 12419331 (11.2.0.2.3) 12419321 12419353 (11.2.0.2.3) 12714463 12714462 APR2011 11724916 (11.2.0.2.2) 11724984 12311357 (11.2.0.2.2) 11896292 11896290 JAN2011 10248523 (11.2.0.2.1) N/A N/A 10432053 10432052 11.2.0.1 Description PSU CPU Bundle Patch (Windows64bit) Bundle Patch (Windows32bit) aJUL2011 12419378 (11.2.0.1.6) 12419278 12429529 12429528 APR2011 11724930 (11.2.0.1.5) 11724991 11731176 11883240 JAN2011 10248516 (11.2.0.1.4) 10249532 10432045 10432044 OCT2010 9952216 (11.2.0.1.3) 9952260 10100101 10100100 JUL2010 9654983 (11.2.0.1.2) 9655013 9736865 9736864 APR2010 9352237 (11.2.0.1.1) 9369797 N/A N/A 11.1.0.7 Description PSU SPU(CPU) Bundle Patch (Windows64bit) Bundle Patch (Windows32bit)JUL2015 20761024 (11.1.0.7.24) 20803573 21104030 21104029APR2015 20299012 (11.1.0.7.23) 20299020 20420391 20420390JAN2015 19769499 (11.1.0.7.22) 19854433 20126915 20126914OCT2014 19152553 (11.1.0.7.21) 19274522 19609034 19609032JUL2014 18522513 (11.1.0.7.20) 18681875 18944208 18944207APR2014 18031726 (11.1.0.7.19) 18139703 18372258 18372257JAN2014 17465583 (11.1.0.7.18) 17551415 17906936 17906935OCT2013 17082366 (11.1.0.7.17) 17082374 17363760 17363759JUL2013 16619896 (11.1.0.7.16) 16742110 16803788 16803787APR2013 16056268 (11.1.0.7.15) 16308394 16345862 16345861JAN2013 14739378 (11.1.0.7.14) 14841452 15848067 15848066OCT2012 14275623 (11.1.0.7.13) 14390384 14672313 14672312 JUL2012 13923474 (11.1.0.7.12) 14038803 14109868 14109867 APR2012 13621679 (11.1.0.7.11) 13632731 13715810 13715809 JAN2012 13343461 (11.1.0.7.10) 13343453 13460956 13460955 OCT2011 12827740 (11.1.0.7.9) 12828097 12914916 12914915 JUL2011 12419384 (11.1.0.7.8) 12419265 12695278 12695277 APR2011 11724936 (11.1.0.7.7) 11724999 11741170 11741169 JAN2011 10248531 (11.1.0.7.6) 10249534 10350788 10350787 OCT2010 9952228 (11.1.0.7.5) 9952269 9773825 9773817 JUL2010 9654987 (11.1.0.7.4) 9655014 9869912 9869911 APR2010 9352179 (11.1.0.7.3) 9369783 9392335 9392331 JAN2010 9209238 (11.1.0.7.2) 9114072 9166861 9166858 OCT2009 8833297 (11.1.0.7.1) 8836375 8928977 8928976 JUL2009 N/A 8534338 8553515 8553512 APR2009 N/A 8290478 8343070 8343061 11.1.0.6 Description CPU Bundle Patch (Windows64bit) Bundle Patch (Windows32bit) aJUL2009 8534378 8563155 8563154 APR2009 8290402 8333657 8333655 JAN2009 7592335 7631981 7631980 OCT2008 7375639 7378393 7378392 JUL2008 7150417 7210197 7210195 APR2008 6864063 6867180 6867178 10.2.0.5 Description PSU SPU(CPU) Bundle Patch (Windows64bit) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) bJUL2015 20299014 (10.2.0.5.19) 20299021 20420387 20420386 N/A APR2015 N/A N/A N/A N/A N/A JAN2015 19769505 (10.2.0.5.18) 19854436 20126868 20126867 N/A OCT2014 19274523 (10.2.0.5.17) 19274521 19618565 19618563 N/A JUL2014 18522511 (10.2.0.5.16) 18681879 18940198 18940196 N/A APR2014 18031728 (10.2.0.5.15) 18139709 18372261 18372259 N/A JAN2014 17465584 (10.2.0.5.14) 17551414 17906974 17906972 N/A OCT2014 17082365 (10.2.0.5.13) 17082371 N/A 17363822 N/A JUL2013 16619894 (10.2.0.5.12) 16742123 16803782 16803780 16803781 APR2013 16056270 (10.2.0.5.11) 16270946 16345857 16345855 16345856 JAN2013 14727319 (10.2.0.5.10) 14841459 15848062 15848060 15848061 OCT2012 14275629 (10.2.0.5.9) 14390396 14553358 14553356 14553357 JUL2012 13923855 (10.2.0.5.8) 14038805 14134053 14134051 14134052 APR2012 13632743 (10.2.0.5.7) 13632738 13654815 13654814 13870404 JAN2012 13343471 (10.2.0.5.6) 13343467 13460968 13460967 N/A OCT2011 12827745 (10.2.0.5.5) 12828105 c12914913 12914911 N/A JUL2011 12419392 (10.2.0.5.4) 12419258 12429524 12429523 N/A APR2011 11724962 (10.2.0.5.3) 11725006 12328269 12328268 N/A JAN2011 10248542 (10.2.0.5.2) 10249537 10352673 10352672 N/A OCT2010 9952230 (10.2.0.5.1) 9952270 10099855 10058290 N/A 10.2.0.4 Description PSU SPU(CPU) Bundle Patch (Windows32bit) Bundle Patch (Windows64bit) Bundle Patch (WindowsItanium) gJUL2013 16619897 (10.2.0.4.17) 16742253 N/A N/A N/A gAPR2013 16056269 (10.2.0.4.16) 16270931 N/A N/A N/A gJAN2013 14736542 (10.2.0.4.15) 14841471 N/A N/A N/AgOCT2012 14275630 (10.2.0.4.14) 14390410 N/A N/A N/AgJUL2012 13923851 (10.2.0.4.13) 14038814 N/A N/A N/A aAPR2012 12879933 (10.2.0.4.12) 12879926 13928775 13928776 N/A JAN2012 12879929 (10.2.0.4.11) 12879912 b13654060 N/A N/A OCT2011 12827778 (10.2.0.4.10) 12828112 12914908 12914910 12914909 JUL2011 12419397 (10.2.0.4.9) 12419249 12429519 12429521 12429520 APR2011 11724977 (10.2.0.4.8) 11725015 12328501 12328503 12328502 JAN2011 10248636 (10.2.0.4.7) 10249540 10349197 10349200 10349198 OCT2010 9952234 (10.2.0.4.6) 9952272 10084980 10084982 10084981 JUL2010 9654991 (10.2.0.4.5) 9655017 9777076 9777078 9777077 APR2010 9352164 (10.2.0.4.4) 9352191 9393548 9393550 9393549 JAN2010 9119284 (10.2.0.4.3) 9119226 9169457 9169460 9169458 OCT2009 8833280 (10.2.0.4.2) 8836308 8880857 8880861 8880858 JUL2009 8576156 (10.2.0.4.1) 8534387 8559466 8559467 8541782 APR2009 N/A 8290506 8307237 8307238 8333678 JAN2009 N/A 7592346 7584866 7584867 N/A OCT2008 N/A 7375644 7386320 7386321 N/A JUL2008 N/A 7150470 7218676 7218677 N/A 10.2.0.3 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) Bundle Patch (Windows64bit) aJAN2009 7592354 7631956 7631958 7631957 OCT2008 7369190 7353782 7353784 7353785 JUL2008 7150622 7252496 7252497 7252498 APR2008 6864068 6867054 6867055 6867056 JAN2008 6646853 6637237 6637238 6637239 OCT2007 6394981 6430171 6430173 6430174 JUL2007 6079591 6116131 6038242 6116139 APR2007 5901891 5948242 5916262 5948243 JAN2007 5881721 5846376 5846377 5846378 10.2.0.2 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (Windows64bit) Bundle Patch (WindowsItanium) iJAN2009 7592355 N/A N/A N/A hOCT2008 7375660 N/A N/A N/A hJUL2008 7154083 N/A N/A N/A hAPR2008 6864071 N/A N/A N/A aJAN2008 6646850 N/A N/A N/A fOCT2007 6394997 6397028 6397030 6397029 JUL2007 6079588 6013105 6013121 6013118 APR2007 5901881 5912173 5912179 5912176 JAN2007 5689957 5716143 5699839 5699824 OCT2006 5490848 5502226 5500921 5500894 JUL2006 5225799 5251025 5251028 5251026 APR2006 5079037 5140461 5140567 5140508 10.2.0.1 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (Windows64bit) Bundle Patch (WindowsItanium) APR2007 5901880 N/A N/A N/A JAN2007 5689937 5695784 5695786 5695785 OCT2006 5490846 5500927 5500954 5500951 JUL2006 5225798 5239698 5239701 5239699 APR2006 5049080 5059238 5059261 5059251 JAN2006 4751931 4751539 4770480 4751549 10.1.0.5 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) JAN2012 13343482 13413002 13413003 OCT2011 12828135 12914905 12914906 JUL2011 12419228 12429517 12429518 APR2011 11725035 11731119 11731120 JAN2011 N/A N/A N/A OCT2010 9952279 10089559 10089560 JUL2010 9655023 9683651 9683652 APR2010 9352208 9390288 9390289 JAN2010 9119261 9187104 9187105 OCT2009 8836540 8785211 8785212 JUL2009 8534394 8656224 8656226 APR2009 8290534 8300356 8300360 JAN2009 7592360 7486619 7586049 OCT2008 7375686 7367493 7367494 JUL2008 7154097 7047034 7047037 APR2008 6864078 6867107 6867108 JAN2008 6647005 6637274 6637275 OCT2007 6395024 6408393 6408394 JUL2007 6079585 6115804 6115818 APR2007 5901877 5907304 5907305 JAN2007 5689908 5716295 5634747 OCT2006 5490845 5500883 5500885 JUL2006 5225797 5251148 5251140 APR2006 5049074 5057606 5057609 JAN2006 4751932 4882231 4882236 10.1.0.4 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) APR2007 5901876 5909871 5909879 JAN2007 5689894 5695771 5695772 OCT2006 5490844 5500878 5500880 JUL2006 5225796 5239736 5239737 APR2006 5049067 5059200 5059227 JAN2006 4751928 4751259 4745040 OCT2005 4567866 4579182 4579188 JUL2005 4392423 4440706 4404600 APR2005 4210374 4287619 4287611 10.1.0.3 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) JAN2007 5923277 N/A N/A OCT2006 5566825 N/A N/A JUL2006 5435164 N/A N/A APR2006 5158022 N/A N/A JAN2006 4751926 4741077 4741084 OCT2005 4567863 4567518 4567523 JUL2005 4392409 4389012 4389014 APR2005 4193286 4269715 4158888 JAN2005 4003062 4074232 3990812 10.1.0.2 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) APR2005 4193293 4181849 4213305 JUL2005 4400766 4388944 4388948 JAN2005 4003051 4104364 4083038 9.2.0.8 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) JUL2010 9655027 9683644 9683645 APR2010 9352224 9390286 N/A JAN2010 9119275 9187106 N/A OCT2009 8836758 8785185 8785186 JUL2009 8534403 8427417 8427418 APR2009 8290549 8300340 8300346 JAN2009 7592365 7703210 7703212 OCT2008 7375695 7394394 7394402 JUL2008 7154111 7047026 7047029 APR2008 6864082 6867138 6867139 JAN2008 6646842 6637265 6637266 OCT2007 6395038 6417013 6417014 JUL2007 6079582 6130293 6130295 APR2007 5901875 5916268 5916275 JAN2007 N/A N/A N/A OCT2006 5490859 5652380 5639519 9.2.0.7 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) JUL2007 6079579 6146759 6146748 APR2007 5901872 5907274 5907275 JAN2007 5689875 5654905 5654909 OCT2006 5490841 5500873 5500874 JUL2006 5225794 5250980 5250981 APR2006 5049060 5064365 5064364 JAN2006 4751923 4751528 4741074 OCT2005 4567854 4579590 4579599 JUL2005 4547566 N/A N/A 9.2.0.6 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) OCT2006 5490840 5500865 5500871 JUL2006 5225793 5239794 5239793 APR2006 5049051 5059614 5059615 JAN2006 4751921 4751261 4751262 OCT2005 4567846 4579093 4579097 JUL2005 4392392 4445852 4401917 APR2005 4193295 4269928 4213298 9.2.0.5 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) OCT2006 5689708 N/A N/A JUL2006 5435138 N/A N/A APR2006 5219762 N/A N/A OCT2005 4560421 N/A N/A JUL2005 4392256 4387563 4391819 APR2005 4193299 4195791 4214192 JAN2005 4003006 4104374 3990809 9.2.0.4 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) Bundle Patch (WindowsItanium) JAN2005 4002994 4104369 4083202 8.1.7.4 Description CPU (Unix/Linux) Bundle Patch (Windows32bit) JAN2007 5689799 5686514 OCT2006 5490835 5496067 JUL2006 5225788 5236412 APR2006 5045247 5057601 JAN2006 4751906 4751570 OCT2005 4560405 4554818 JUL2005 4392446 4437058 APR2005 4193312 4180163 JAN2005 4002909 3921893OJVM PSU Patches 12.1.0.2 Description OJVM PSU (Linux/Unix) OJVM BP (Windows) Combo OJVM + DB PSU Combo OJVM + GI PSU Generic JDBC JAN2017 24917972 (12.1.0.2.170117) 25112498 (12.1.0.2.170117) 24917069 (12.1.0.2.170117) 24917916 (12.1.0.2.170117) Included in OJVM PSU OCT2016 24315824 (12.1.0.2.161018) 24591630 (12.1.0.2.161018) 24433133 (12.1.0.2.161018) 24433148 (12.1.0.2.161018) Included in OJVM PSU JUL2016 23177536 (12.1.0.2.160719) 23515290 (12.1.0.2.160719) 23615289 (12.1.0.2.160719) 23615308 (12.1.0.2.160719) 23727148 (Included in OJVM PSU) APR2016 22674709 (12.1.0.2.160419) 22839633 (12.1.0.2.160419) 22738582 (12.1.0.2.160419) 22738641 (12.1.0.2.160419) JAN2016 22139226 (12.1.0.2.160119) 22311086 (12.1.0.2.160119) 22191659 (12.1.0.2.160119) 22191676 (12.1.0.2.160119) OCT2015 21555660 (12.1.0.2.5) 21788394 (12.1.0.2.4) 21520444 21523260 JUL2015 21068507 (12.1.0.2.4) 21153530 (12.1.0.2.3) 21150768 21150782 APR2015 20415564 (12.1.0.2.3) 20391199 (12.1.0.2.2) 20834354 20834538 JAN2015 19877336 (12.1.0.2.2) 20225938 (12.1.0.2.1) 20132434 20132450 OCT2014 (12.1.0.2.1) 19282028 19791366 19791375 12.1.0.1 Description OJVM PSU (Linux/Unix) OJVM BP (Windows) Combo OJVM + DB PSU Combo OJVM + GI PSU Generic JDBC JUL2016 (12.1.0.1.160719) 23177541 23515285 23615355 23615368 23727043 (Included in OJVM PSU) APR2016 (12.1.0.1.160419) 22674703 22839627 22738678 22738715 Included in OJVM PSU JAN2016 (12.1.0.1.160119) 22139235 22311072 22191711 22191721 OCT2015 (12.1.0.1.5) 21555669 21788365 21744318 21744328 JUL2015 (12.1.0.1.4) 21068523 21153513 21150806 21150817 APR2015 (12.1.0.1.3) 20406245 20225909 20834568 20834579 JAN2015 (12.1.0.1.2) 19877342 20225916 20132482 20132489 OCT2014 (12.1.0.1.1) 19282024 19801531 19791363 19791360 19852357 11.2.0.4 Description OJVM PSU (Linux/Unix) OJVM BP (Windows) Combo OJVM + DB PSU Combo OJVM + DB SPU Combo OJVM + GI PSU Generic JDBC JAN2017 (11.2.0.4.170117) 24917954 25043019 24918033 25367810 24918228 Included in OJVM PSU OCT2016 (11.2.0.4.161018) 24315821 24591637 24436313 24433791 24436346 Included in OJVM PSU JUL2016 (11.2.0.4.160719) 23177551 23515277 23615392 23615381 23615403 23727132 (Included in OJVM PSU) APR2016 (11.2.0.4.160419) 22674697 22839614 22738777 22738732 22738793 Included in OJVM PSU JAN2016 (11.2.0.4.160119) 22139245 22311053 22378146 22378121 22378167 OCT2015 (11.2.0.4.5) 21555791 21788344 21744343 21744335 21744348 JUL2015 (11.2.0.4.4) 21068539 21153498 21150851 21150829 21150864 APR2015 (11.2.0.4.3) 20406239 20225988 20834611 20834597 20834621 JAN2015 (11.2.0.4.2) 19877440 20225982 20132580 20132517 20132615 OCT2014 (11.2.0.4.1) 19282021 19799291 19791364 19791358 19791420 19852360 11.2.0.3 Description OJVM PSU (Linux/Unix) OJVM BP (Windows) Combo OJVM + DB PSU Combo OJVM + DB SPU Combo OJVM + GI PSU Generic JDBC JUL2015 (11.2.0.3.4) 21068553 21153470 21150891 21150885 21150904 Included in OJVM PSU APR2015 (11.2.0.3.3) 20406220 20391185 20834670 20834653 20834686 JAN2015 (11.2.0.3.2) 19877443 20227195 20132646 20132635 20132651 OCT2014 (11.2.0.3.1) 19282015 19806120 19791427 19791426 19791428 19852361 11.1.0.7 Description OJVM PSU (Linux/Unix) OJVM BP (Windows) Combo OJVM + DB PSU Combo OJVM + DB SPU Combo OJVM + GI PSU Generic JDBC JUL2015 (11.1.0.7.4) 21068565 21153423 21150939 21150929 N/A Included in OJVM PSU APR2015 (11.1.0.7.3) 20406213 20391156 20834724 20834712 N/A JAN2015 (11.1.0.7.2) 19877446 20227146 20132677 20132669 N/A OCT2014 (11.1.0.7.1) 19282002 19806118 19791436 19791434 N/A 19852363","tags":[{"name":"oracle","slug":"oracle","permalink":"/tags/oracle/"}]},{"title":"VMWare CentOS 虚拟机根分区磁盘扩容(基于LVM)","date":"2017-03-23T16:00:00.000Z","path":"2017/03/24/linux/20170324_Vmware_centos_虚拟机根分区磁盘扩容(基于LVM)/","text":"关闭虚拟机并修改虚拟机配置，增大磁盘大小 启动虚拟机后查看磁盘状态df -hT ------------------------------------------------------------ Filesystem Type Size Used Avail Use% Mounted on /dev/mapper/VolGroup-lv_root ext4 43G 3.2G 38G 8% / tmpfs tmpfs 3.9G 0 3.9G 0% /dev/shm /dev/sda1 ext4 477M 82M 366M 19% /boot ------------------------------------------------------------ fdisk -l /dev/sda ------------------------------------------------------------ Disk /dev/sda: 214.7 GB, 214748364800 bytes # 磁盘sda已扩展到200G 255 heads, 63 sectors/track, 26108 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x00070abb Device Boot Start End Blocks Id System /dev/sda1 * 1 64 512000 83 Linux Partition 1 does not end on cylinder boundary. /dev/sda2 64 7833 62401536 8e Linux LVM ------------------------------------------------------------ 查看lvm状态pvs ------------------------------------------------------------ PV VG Fmt Attr PSize PFree /dev/sda2 VolGroup lvm2 a--u 59.51g 0 ------------------------------------------------------------ vgs ------------------------------------------------------------ VG #PV #LV #SN Attr VSize VFree VolGroup 1 2 0 wz--n- 59.51g 0 ------------------------------------------------------------ lvs ------------------------------------------------------------ LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lv_root VolGroup -wi-ao---- 43.74g lv_swap VolGroup -wi-ao---- 15.77g ------------------------------------------------------------ 创建新分区fdisk /dev/sda ------------------------------------------------------------ WARNING: DOS-compatible mode is deprecated. Its strongly recommended to switch off the mode (command 'c') and change display units to sectors (command 'u'). Command (m for help): n # 输入n开始创建分区 Command action e extended p primary partition (1-4) p Partition number (1-4): 3 # 输入3创建sda3 First cylinder (7833-26108, default 7833): Using default value 7833 Last cylinder, +cylinders or +size&#123;K,M,G&#125; (7833-26108, default 26108): Using default value 26108 Command (m for help): w # 写入分区表 The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. # 需要重启后才能生效 ------------------------------------------------------------ 重启虚拟机 格式化新分区fdisk -l /dev/sda ------------------------------------------------------------ Disk /dev/sda: 214.7 GB, 214748364800 bytes 255 heads, 63 sectors/track, 26108 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x00070abb Device Boot Start End Blocks Id System /dev/sda1 * 1 64 512000 83 Linux Partition 1 does not end on cylinder boundary. /dev/sda2 64 7833 62401536 8e Linux LVM /dev/sda3 7833 26108 146797950 83 Linux ------------------------------------------------------------ mkfs.ext4 /dev/sda3 lvm扩容pvcreate /dev/sda3 ------------------------------------------------------------ Physical volume \"/dev/sda3\" successfully created ------------------------------------------------------------ pvs ------------------------------------------------------------ PV VG Fmt Attr PSize PFree /dev/sda2 VolGroup lvm2 a--u 59.51g 0 /dev/sda3 lvm2 ---- 140.00g 140.00g ------------------------------------------------------------ ll /dev/mapper/ ------------------------------------------------------------ total 0 crw-rw----. 1 root root 10, 236 Mar 24 11:49 control lrwxrwxrwx. 1 root root 7 Mar 24 11:49 VolGroup-lv_root -&gt; ../dm-0 lrwxrwxrwx. 1 root root 7 Mar 24 11:49 VolGroup-lv_swap -&gt; ../dm-1 ------------------------------------------------------------ vgextend /dev/mapper/VolGroup /dev/sda3 ------------------------------------------------------------ Volume group \"VolGroup\" successfully extended ------------------------------------------------------------ lvextend -l +100%FREE /dev/VolGroup/lv_root /dev/sda3 ------------------------------------------------------------ Size of logical volume VolGroup/lv_root changed from 43.74 GiB (11198 extents) to 183.74 GiB (47037 extents). Logical volume lv_root successfully resized. ------------------------------------------------------------ resize2fs /dev/VolGroup/lv_root ------------------------------------------------------------ resize2fs 1.43-WIP (20-Jun-2013) Filesystem at /dev/VolGroup/lv_root is mounted on /; on-line resizing required old_desc_blocks = 3, new_desc_blocks = 12 The filesystem on /dev/VolGroup/lv_root is now 48165888 blocks long. ------------------------------------------------------------ # 扩容后查看磁盘使用情况 df -h ------------------------------------------------------------ Filesystem Size Used Avail Use% Mounted on /dev/mapper/VolGroup-lv_root 181G 3.3G 170G 2% / tmpfs 3.9G 0 3.9G 0% /dev/shm /dev/sda1 477M 82M 366M 19% /boot ------------------------------------------------------------","tags":[{"name":"Linux","slug":"Linux","permalink":"/tags/Linux/"},{"name":"lvm","slug":"lvm","permalink":"/tags/lvm/"}]},{"title":"MySQL DBA从小白到大神实战-09 MySQL性能优化的关键点","date":"2017-03-20T05:55:29.581Z","path":"2017/03/20/mysql/课程学习/09-MySQL-DBA从小白到大神实战/","text":"服务器参数调优，有哪些关键点？ 优化Linux内核参数，如关闭SWAP，调优网络参数、文件限制等 是否关闭NUMA 多网卡是否绑定 磁盘调度算法的选择 挂载磁盘时考虑添加的参数，如noatime和nobarrier等 MySQL性能调优有哪些关键点/经验？应用访问的优化 减少数据访问（减少磁盘访问），如尽量让应用去访问数据库的缓存服务器(Redis/Memcached)，性能提升1~1000倍，优化成本低 返回更少数据（减少网络传输或磁盘访问），性能提升1~100倍，优化成本低 减少交互次数（减少网络传输），性能提升1~10倍，优化成本低 服务器硬件的选型跟据业务需求来最终选择确定MYSQL服务器的配件配置，如CPU的processor数，内存的大小，以及SSD+SAS的组合（活跃数据/随机访问的data文件放到SSD盘中，冷数据/顺序访问的binlog文件放到SAS磁盘中）等。 操作系统优化使用推荐的Linux CentOS Redhat SUSE 关闭SWAP 注意： 在CentOS 6.4及更新版本的内核中设置vm.swappiness=0，有可能会导致MySQL数据库所在的系统出现内存溢出(OOM)，建议将vm.swappiness设置成1 # 在CentOS 5.x/6.x中 vi /etc/sysctl.conf ---------------------------------------------------------- vm.swappiness=1 ---------------------------------------------------------- # CentOS 7.x中 ## 查找到存在vm.swappiness参数的配置文件 find /usr/lib/tuned -name '*.conf' -type f -exec grep \"vm.swappiness\" &#123;&#125; \\+ ---------------------------------------------------------- /usr/lib/tuned/latency-performance/tuned.conf:vm.swappiness=10 /usr/lib/tuned/throughput-performance/tuned.conf:vm.swappiness=10 /usr/lib/tuned/virtual-guest/tuned.conf:vm.swappiness = 30 ---------------------------------------------------------- # 把以上3个文件中的vm.swappiness的值都修改为0或1 关闭NUMA NUMA： 非统一内存访问架构(Non Uniform Memory Access Architecture)。NUMA是一种用于多处理器的电脑记忆体设计，内存访问时间取决于处理器的内存位置。 在安装有多个CPU的计算机中，NUMA硬件可以通过将专用内存与CPU配对来显著提高性能。在NUMA下，处理器访问它自己的本地存储器的速度比非本地存储器(存储器的地方到另一个处理器之间共享的处理器或存储器)快一些。 SMP： 共享存储型多处理机(Shared Memory mulptiProcessors), 也称为对称型多处理机(Symmetry MultiProcessors)。SMP模式将多个处理器与一个集中的存储器相连。在SMP模式下，所有处理器都可以访问同一个系统物理存储器，这就意味着SMP系统只运行操作系统的一个拷贝。因此SMP系统有时也被称为一致存储器访问(UMA)结构体系，一致性意指无论在什么时候，处理器只能为内存的每个数据保持或共享唯一一个数值。很显然，SMP的缺点是可伸缩性有限，因为在存储器接口达到饱和的时候，增加处理器并不能获得更高的性能。 SMP和NUMA架构对比图 MySQL采用了线程模式，对于NUMA特性的支持并不好，如果单机只运行一个MySQL实例，建议关闭NUMA，方法有以下几种：1.BIOS中设置关闭（推荐）2.OS内核中设置关闭# Centos 7参照以下方法 grubby --update-kernel=ALL --args=\"numa=off\" # 若要移除上面的修改，使用以下命令 grubby --update-kernel=ALL --remove-args=\"numa=off\" 3.启动MySQL时关闭numactl --interleave=all mysqld 如果单机运行多个MySQL实例，可以将MySQL绑定在不同的CPU节点上，并且采用绑定的内存分配策略，强制在本节点内分配内存，这样既可以充分利用硬件的NUMA特性，又避免了单实例MySQL对多核CPU利用率不高的问题。详细可参考：MySQL单机多实例方案 网卡优化1.双网卡做成bond02.调整网络参数# 查看所有可调参数命令是sysctl -a，根据服务器配置调整以下参数 vi /etc/sysctl.conf ---------------------------------------------------------- net.core.rmem_max = 4194304 net.ipv4.tcp_moderate_rcvbuf = 1 net.ipv4.tcp_wmem = 4096 16384 4194304 ---------------------------------------------------------- 磁盘调度设置MYSQL服务器IO调度算法一般要设置成NOOP或Deadline，推荐使用是Deadline算法。 NOOP算法：全写为No Operation。 该算法实现了最简单的FIFO队列，所有IO请求大致按照先来后到的顺序进行操作。 CFQ算法：全写为Completely Fair Queuing。 该算法的特点是按照IO请求的地址进行排序，而不是按照先来后到的顺序来进行响应。 DEADLINE：在CFQ的基础上，解决了IO请求饿死的极端情况。除了CFQ本身具有的IO排序队列之外，DEADLINE额外分别为读IO和写IO提供了FIFO队列。 Anticipatory算法：CFQ和DEADLINE考虑的焦点在于满足零散IO请求上。对于连续的IO请求，比如顺序读，并没有做优化。为了满足随机IO和顺序IO混合的场景，Linux还支持ANTICIPATORY调度算法。 查看和修改系统IO的调度方法# 查看操作系统的IO调度方法(CentOS Linux) dmesg | grep -i scheduler ---------------------------------------------------------- [ 1.508820] io scheduler noop registered [ 1.508827] io scheduler deadline registered (default) [ 1.508850] io scheduler cfq registered ---------------------------------------------------------- cat /sys/block/sda/queue/scheduler # 临地更改I/O调度方法 echo deadline &gt; /sys/block/sda/queue/scheduler # 永久的更改I/O调度方法(重启后生效) ## Centos 7参照以下方法 grubby --info=ALL grubby --update-kernel=ALL --args=\"elevator=deadline\" ## Centos 5/6参照以下方法 vi /boot/grub/grub.conf ---------------------------------------------------------- # 添加elevator=deadline到下行 kernel /vmlinuz-2.6.18-274.el5 ro root=LABEL=/ elevator=deadline rhgb quiet ---------------------------------------------------------- 使用推荐的文件系统1.推荐用xfs/ext42.挂载盘时添加noatime和nobarrier参数，设置方法如下：vi /etc/fstab ---------------------------------------------------------- /dev/mapper/cl-root / xfs defaults,noatime,nobarrier 0 0 ---------------------------------------------------------- 当文件被创建，修改和访问时，Linux系统会记录这些时间信息。当系统的读文件操作频繁时，记录文件最近一次被读取的时间信息，将是一笔不少的开销。所以，为了提高系统的性能，我们可以在读取文件时不修改文件的atime属性。可以通过在加载文件系统时使用noatime选项来做到这一点。当以noatime选项加载（mount）文件系统时，对文件的读取不会更新文件属性中的atime信息。设置noatime的重要性是消除了文件系统对文件的写操作，文件只是简单地被系统读取。由于写操作相对读来说要更消耗系统资源，所以这样设置可以明显提高服务器的性能。注意wtime信息仍然有效，任何时候文件被写，该信息仍被更新。 现在的很多文件系统会在数据提交时强制底层设备刷新cache，避免数据丢失，称之为write barriers。 但是，其实我们数据库服务器底层存储设备要么采用RAID卡，RAID卡本身的电池可以掉电保护；要么采用Flash卡，它也有自我保护机制，保证数据不会丢失。 所以我们可以安全的使用nobarrier挂载文件系统。对于ext3、ext4和reiserfs文件系统可以在mount时指定barrier=0；对于xfs可以指定nobarrier选项。 数据库优化实例优化，修改参数innodb_buffer_pool_size # 相当于Oracle的SGA，一般设置为物理内存的70%-80%，设置的过大，会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率 innodb_thread_concurrency # 一般设置成小于CPU的核心数 query_cache_type = 0 # =0 关闭结果集缓存 query_cache_size =0 # =0 关闭结果集缓存 max_used_connections # 最大的连接数，根据应用实际情况来设置 interactive_timeout # 应用交互超时等待 wait_timeout # 连接池超时等待 innodb_io_capacity=20000 # innodb IO容量的设置，一般设置成IOPS的75%左右 innodb_flush_log_at_trx_commit # =1 每一次事务提交或事务外的指令都需要把日志写入（flush）硬盘 sync_binlog # =1 与innodb_flush_log_at_trx_commit=1 双1设置，提高数据安全性 innodb_log_file_size # 日志文件的大小，日志放到SSD建议设4-8G，放到SAS盘建议设成1-2G innodb_log_files_in_group # 日志文件的数量 innodb_flush_method # 有三个值：fdatasync(默认)，O_DSYNC，O_DIRECT，详细 innodb_max_dirty_pages_pct # =50 用来控制在 InnoDB Buffer Pool 中可以不用写入数据文件中的Dirty Page的比例(已经被修但还没有从内存中写入到数据文件的脏数据) Innodb_flush_neighbors # =0或1 相邻的数据合并，SSD盘关闭此设置，SAS盘开启此设置 transaction_isolation # 事务隔离级别，生产环境设置为READ-COMMITTED 内存分配All thread buffer = # 会话/线程级内存分配总和 max_threads * ( # 当前活跃连接数 read_buffer_size # 顺序读缓冲，提高顺序读效率 + read_rnd_buffer_size # 随机读缓冲，提高随机读效率 + sort_buffer_size # 排序缓冲，提高排序效率 + join_buffer_size # 表连接缓冲，提高表连接效率 + binlog_cache_size # 二进制日志缓冲，提高二进制日志写入效率 + tmp_table_size # 内存临时表，提高临时表存储效率 + thread_stack # 线程堆栈，暂时寄存SQL语句/存储过程 + thread_cache_size # 线程缓存，降低多次反复打开线程开销 + net_buffer_length # 线程持连接缓冲以及读取结果缓冲 + bulk_insert_buffer_size # MyISAM表批量写入数据缓冲 ) global buffer = # 全局内存分配总和 innodb_buffer_pool_size # InnoDB高速缓冲，行数据、索引缓冲，以及事务锁、自适应哈希等 + innodb_additional_mem_pool_size # InnoDB数据字典额外内存，缓存所有表数据字典 + innodb_log_buffer_size # InnoDB REDO日志缓冲，提高REDO日志写入效率 + key_buffer_size # MyISAM表索引高速缓冲，提高MyISAM表索引读写效率 + query_cache_size # 查询高速缓存，缓存查询结果，提高反复查询返回效率 + table_cahce # 表空间文件描述符缓存，提高数据表打开效率 + table_definition_cache # 表定义文件描述符缓存，提高数据表打开效率 innodb_flush_method参数 SQL优化 禁止多于3表join，尽量用单表查询 SELECT语句只获取需要的字段，禁止使用select * from语句，这是有效防止新增字段对应用逻辑的影响，还能减少对性能的影响 InnoDB表避免使用COUNT(*)操作，计数统计实时要求较强可以使用memcache或者redis，非实时统计可以使用单独统计表，定时更新 避免多余的排序。使用GROUP BY时，默认会进行排序，当你不需要排序时，可以使用order by null，例如select a.OwnerUserID,count(*) cnt from DP_MessageList a group by a.OwnerUserID order by null; 新增排序要求：不鼓励在DB里排序，尽量放到app server上排序，app server有上百台，而DB仅仅个位数的服务器数量，排序都在DB，会把DB压垮 全模糊查询无法使用INDEX，应当尽可能避免，如：select * from table where name like ‘%hotgirl%;’，不建议使用%前缀模糊查询，例如LIKE ‘%weibo’。 使用IN代替OR。SQL语句中IN包含的值不应过多，应少于1000个 禁止隐式转换。数值类型禁止加引号；字符串类型必须加引号 禁止使用负向查询，例如not in、!=、not like select for update语法，必须重点review流程 尽量少用or，当where子句中存在多个条件以“或”并存的时候，MySQL的优化器并没有很好的解决其执行计划优化的问题，再加上MySQL特有的SQL与Storage分层架构方式，造成了其性能比较低下，很多时候使用union all或者union(必要的时候)的方式来代替or会得到更好的效果 尽量用union all代替union，union和union all的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用union all而不是union 尽量早过滤，这一优化策略其实最常见于索引的优化设计中（将过滤性更好的字段放得更靠前），尽量用join代替子查询 禁止在主库上执行后台管理和统计类功能的QUERY，必要时申请统计类从库 查看SQL执行计划示例mysql&gt; explain -&gt; select id,name from t2 where id=5; +----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+ | 1 | SIMPLE | t2 | const | PRIMARY | PRIMARY | 4 | const | 1 | NULL | +----+-------------+-------+-------+---------------+---------+---------+-------+------+-------+ 1 row in set (0.00 sec) mysql&gt; explain -&gt; select id,name from t2 where name='C'; +----+-------------+-------+------+---------------+------+---------+-------+------+--------------------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+-------+------+---------------+------+---------+-------+------+--------------------------+ | 1 | SIMPLE | t2 | ref | name | name | 33 | const | 1 | Using where; Using index | +----+-------------+-------+------+---------------+------+---------+-------+------+--------------------------+ 1 row in set (0.00 sec) 索引设计覆盖索引 查询谓词都能够通过index进行扫描 排序谓词都能够利用index的有序性 index包含了查询所需要的所有字段 不能使用索引 不要给选择率低的字段建索引(通过索引扫描的记录数超过30%，变成全表扫描) 联合索引中：第一个索引列使用范围查询,第一个查询条件不是最左索引列 Like查询条件列最左以通配符% 开始 两个独立索引，其中一个用于检索，一个用于排序（索引不是越多越好，尽量合并索引） 表关联字段类型不一样（也包括长度不一样） 索引字段条件上使用函数 不要使用外健约束 参考 Grub2相对Grub的一些改进和注意事项（CentOS7） LINUX上MYSQL优化三板斧","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"CentOS7.3安装图解","date":"2017-03-17T16:00:00.000Z","path":"2017/03/18/linux/20170318_CentOS7.3安装图解/","text":"光标向上移动，选择Install CentOS Linux不测试安装光盘，节省安装时间直接回车开始选择语言，这里我就使用英文这里是跟CentOS6.X区别比较大的地方，所有的配置项都集中在一起，可以根据需要进行配置点击DATE&amp;TIME配置时区和时间KEYBOARD和LANGUAGE SUPPORT前面已经设置过了，点击SOFTWARE SELECTION，选择服务器部署的类型（即都安装哪些软件包），我这里默认选择Minimal Install，如果你需要安装图形化界面，可以选择Server with GUI点击INSTALLATION DESTINATION配置硬盘分区手动配置选Click here to create them automatically在自动创建的分区上按业务(测试)需要进行修改，无误后点左上方的Done同意变更点击NETWORK&amp;HOSTNAME可在此界面进行网络和主机名配置，这里我先默认，不配置完成后，回到之前的配置集中页面，点击下方的Begin Installation，开始安装在安装的过程中，点击ROOT PASSWORD配置root用户密码设置完root密码后点Done红色警告已标志已清除，等待软件包安装完成安装完成后，点击Reboot会重启服务器进入到字符界面，完成安装","tags":[{"name":"Linux","slug":"Linux","permalink":"/tags/Linux/"},{"name":"Centos","slug":"Centos","permalink":"/tags/Centos/"}]},{"title":"MySQL DBA从小白到大神实战-08 MySQL监控系统之Zabbix","date":"2017-03-13T05:49:18.572Z","path":"2017/03/13/mysql/课程学习/08-MySQL-DBA从小白到大神实战/","text":"部署zabbix监控简介zabbix（音同 zbix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。 为了使用最新3.2版本的Zabbix，本次部署选用的Linux OS是最新的CentOS7.3（php版本为5.4）。CentOS6.X和CentOS7.X的安装和使用均有较大变化，为便于今后的学习和工作，下面将CentOS7.3的安装和基本配置也记录到本文中。 安装CentOS7.3详见：CentOS7.3安装图解 CentOS7.X系统的基本配置和使用# 查看系统版本 cat /etc/redhat-release ----------------------------------------------- CentOS Linux release 7.3.1611 (Core) ----------------------------------------------- # 配置IP vi /etc/sysconfig/network-scripts/ifcfg-ens160 ----------------------------------------------- TYPE=Ethernet BOOTPROTO=static DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=yes IPV6INIT=no NAME=ens160 UUID=38e983c8-b6ad-40cf-9592-3a3652cf8c6d DEVICE=ens160 ONBOOT=yes IPADDR=10.245.231.202 PREFIX=24 GATEWAY=10.245.231.254 ----------------------------------------------- # 重启网络，使配置生效 service network restart # 配置主机名 hostnamectl status ----------------------------------------------- Static hostname: localhost.localdomain Icon name: computer-vm Chassis: vm Machine ID: 5f66fc1b61374082a7e6e595fc7669c5 Boot ID: 269679da89c54fd4a736c6968b8644f3 Virtualization: vmware Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-514.el7.x86_64 Architecture: x86-64 ----------------------------------------------- hostnamectl --static set-hostname zabbix # 禁用SELINUX setenforce 0 vi /etc/selinux/config ----------------------------------------------- SELINUX=disabled ----------------------------------------------- # 禁用防火墙 systemctl disable firewalld systemctl status firewalld # 设置内核参数(mysql需要) vi /etc/sysctl.d/99-sysctl.conf ----------------------------------------------- kernel.shmmax = 2199023255552 fs.file-max = 6815744 kernel.sem = 250 32000 100 128 kernel.shmmni = 4096 kernel.panic_on_oops = 1 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048576 fs.aio-max-nr = 1048576 net.ipv4.ip_local_port_range = 9000 65500 ----------------------------------------------- # 使内核参数生效 sysctl -p # 常用CentOS7.x命令 ## 查看所有系统服务状态 systemctl list-unit-files -t service ## 查看系统启动以来的message信息(类似dmesg) journalctl -b # 查看网络配置 ip a ----------------------------------------------- 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000 link/ether 00:50:56:a0:1d:b1 brd ff:ff:ff:ff:ff:ff inet 10.245.231.202/24 brd 10.245.231.255 scope global ens160 valid_lft forever preferred_lft forever inet6 fe80::250:56ff:fea0:1db1/64 scope link valid_lft forever preferred_lft forever ----------------------------------------------- 源码编译安装mysql参见博文：MySQL DBA从小白到大神实战-02 MySQL标准化、自动化部署 安装和配置zabbix server建zabbix用户、组和安装目录groupadd zabbix useradd -g zabbix zabbix echo \"zabbix\" | passwd --stdin zabbix mkdir -p /u01/zabbix chown -R zabbix:zabbix /u01/zabbix 安装编译基础依赖包mkdir /media/disk mount /dev/cdrom /media/disk cd /etc/yum.repos.d/ ----------------------------------------------- cp CentOS-Base.repo CentOS-Base.repo.bak vi /etc/yum.repos.d/CentOS-Base.repo [base] name=CentOS-$releasever - Base baseurl=file:///media/disk gpgcheck=0 enabled=1 ----------------------------------------------- yum -y install wget unzip libxml2 libxml2-devel httpd php php-mysql php-common php-gd \\ php-odbc php-pear curl curl-devel net-snmp net-snmp-devel perl-DBI php-xml ntpdate \\ zlib-devel glibc-devel curl-devel gcc automake openssl-devel net-snmp-devel rpm-devel \\ lrzsz ncurses-devel readline-devel # http://mirrors.sohu.com/centos/7.3.1611/os/x86_64/Packages/ 下载以下包并上传到服务器/tmp目录下 -rw-r--r--. 1 root root 126576 Mar 14 11:58 libidn-devel-1.28-4.el7.x86_64.rpm -rw-r--r--. 1 root root 176988 Mar 14 13:46 OpenIPMI-2.0.19-15.el7.x86_64.rpm -rw-r--r--. 1 root root 136452 Mar 14 11:58 OpenIPMI-devel-2.0.19-15.el7.x86_64.rpm -rw-r--r--. 1 root root 513864 Mar 14 13:42 OpenIPMI-libs-2.0.19-15.el7.x86_64.rpm -rw-r--r--. 1 root root 15440 Mar 14 13:45 OpenIPMI-modalias-2.0.19-15.el7.x86_64.rpm -rw-r--r--. 1 root root 58488 Mar 14 11:57 php-bcmath-5.4.16-42.el7.x86_64.rpm -rw-r--r--. 1 root root 516620 Mar 14 11:57 php-mbstring-5.4.16-42.el7.x86_64.rpm # 手动安装包 cd /tmp rpm -ivh libidn*.rpm rpm -ivh php*.rpm rpm -ivh OpenIPMI-modalias-2.0.19-15.el7.x86_64.rpm rpm -ivh OpenIPMI-libs-2.0.19-15.el7.x86_64.rpm rpm -ivh OpenIPMI-2.0.19-15.el7.x86_64.rpm rpm -ivh OpenIPMI-devel-2.0.19-15.el7.x86_64.rpm # 查看php和apache版本 php --version ----------------------------------------------- PHP 5.4.16 (cli) (built: Nov 6 2016 00:29:02) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies ----------------------------------------------- httpd -version ----------------------------------------------- Server version: Apache/2.4.6 (CentOS) Server built: Nov 14 2016 18:04:44 ----------------------------------------------- 源码编译安装zabbix从官岗下载zabbix源码包：http://www.zabbix.com/download 上传到服务器/tmp目录后解压cd /tmp/ tar -zxvf zabbix-3.2.4.tar.gz 编译安装，相关步骤参考官网安装手册cd /tmp/zabbix-3.2.4 ./configure --prefix=/u01/zabbix --enable-server --enable-agent \\ --with-mysql=/u01/mysql/bin/mysql_config \\ --with-net-snmp --with-libcurl --with-libxml2 make &amp;&amp; make install 创建所需数据库并授权用户su - mysql mysql create database zabbix default character set utf8; grant all privileges on *.* to 'zabbix'@'%' identified by 'zabbix'; grant all privileges on *.* to 'zabbix'@'localhost' identified by 'zabbix'; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | test | | zabbix | +--------------------+ use zabbix select database(); +------------+ | database() | +------------+ | zabbix | +------------+ 导入zabbix定义的表结构和数据source /tmp/zabbix-3.2.4/database/mysql/schema.sql source /tmp/zabbix-3.2.4/database/mysql/data.sql source /tmp/zabbix-3.2.4/database/mysql/images.sql 修改相关配置文件# root用户下 # 修改zabbix server配置文件 vi /u01/zabbix/etc/zabbix_server.conf ----------------------------------------------- ListenPort=10051 DBHost=10.245.231.202 DBName=zabbix DBUser=zabbix DBPassword=zabbix DBPort=3306 PidFile=/tmp/zabbix_server.pid ----------------------------------------------- # 修改php配置文件 cp /etc/php.ini /etc/php.ini.zabbixbak sed -i 's/max_execution_time = 30/max_execution_time = 300/g' /etc/php.ini sed -i '/date.timezone =/a\\date.timezone = Asia/Shanghai' /etc/php.ini sed -i '/max_input_time =/s/60/300/' /etc/php.ini sed -i '/mbstring.func_overload = 0/a\\mbstring.func_overload = 1' /etc/php.ini sed -i '/post_max_size =/s/8M/32M/' /etc/php.ini # 修改apache配置文件 sed -i '/ServerName/a\\ServerName zabbix:80' /etc/httpd/conf/httpd.conf 拷贝zabbix的web界面程序文件mkdir /var/www/html/zabbix cp -rf /tmp/zabbix-3.2.4/frontends/php/* /var/www/html/zabbix chown -R apache.apache /var/www/html/zabbix 启动apache和zabbix serversystemctl enable httpd.service systemctl start httpd.service systemctl status httpd.service ----------------------------------------------- ● httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2017-03-16 15:12:59 CST; 15s ago Docs: man:httpd(8) man:apachectl(8) Process: 762 ExecStop=/bin/kill -WINCH $&#123;MAINPID&#125; (code=exited, status=0/SUCCESS) Main PID: 773 (httpd) Status: \"Total requests: 0; Current requests/sec: 0; Current traffic: 0 B/sec\" CGroup: /system.slice/httpd.service ├─773 /usr/sbin/httpd -DFOREGROUND ├─775 /usr/sbin/httpd -DFOREGROUND ├─776 /usr/sbin/httpd -DFOREGROUND ├─777 /usr/sbin/httpd -DFOREGROUND ├─779 /usr/sbin/httpd -DFOREGROUND └─780 /usr/sbin/httpd -DFOREGROUND Mar 16 15:12:59 zabbix systemd[1]: Starting The Apache HTTP Server... Mar 16 15:12:59 zabbix systemd[1]: Started The Apache HTTP Server. ----------------------------------------------- # 启动zabbix server /u01/zabbix/sbin/zabbix_server -c /u01/zabbix/etc/zabbix_server.conf # 添加到系统启动 cd /tmp/zabbix-3.2.4 cp misc/init.d/fedora/core/zabbix_server /etc/init.d/zabbix_server cp misc/init.d/fedora/core/zabbix_agentd /etc/init.d/zabbix_agentd chkconfig --add zabbix_server chkconfig --add zabbix_agentd chkconfig zabbix_server on chkconfig zabbix_agentd on vi /etc/init.d/zabbix_server ----------------------------------------------- BASEDIR=/u01/zabbix ----------------------------------------------- vi /etc/init.d/zabbix_agentd ----------------------------------------------- BASEDIR=/u01/zabbix ----------------------------------------------- # 启动zabbix_server systemctl start zabbix_server.service 通过WEB界面安装配置zabbix在浏览器中输入：http://10.245.231.202/zabbix，打开图形界面 -&gt; 下一步确保所有项都是OK状态 -&gt; 下一步配置数据库连接 -&gt; 下一步配置zabbix server信息 -&gt; 下一步确认信息 -&gt; 下一步下载配置文件，按要求保存到指定位置配置文件内容如下：vi /var/www/html/zabbix/conf/zabbix.conf.php ----------------------------------------------- &lt;?php // Zabbix GUI configuration file. global $DB; $DB['TYPE'] = 'MYSQL'; $DB['SERVER'] = '10.245.231.202'; $DB['PORT'] = '3306'; $DB['DATABASE'] = 'zabbix'; $DB['USER'] = 'zabbix'; $DB['PASSWORD'] = 'zabbix'; // Schema name. Used for IBM DB2 and PostgreSQL. $DB['SCHEMA'] = ''; $ZBX_SERVER = '10.245.231.202'; $ZBX_SERVER_PORT = '10051'; $ZBX_SERVER_NAME = 'zabbix'; $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG; systemctl restart httpd The default user name is Admin, password zabbix. ----------------------------------------------- 结束安装默认的用户名是admin，密码是zabbix登陆后，可以将显示语言设置为中文(英文好的，不建议修改，而且zabbix汉化不是很完全和准确)选择中文，点update 配置启动zabbix agent修改配置文件并启动agentvi /u01/zabbix/etc/zabbix_agentd.conf # 修改以下内容 ----------------------------------------------- Server=10.245.231.202 ServerActive=10.245.231.202 Hostname=zabbix ----------------------------------------------- # 启动 /u01/zabbix/sbin/zabbix_agentd # 或者 systemctl restart zabbix_agentd.service 在zabbix web界面中配置主机中，点击【停用的】确定，启用主机这时状态已变为【启用】，但可用状态异常点击主机名将主机IP变更为实际的 -&gt; 更新重新刷新页面，稍等一会可用性状态正常了 监控MySQL实例状态 监控思路：在要监控的MySQL服务器上安装zabbix agent，然后在zabbix主机web界面里配置要监控的MySQL服务器的信息，添加zabbix自带的Template App MySQL模版。 在监控的mysql服务器上安装并启动zabbix agent# 系统环境 yum -y install gcc* make vim setenforce 0 systemctl stop firewalld.service # 添加zabbix帐号 groupadd zabbix useradd zabbix -g zabbix -s /sbin/nologin # 配置hosts(非必须) vi /etc/hosts ----------------------------------------------- 10.245.231.201 mysql 10.245.231.202 zabbix ----------------------------------------------- # 上传rpm包到/tmp目录后开始安装 rpm -ivh zabbix-agent-3.2.4-1.el6.x86_64.rpm # 也可以按以下步骤在解压后的源码目录编译安装 ./configure --enable-agent make &amp;&amp; make install cp misc/init.d/fedora/core/zabbix_agentd /etc/init.d/zabbix_agentd chkconfig --add zabbix_agentd chkconfig zabbix_agentd on # 修改agent配置文件(注意下面都是zabbix_agent rpm包安装后的目录，源码安装的话请注意修改) vi /etc/zabbix/zabbix_agentd.conf ----------------------------------------------- Server=10.245.231.202 ServerActive=10.245.231.202 Hostname=zabbix ----------------------------------------------- # 启动agent /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf 建立mysql host groups组模板是zabbix系统提供的，进入zabbix web后台，Configuration–&gt;Hosts groups–&gt;点击Create host group–&gt;选择template选项卡，选择模板TemplateApp MySQL，Templdate OS Linux，Group name设置成Mysql_Servers，最后点击add 建立hostsconfiguration–&gt;hosts–&gt;Create hosts，然后按图配置选择template选项卡–&gt;select–&gt;选择模板Template App MySQL,Templdate OS Linux，最后点击下边的Add按钮确认模板已添加，点Add按钮稍等一会，确保状态和可用性都正常 使用自带模板监控mysql在监控的mysql服务器上给zabbix agent配置数据库账号GRANT PROCESS,SUPER,REPLICATION CLIENT ON *.* TO zabbix@'127.0.0.1' IDENTIFIED BY 'zabbix123456'; GRANT PROCESS,SUPER,REPLICATION CLIENT ON *.* TO zabbix@'localhost' IDENTIFIED BY 'zabbix123456'; 创建/etc/zabbix/.my.cnf,并在里面写入mysql服务器的密码vi /etc/zabbix/.my.cnf ----------------------------------------------- [mysql] user=zabbix password=zabbix123456 [mysqladmin] user=zabbix password=zabbix123456 ----------------------------------------------- 修改监控mysql相关的用户参数文件cd /etc/zabbix/zabbix_agentd.d/ vi userparameter_mysql.conf # 修改以下方面： ----------------------------------------------- HOME=/var/lib/zabbix 替换成 HOME=/etc/zabbix mysql 补全路径 /u01/mysql/bin/mysql ----------------------------------------------- # 重启zabbix agent ps -ef | grep 'zabbix_agentd' | grep -v grep | awk '&#123;print $2&#125;' | xargs kill -9 /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf 然后在zabbix-server服务器上测试是否可以获取到mysql的status信息cd /u01/zabbix/bin/ ./zabbix_get -s 10.245.231.201 -p10050 -k mysql.ping 1 ./zabbix_get -s 10.245.231.201 -p10050 -k mysql.version /u01/mysql/bin/mysql Ver 14.14 Distrib 5.6.35, for Linux (x86_64) using EditLine wrapper ./zabbix_get -s 10.245.231.201 -p10050 -k mysql.status[Com_insert] 3 zabbix自带的mysql模板共可监测以下14项按下图可以查看监控mysql的情况，也可以图形化显示 自定义zabbix模板监控mysql点击Configuration–&gt;Templates–&gt;create template，参照下图中配置点Applications–&gt;Create Applications输入监控的应用名称Mysql添加成功，点【Items】，然后点击左上的【Create Items】按下图所示填写后点下方add创建监控脚本文件并参数文件mkdir /etc/zabbix/scripts vi /etc/zabbix/scripts/check_mysql_status_3306.sh ----------------------------------------------- #!/bin/bash host=localhost username=zabbix password=zabbix port=3306 CHECK_TIME=3 #mysql is working MYSQL_IS_OK is 1 , mysql down MYSQL_IS_OK is 0 MYSQL_IS_OK=1 function check_mysql_status ()&#123; $MYSQL -u$username -p\"$password\" -P$port -e \"select user();\" &gt;/dev/null 2&gt;&amp;1 if [ $? = 0 ] ;then MYSQL_IS_OK=1 else MYSQL_IS_OK=0 fi return $MYSQL_IS_OK &#125; while [ $CHECK_TIME -ne 0 ] do let \"CHECK_TIME -= 1\" check_mysql_status if [ $MYSQL_IS_OK = 1 ] ; then CHECK_TIME=0 echo 0 exit 0 fi if [ $MYSQL_IS_OK -eq 0 ] &amp;&amp; [ $CHECK_TIME -eq 0 ] then echo 1 exit 1 fi sleep 3 done ----------------------------------------------- chmod +x /etc/zabbix/scripts/check_mysql_status_3306.sh cd /etc/zabbix/zabbix_agentd.d/ vi userparameter_mysql.conf # 添加以下内容 ----------------------------------------------- UserParameter=my3306.check_mysql_status,/etc/zabbix/scripts/check_mysql_status_3306.sh ----------------------------------------------- 参考：Centos7.2下搭建Zabbix3.2","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"},{"name":"zabbix","slug":"zabbix","permalink":"/tags/zabbix/"}]},{"title":"MySQL DBA从小白到大神实战-07 MySQL锁机制与事务机制实现","date":"2017-03-09T16:00:00.000Z","path":"2017/03/10/mysql/课程学习/07-MySQL-DBA从小白到大神实战/","text":"MySQL参数autocommit生产环境设1还是0？为什么？MySQL参数autocommit生产环境设成0，即不自动提交。 设置成不自动提交，事务能做rollback，以满足事务的原子性Atomicity的要求，设置方法：set autocommit=0; # 也可以修改my.cnf配置文件 autocommit=0 MySQL参数tx_isolation生产环境上大多数是设什么值，为什么？MySQL参数tx_isolation生产环境上大多数是设成READ-COMMITED。事务的隔离级别设置为READ-COMMITED时不会发生脏读现象，虽会出现不可重复读和幻读问题，但不会对业务应用造成影响。而设置成以下隔离级别会出现的问题如下： Read Uncommitted：会产生脏读、不可重复读、幻读现象，而脏读这在生产环境中是不被允许的 Repeatable Read：不会出现不可重复读和幻读问题，但此特性一般不符合应用业务需要，且并发性能也不好。 Serializable：所有事务全部串行执行（只允许同时一个事务操作，若有其他事务，也需要等前一个事务完成后才能开始），不能并发执行，这在生产环境中是不现实的。 与MySQL锁相关的有哪些因素？ 有无主键 有无索引，是不是唯一索引 事务的隔离级别是什么 SQL语句的执行计划 课堂笔记事务的概念事务定义了一个服务操作的序列，由服务器保证这些操作序列在多个客户并发访问和服务器出现故障情况下的原子性。事务概念最初是在数据库管理系统领域发展起来的，是一种对共享数据库进行并发访问或错误处理的范型。A transcation consists of a collection of DML statements that form a logical unit of work.DDL statements will implicitly commit any outstanding transcation. 事务的属性 ACID Atomicity: Changes made by a transaction to the database are atomic, “all or nothing”. [Redo &amp; Undo] Consistency: The transaction changes the state of the base from one coherent state to a new coherent state (conforming to integrity constraints). [Undo] Isolation: The transaction is isolated from other transactions and appears to be the only user on the system even though it is executing with other concurrent transaction. [lock] Durability(Durable): The committed changes by a transaction are persistent, capable of surviving machine crashes. [Redo] 并发会存在问题 dirty read 脏读 unrepeatable read 不可重复读 phantom read 幻读 事务的隔离级别 Read Uncommitted：会出现脏读、不可重复读、幻读(隔离级别最低，并发性能高) Read Committed：会出现不可重复读、幻读问题（锁定正在读取的行），Oracle的默认隔离级别 Repeatable Read：会出幻读（锁定所读取的所有行），Mysql的默认隔离级别，在Mysql Innodb上设置此隔离级别幻读也不会产生 Serializable：保证所有的情况不会发生（锁表） 事务编程不好习惯 在循环中提交：提交commit应尽量放到循环外 使用自动提交：不使用自动提交，set autocommit=0 使用自动回滚：MSSQL中关闭自动回滚 大事务：尽量拆成小事务 锁的概念什么是锁锁用于在多个事务访问同一个对象时根据这些操作访问同一对象的先后次序给事务排序。 不同数据库的锁实现 InooDB 行级锁 Oracle 行级锁 MyISAM 表锁 Microsoft SQL Server 行级锁、锁升级 Lock与Latch的区别 对象：事务/线程 保护：数据库对象/内存结构对象 持续时间：长/短 模式：表锁行锁/互斥 死锁：有/无 InnoDB存储引擎中锁 表级 IS 意向共享锁 IX 意向排它锁 行级 S 行级共享锁 X 行级排它锁 update更新一行时，会在要更新的表上加IX锁，并在更新的行上加X锁，这时如果并发有用户drop table，看到表上有IX锁，就会立即报错 InnoDB row lock(行锁)范围 Record lock：行记录锁 Gap lock：间隙锁，在索引记录间隙上的锁，或者是第一条索引记录之前、最后一条索引记录之后上的间隙锁，只有隔离级别为Repeatable Read的普通索引才有Gap lock Next-key lock：下一键锁，索引记录锁以及索引记录之间的间隙锁，前二者的组合锁 测试Record Lock# 创建测试表 create table t2(id int, name varchar(10),primary key(id),key(name)); insert into t2 values (1,'A'),(3,'A'),(5,'C'),(7,'G'),(10,'I'); commit; select id,name from t2; +----+------+ | id | name | +----+------+ | 1 | A | | 3 | A | | 5 | C | | 7 | G | | 10 | I | +----+------+ # 测试一 # session 1: begin; select * from t2 where name='C' for update; # session 2: begin; select * from t2 where id=5 lock in share mode; #这时session 2被阻塞，查看锁信息 select * from information_schema.innodb_locks; +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ | lock_id | lock_trx_id | lock_mode | lock_type | lock_table | lock_index | lock_space | lock_page | lock_rec | lock_data | +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ | 14789:19:3:4 | 14789 | S | RECORD | `lyj`.`t2` | PRIMARY | 19 | 3 | 4 | 5 | | 14788:19:3:4 | 14788 | X | RECORD | `lyj`.`t2` | PRIMARY | 19 | 3 | 4 | 5 | +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ # 测试二 # session 1: begin; select * from t2 where id=5 and name='C' for update; # session 2: begin; select * from t2 where id=5 and name='B' for update; #这时session 2被阻塞，查看锁信息 select * from information_schema.innodb_locks; +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ | lock_id | lock_trx_id | lock_mode | lock_type | lock_table | lock_index | lock_space | lock_page | lock_rec | lock_data | +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ | 14793:19:3:4 | 14793 | X | RECORD | `lyj`.`t2` | PRIMARY | 19 | 3 | 4 | 5 | | 14792:19:3:4 | 14792 | X | RECORD | `lyj`.`t2` | PRIMARY | 19 | 3 | 4 | 5 | +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ 测试GAP LOCK# 测试一 # session 1 set tx_isolation='repeatable-read'; begin; select * from t2 where name='C' for update; # session 2 set tx_isolation='repeatable-read'; begin; insert into t2 values (6,'C'); #这时session 2被阻塞，查看锁信息以下几种方法： show engine innodb status\\G; select * from information_schema.innodb_locks; +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ | lock_id | lock_trx_id | lock_mode | lock_type | lock_table | lock_index | lock_space | lock_page | lock_rec | lock_data | +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ | 14814:19:4:5 | 14814 | X,GAP | RECORD | `lyj`.`t2` | name | 19 | 4 | 5 | 'G', 7 | | 14813:19:4:5 | 14813 | X,GAP | RECORD | `lyj`.`t2` | name | 19 | 4 | 5 | 'G', 7 | +--------------+-------------+-----------+-----------+------------+------------+------------+-----------+----------+-----------+ SELECT r.trx_id waiting_trx_id, r.trx_mysql_thread_id waiting_thread, r.trx_query waiting_query, b.trx_id blocking_trx_id, b.trx_mysql_thread_id blocking_thread, b.trx_query blocking_query FROM information_schema.innodb_lock_waits w INNER JOIN information_schema.innodb_trx b on b.trx_id=w.blocking_trx_id INNER JOIN information_schema.innodb_trx r on r.trx_id=w.requesting_trx_id; +----------------+----------------+-------------------------------+-----------------+-----------------+----------------+ | waiting_trx_id | waiting_thread | waiting_query | blocking_trx_id | blocking_thread | blocking_query | +----------------+----------------+-------------------------------+-----------------+-----------------+----------------+ | 14819 | 30 | insert into t2 values (6,'C') | 14813 | 32 | NULL | +----------------+----------------+-------------------------------+-----------------+-----------------+----------------+ SELECT p2.`HOST` Blockedhost, p2.`USER` BlockedUser, r.trx_id BlockedTrxId, r.trx_mysql_thread_id BlockedThreadId, TIMESTAMPDIFF( SECOND, r.trx_wait_started, CURRENT_TIMESTAMP ) WaitTime, r.trx_query BlockedQuery, l.lock_table BlockedTable, m.`lock_mode` BlockedLockMode, m.`lock_type` BlockedLockType, m.`lock_index` BlockedLockIndex, m.`lock_space` BlockedLockSpace, m.lock_page BlockedLockPage, m.lock_rec BlockedLockRec, m.lock_data BlockedLockData, p.`HOST` blocking_host, p.`USER` blocking_user, b.trx_id BlockingTrxid, b.trx_mysql_thread_id BlockingThreadId, b.trx_query BlockingQuery, l.`lock_mode` BlockingLockMode, l.`lock_type` BlockingLockType, l.`lock_index` BlockingLockIndex, l.`lock_space` BlockingLockSpace, l.lock_page BlockingLockPage, l.lock_rec BlockingLockRec, l.lock_data BlockingLockData, IF (p.COMMAND = 'Sleep', CONCAT(p.TIME,' seconds'), 0) idel_in_trx FROM information_schema.INNODB_LOCK_WAITS w INNER JOIN information_schema.INNODB_TRX b ON b.trx_id = w.blocking_trx_id INNER JOIN information_schema.INNODB_TRX r ON r.trx_id = w.requesting_trx_id INNER JOIN information_schema.INNODB_LOCKS l ON w.blocking_lock_id = l.lock_id AND l.`lock_trx_id`=b.`trx_id` INNER JOIN information_schema.INNODB_LOCKS m ON m.`lock_id`=w.`requested_lock_id` AND m.`lock_trx_id`=r.`trx_id` INNER JOIN information_schema. PROCESSLIST p ON p.ID = b.trx_mysql_thread_id INNER JOIN information_schema. PROCESSLIST p2 ON p2.ID = r.trx_mysql_thread_id ORDER BY WaitTime DESC \\G; 分析一条SQL会加哪些锁set tx_isolation='repeatable-read'; create table t4 ( id int(11) not null default '0', user_id int(11) default null, user_name varchar(10) default null, create_time varchar(10) default null, address varchar(10) default null, primary key (id), key idx_time_name (create_time,user_name) ); insert into t4 values (1,101,'tom','20161010',''), (4,104,'joe','20160305',''), (6,106,'tom','20161231',''), (8,108,'tom','20160515','sh'), (10,110,'tom','20160101',''), (100,200,'jack','20161120',''); commit; select * from t4 where create_time&gt;'20160101' and create_time&lt;'20161120' and user_name='tom' and address!='' for update; 下图为执行上面SQL语句后会加哪些锁的图示 MDL锁Mysql5.5版本引入了MDL锁(metadata lock)，用于解决或者保证DDL操作与DML操作之间的一致性。在mysqldump的时候不能做DDL操作，会提示wailing for table metadata lock；在做DDL操作没办法保护事务，因此引入了meta data lock。 # session 1 begin; select * from t1; # session 2 drop table t1; #这时session 2被阻塞，可以通过以下命令查看状态 show processlist; +----+------+-----------+------+---------+------+---------------------------------+------------------+ | Id | User | Host | db | Command | Time | State | Info | +----+------+-----------+------+---------+------+---------------------------------+------------------+ | 38 | root | localhost | lyj | Sleep | 155 | | NULL | | 39 | root | localhost | lyj | Query | 115 | Waiting for table metadata lock | drop table t1 | # 这个就是meta data lock | 40 | root | localhost | NULL | Query | 0 | init | show processlist | +----+------+-----------+------+---------+------+---------------------------------+------------------+ 解决meta data lock的策略： 解决DDL高并发 线上DB不要轻易做alter table 干掉DDL会话show processlist; kill id; 死锁的原理与分析 产生回路两个或两个以上的事务执行过程中，分别持有一把锁，然后加另一把锁（AB-BA），产生死锁。 加锁顺序不一致两个或两个以上的事务并发执行（同一时刻），因争夺锁资源而造成的一种互相等待，产生死锁。 场景：产生回路导致死锁测试select * from t1; +------+-------+ | id | name | +------+-------+ | 1 | aaaaa | | 2 | aaaaa | | 3 | cccc | | 5 | eeeee | +------+-------+ # session 1 begin; update t1 set name='AAAAA' where id=1; # session 2 begin; update t1 set name='BBBBB' where id=2; # session 1 update t1 set name='CCCCC' where id=2; # 这时操作会被阻塞 # session 2 begin; update t1 set name='DDDDD' where id=1; ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction # 这时session 2会报死锁错误，操作被rollback; 而session 1的事务阻塞解除， # session 1 select * from t1; +------+-------+ | id | name | +------+-------+ | 1 | AAAAA | | 2 | CCCCC | | 3 | cccc | | 5 | eeeee | +------+-------+ # session 2 select * from t1; +------+-------+ | id | name | +------+-------+ | 1 | aaaaa | | 2 | aaaaa | | 3 | cccc | | 5 | eeeee | +------+-------+ # 可以通过以下命令查看最后一次死锁解撤的信息： show engine innodb status\\G; ------------------------ LATEST DETECTED DEADLOCK ------------------------ 2017-03-10 14:47:38 7f150d11a700 *** (1) TRANSACTION: TRANSACTION 14866, ACTIVE 63 sec fetching rows mysql tables in use 1, locked 1 LOCK WAIT 3 lock struct(s), heap size 1184, 2 row lock(s), undo log entries 1 MySQL thread id 38, OS thread handle 0x7f150d0d9700, query id 1579 localhost root updating update t1 set name='CCCCC' where id=2 *** (1) WAITING FOR THIS LOCK TO BE GRANTED: RECORD LOCKS space id 18 page no 3 n bits 80 index `GEN_CLUST_INDEX` of table `lyj`.`t1` trx id 14866 lock_mode X locks rec but not gap waiting Record lock, heap no 8 PHYSICAL RECORD: n_fields 5; compact format; info bits 0 0: len 6; hex 000000501013; asc P ;; 1: len 6; hex 000000003a13; asc : ;; 2: len 7; hex 3c0000093b0110; asc &lt; ; ;; 3: len 4; hex 80000002; asc ;; 4: len 5; hex 4242424242; asc BBBBB;; ...... # innodb_print_all_deadlocks设置为ON时，会把死锁的信息记录到错误日志里 show variables like '%dead%'; +----------------------------+-------+ | Variable_name | Value | +----------------------------+-------+ | innodb_print_all_deadlocks | OFF | +----------------------------+-------+ set global innodb_print_all_deadlocks='ON'; 减少Innodb死锁的方法 超时设置（参数innodb_lock_wait_timout) 尽快提交事务，小事务不容易发生死锁 加FOR UPDATE、LOCK IN SHARE NODE读锁时，最好降低事务隔离级别，例如用RC级别，降低死锁发生概率 事务中涉及多个表，或者涉及多行记录时，每个事务的操作顺序都要保持一致，降低死锁概率，最好用存储过程/存储函数固化 通过索引等方式优化SQL效率，降低死锁发生概率（减少扫描/锁范围，降低概率） 查找锁常用命令#查看innodb引擎 show engine innodb status\\G; #查看锁 SELECT r.trx_id waiting_trx_id, r.trx_mysql_thread_id waiting_thread, r.trx_query waiting_query, b.trx_id blocking_trx_id, b.trx_mysql_thread_id blocking_thread, b.trx_query blocking_query FROM information_schema.innodb_lock_waits w INNER JOIN information_schema.innodb_trx b ON b.trx_id= w.blocking_trx_id INNER JOIN information_schema.innodb_trx r ON r.trx_id= w.requesting_trx_id; select * from information_schema.innodb_trx\\G; # 表中几个最常用的字段： trx_id: InnoDB存储引擎内部唯一的事务ID trx_state: 当前事务的状态 trx_started: 事务的开始时间 trx_wait_started: 事务等待开始的时间 trx_mysql_thread_id: Mysql中的线程ID,SHOW PROCESSLIST显示的结果 trx_query: 事务运行的sql语句 select * from information_schema.innodb_locks\\G; # 表中几个最常用的字段： lock_id: 锁的ID lock_trx_id: 事务ID lock_mode: 锁的模式 lock_type: 锁的类型，表锁还是行锁 lock_table: 要加锁的表 lock_index: 锁的索引 lock_space: InnoDB存储引擎表空间的ID号 lock_page: 被锁住的页的数量。若是表锁，则该值为NULL lock_rec: 被锁住的行的数量。若是表锁，则该值为NULL lock_data: 被锁住的行的主键值。当是表锁时，该值为NULL select * from information_schema.innodb_lock_waits\\G; # 表中几个最常用的字段： requesting_trx_id: 申请锁资源的事务ID requesting_lock_id: 申请的锁的ID blocking_trx_id: 阻塞的锁的ID","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"MySQL DBA从小白到大神实战-06 深入浅出MySQL备份与恢复","date":"2017-02-27T02:34:20.523Z","path":"2017/02/27/mysql/课程学习/06-MySQL-DBA从小白到大神实战/","text":"使用mydumper工具全库备份 mydumper是针对mysql数据库备份的一个轻量级第三方的开源工具，备份方式采用逻辑备份。mydumper支持多线程，备份速度远高于原生态的mysqldump。 下载mydumper下载地址：https://launchpad.net/mydumper 编译安装# 安装编译所需的依赖包(参照：https://answers.launchpad.net/mydumper/+faq/349) yum install -y glib2-devel mysql-devel zlib-devel pcre-devel # 将下载的mydumper-0.9.1.tar.gz上传到服务器/tmp目录下，root用户执行以下命令 cd /tmp tar -xvpf mydumper-0.9.1.tar.gz cd mydumper-0.9.1 cmake . make &amp;&amp; make install # ------------------------------------------------------------------------------------------ Scanning dependencies of target mydumper [ 25%] Building C object CMakeFiles/mydumper.dir/mydumper.c.o [ 50%] Building C object CMakeFiles/mydumper.dir/server_detect.c.o [ 75%] Building C object CMakeFiles/mydumper.dir/g_unix_signal.c.o Linking C executable mydumper [ 75%] Built target mydumper Scanning dependencies of target myloader [100%] Building C object CMakeFiles/myloader.dir/myloader.c.o Linking C executable myloader [100%] Built target myloader [ 75%] Built target mydumper [100%] Built target myloader Install the project... -- Install configuration: \"\" -- Installing: /usr/local/bin/mydumper -- Removed runtime path from \"/usr/local/bin/mydumper\" -- Installing: /usr/local/bin/myloader -- Removed runtime path from \"/usr/local/bin/myloader\" # ------------------------------------------------------------------------------------------ 使用mydumper备份全库mkdir -p /u01/backup mydumper \\ --user=root \\ --password='' \\ --socket=/u01/run/3306/mysql.sock \\ --regex '^(?!(mysql))' \\ --outputdir=/u01/backup/ \\ --compress \\ --verbose=3 \\ --logfile=/u01/backup/mydumper.log # --regex '^(?!(mysql))' 这个正则表达式的意思是除了mysql数据库，其他数据库都备份 查看备份结果cd /u01/backup/ ll total 20 -rw-rw-r-- 1 mysql mysql 84 Feb 28 16:43 jfedu-schema-create.sql.gz -rw-rw-r-- 1 mysql mysql 174 Feb 28 16:43 jfedu.t1-schema.sql.gz -rw-rw-r-- 1 mysql mysql 153 Feb 28 16:43 jfedu.t1.sql.gz -rw-rw-r-- 1 mysql mysql 134 Feb 28 16:43 metadata -rw-rw-r-- 1 mysql mysql 969 Feb 28 16:43 mydumper.log # 查看备份日志，可以看出备份开启了多线程 vi mydumper.log 2017-02-28 16:43:47 [INFO] - Connected to a MySQL server 2017-02-28 16:43:47 [INFO] - Started dump at: 2017-02-28 16:43:47 2017-02-28 16:43:47 [INFO] - Written master status 2017-02-28 16:43:47 [INFO] - Thread 1 connected using MySQL connection ID 20 2017-02-28 16:43:47 [INFO] - Thread 2 connected using MySQL connection ID 21 2017-02-28 16:43:47 [INFO] - Thread 3 connected using MySQL connection ID 22 2017-02-28 16:43:47 [INFO] - Thread 4 connected using MySQL connection ID 23 2017-02-28 16:43:47 [INFO] - Non-InnoDB dump complete, unlocking tables 2017-02-28 16:43:47 [INFO] - Thread 1 dumping data for `jfedu`.`t1` 2017-02-28 16:43:47 [INFO] - Thread 2 dumping schema for `jfedu`.`t1` 2017-02-28 16:43:47 [INFO] - Thread 3 shutting down 2017-02-28 16:43:47 [INFO] - Thread 4 shutting down 2017-02-28 16:43:47 [INFO] - Thread 1 shutting down 2017-02-28 16:43:47 [INFO] - Thread 2 shutting down 2017-02-28 16:43:47 [INFO] - Finished dump at: 2017-02-28 16:43:47 误操作truncate table gyj_t1;利用mysqldump的备份和binlog日志对表gyj_t1做完全恢复。测试场景构建use jfedu; create table gyj_t1(id int,name varchar(10)); insert into gyj_t1 values(1,'AAAAA'); commit; 使用mysqldump全库备份mysqldump -h127.0.0.1 --single-transaction --master-data=2 -P3306 -A &gt; /tmp/all_database_20170302.sql 备份后DML操作再truncateinsert into gyj_t1 values(2,'BBBBBB'); commit; truncate table gyj_t1; 完全恢复表并验证数据# 从备份文件中找出需要恢复表的建表语句： cat /tmp/all_database_20170302.sql | sed -e '/./&#123;H;$!d;&#125;' -e 'x;/CREATE TABLE `gyj_t1`/!d;q' # 从备份文件中找出需要恢复表的数据 cat /tmp/all_database_20170302.sql | grep --ignore-case 'insert into `gyj_t1`' # 恢复之前需要确认是否设置自动提交，若不是恢复前先执行以下命令修改 set autocommit=1; # 因为是truncate表，表结构不需要恢复，只需要恢复数据即可 cat /tmp/all_database_20170302.sql | grep --ignore-case 'insert into `gyj_t1`' | mysql -uroot -p jfedu # 查看恢复的数据 select * from gyj_t1; +------+-------+ | id | name | +------+-------+ | 1 | AAAAA | +------+-------+ # 查看备份时binlog位置 grep MASTER /tmp/all_database_20170302.sql -- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000030', MASTER_LOG_POS=1957; # 找出误操作语句的位置 mysql --socket=/u01/run/3306/mysql.sock -e \"show binlog events in 'binlog.000030'\" |grep -i truncate binlog.000030 2161 Query 101 2250 use `jfedu`; truncate table gyj_t1 # 用mysqlbinlog命令在binlog中找出相关记录 mysqlbinlog -v --base64-output=decode-rows /u01/log/3306/binlog/binlog.000030 &gt; /tmp/30.sql vi /tmp/30.sql # ------------------------------------------------------------------------------------------ ...... #170302 13:46:20 server id 101 end_log_pos 1957 CRC32 0xfb6ea7a5 Xid = 512 COMMIT/*!*/; # at 1957 #170302 13:49:53 server id 101 end_log_pos 2030 CRC32 0x27b2b661 Query thread_id=4 exec_time=0 error_code=0 SET TIMESTAMP=1488433793/*!*/; SET @@session.sql_mode=1073741824/*!*/; BEGIN /*!*/; # at 2030 #170302 13:49:53 server id 101 end_log_pos 2083 CRC32 0x5e3da140 Table_map: `jfedu`.`gyj_t1` mapped to number 109 # at 2083 #170302 13:49:53 server id 101 end_log_pos 2130 CRC32 0xbb45eb36 Write_rows: table id 109 flags: STMT_END_F ### INSERT INTO `jfedu`.`gyj_t1` ### SET ### @1=2 ### @2='BBBBBB' # at 2130 #170302 13:49:53 server id 101 end_log_pos 2161 CRC32 0x54d510bc Xid = 950 COMMIT/*!*/; # 这个就是truancate前最后操作的位置 # at 2161 #170302 13:50:23 server id 101 end_log_pos 2250 CRC32 0xc37cd27b Query thread_id=4 exec_time=0 error_code=0 SET TIMESTAMP=1488433823/*!*/; truncate table gyj_t1 /*!*/; # at 2250 ...... # ------------------------------------------------------------------------------------------ # 使用mysqlbinlog恢复从备份到 mysqlbinlog --start-position=1957 --stop-position=2161 /u01/log/3306/binlog/binlog.000030 | mysql -uroot -p select * from gyj_t1; +------+--------+ | id | name | +------+--------+ | 1 | AAAAA | | 2 | BBBBBB | +------+--------+ 利用Innobackupex的备份和binlog日志对MySQL数据库做完全恢复 Xtrabackup是一个对InnoDB做数据备份的工具，支持在线热备份（备份时不影响数据读写），是商业备份工具InnoDB Hotbackup的一个很好的替代品。Xtrabackup有两个主要的工具：xtrabackup、innobackupex。（1）xtrabackup只能备份InnoDB和XtraDB两种数据表，而不能备份MyISAM数据表（2）innobackupex是用perl脚本封装了xtrabackup，能同时备份处理innodb和myisam，但在处理myisam时需要加一个读锁（3）相关帮助文档：https://www.percona.com/docs/wiki/index.html 下载安装Xtrabackup（二进制）https://www.percona.com/downloads/XtraBackup/LATEST/ 上传并解压缩安装软件包cd /tmp tar -xvpf percona-xtrabackup-2.4.6-Linux-x86_64.tar.gz cd /tmp/percona-xtrabackup-2.4.6-Linux-x86_64/bin cp * /usr/local/bin/ cd /tmp/percona-xtrabackup-2.4.6-Linux-x86_64/man/man1 cp * /usr/share/man/man1 # 可以使用以下命令查看帮助 xtrabackup --help innobackupex --help man xtrabackup man innobackupex 测试场景构建create database lyj; use lyj create table t1(id int,name varchar(10)); insert into t1 values(1,'AAAAA'); insert into t1 select * from t1; ...... commit; select count(*) from t1; +----------+ | count(*) | +----------+ | 64 | +----------+ 使用Innobackupex备份全库mkdir -p /u01/backup innobackupex \\ --defaults-file=/u01/conf/my3306.cnf \\ --user=root \\ --password='' \\ --socket=/u01/run/3306/mysql.sock \\ --no-timestamp \\ /u01/backup/xtrabackup_20170302 应用备份期间日志innobackupex \\ --defaults-file=/u01/backup/xtrabackup_20170302/backup-my.cnf \\ --apply-log \\ --user=root \\ --password='' \\ /u01/backup/xtrabackup_20170302 # --defaults-file 配置文件参数必须放在第一位，否则会报错 # --apply-log 应用备份期间日志 查看innobackupex备份结果cd /u01/backup/xtrabackup_20170302 ll total 4165684 -rw-r----- 1 mysql mysql 434 Mar 2 10:23 backup-my.cnf -rw-r----- 1 mysql mysql 33554432 Mar 2 10:32 ibdata1 -rw-r----- 1 mysql mysql 16777216 Mar 2 10:23 ibdata2 -rw-r----- 1 mysql mysql 1048576000 Mar 2 10:32 ib_logfile0 -rw-r----- 1 mysql mysql 1048576000 Mar 2 10:31 ib_logfile1 -rw-r----- 1 mysql mysql 1048576000 Mar 2 10:32 ib_logfile2 -rw-r----- 1 mysql mysql 1048576000 Mar 2 10:32 ib_logfile3 -rw-r----- 1 mysql mysql 12582912 Mar 2 10:32 ibtmp1 drwxr-x--- 2 mysql mysql 4096 Mar 2 10:23 jfedu drwxr-x--- 2 mysql mysql 4096 Mar 2 10:23 lyj drwxr-x--- 2 mysql mysql 4096 Mar 2 10:23 mysql drwxr-x--- 2 mysql mysql 4096 Mar 2 10:23 performance_schema -rw-r----- 1 mysql mysql 20 Mar 2 10:23 xtrabackup_binlog_info -rw-rw-r-- 1 mysql mysql 20 Mar 2 10:31 xtrabackup_binlog_pos_innodb -rw-r----- 1 mysql mysql 113 Mar 2 10:31 xtrabackup_checkpoints # 检查点 -rw-r----- 1 mysql mysql 572 Mar 2 10:23 xtrabackup_info -rw-r----- 1 mysql mysql 8388608 Mar 2 10:31 xtrabackup_logfile # log日志 备份后DML操作insert into t1 select * from t1; ...... commit; select count(*) from t1; +----------+ | count(*) | +----------+ | 4096 | +----------+ 摸拟rm误操作rm -rf /u01/data/3306/* # 这时关闭数据库已不能正常启动了 拷备份数据到数据库目录cp -rf /u01/backup/xtrabackup_20170302/* /u01/data/3306/ # 注意文件权限，如果不是mysql，使用以下语句修改，xtrabackup_* 可以不拷贝 chown -R mysql:mysql /u01/data/3306/ 登陆数据库验证备份恢复# 启动数据库 use lyj select count(*) from t1; +----------+ | count(*) | +----------+ | 64 | +----------+ # 恢复了备份时（包括备份期间）的64条记录 使用mysqlbinlog完全恢复cat /u01/backup/xtrabackup_20170302/xtrabackup_binlog_info binlog.000027 28905477 mysqlbinlog --start-position=28905477 /u01/log/3306/binlog/binlog.000027 | mysql -uroot -p # 登陆数据库 select count(*) from t1; +----------+ | count(*) | +----------+ | 4096 | +----------+ 随堂笔记mysqldump常用参数及使用示例# 查看帮助 mysqldump --help # 一些常用参数 --single-transaction # 备份执行期间不阻塞DML，在生产环境备份时一定要加此参数 -A, --all-databases Dump all the databases. This will be same as --databases # 备份所有的数据库 --master-data[=#] # --master-data=2 或 --master-data=1，一般做主从的时侯需要加此参数 --add-drop-database Add a DROP DATABASE before each create. # 备份中不生成创建数据库命令 --add-drop-table Add a DROP TABLE before each create. # 备份中不生成创建表命令 # 示例 mysqldump -h127.0.0.1 --single-transaction -P3306 -A &gt; /tmp/all_database.sql mysqldump -h127.0.0.1 -P3306 -uroot -p --single-transaction --master-data=2 jfedu &gt; /tmp/jfedu.sql --single-transaction # 创建一致性快照（only innodb） # 不能存在其他操作：ALTER TABLE, DROP TABLE, RENAME TABLE,TRUNCATE TABLE # 关闭--lock-tables --master-data 1 ： 输出change master命令 2 ： 注释输出change master命令 --default-character-set binary mysqldump -u[USER] -p[PASSWORD] -h [HOST] -P[PORT] --single-transaction --master-data=2 [DB]| pv -q -L 10M | gzip &gt; /tmp/test.gzip 备份 ：mysqldump 限流 ：pv 压缩 ：gzip gunzip -fc /tmp/test.gz | mysql -u[USER]-h[HOST] -P[PORT] DB 解压 ： gunzip 恢复 ：mysql 主备： change master 分析mysqldump的执行流程# 打开general.log（通常是关闭的） show variables like '%gen%'; +------------------+--------------------------+ | Variable_name | Value | +------------------+--------------------------+ | general_log | OFF | | general_log_file | /u01/data/3306/mysql.log | +------------------+--------------------------+ set global general_log=1; # 在新窗口追踪日志 tail -f /u01/data/3306/mysql.log # 使用mysqldump备份jfedu数据库 mysqldump -h127.0.0.1 -P3306 -uroot -p --single-transaction --master-data=2 jfedu &gt; /tmp/jfedu.sql # 分析general.log，下面这段就是追踪到的mysqldump执行流程 # ------------------------------------------------------------------------------------------ 170228 15:39:29 9 Connect root@127.0.0.1 on 9 Query /*!40100 SET @@SQL_MODE='' */ 9 Query /*!40103 SET TIME_ZONE='+00:00' */ 9 Query FLUSH /*!40101 LOCAL */ TABLES 9 Query FLUSH TABLES WITH READ LOCK # 数据库只读锁定命令 9 Query SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ 9 Query START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */ 9 Query SHOW VARIABLES LIKE 'gtid\\_mode' 9 Query SHOW MASTER STATUS 9 Query UNLOCK TABLES 9 Query SELECT LOGFILE_GROUP_NAME, FILE_NAME, TOTAL_EXTENTS, INITIAL_SIZE, ENGINE, EXTRA FROM INFORMATION_SCHEMA.FILES WHERE FILE_TYPE = 'UNDO LOG' AND FILE_NAME IS NOT NULL AND LOGFILE_GROUP_NAME IN (SELECT DISTINCT LOGFILE_GROUP_NAME FROM INFORMATION_SCHEMA.FILES WHERE FILE_TYPE = 'DATAFILE' AND TABLESPACE_NAME IN (SELECT DISTINCT TABLESPACE_NAME FROM INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_SCHEMA IN ('jfedu'))) GROUP BY LOGFILE_GROUP_NAME, FILE_NAME, ENGINE ORDER BY LOGFILE_GROUP_NAME 9 Query SELECT DISTINCT TABLESPACE_NAME, FILE_NAME, LOGFILE_GROUP_NAME, EXTENT_SIZE, INITIAL_SIZE, ENGINE FROM INFORMATION_SCHEMA.FILES WHERE FILE_TYPE = 'DATAFILE' AND TABLESPACE_NAME IN (SELECT DISTINCT TABLESPACE_NAME FROM INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_SCHEMA IN ('jfedu')) ORDER BY TABLESPACE_NAME, LOGFILE_GROUP_NAME 9 Query SHOW VARIABLES LIKE 'ndbinfo\\_version' 9 Init DB jfedu 9 Query SAVEPOINT sp 9 Query show tables 9 Query show table status like 't1' 9 Query SET SQL_QUOTE_SHOW_CREATE=1 9 Query SET SESSION character_set_results = 'binary' 9 Query show create table `t1` 9 Query SET SESSION character_set_results = 'utf8' 9 Query show fields from `t1` 9 Query SELECT /*!40001 SQL_NO_CACHE */ * FROM `t1` 9 Query SET SESSION character_set_results = 'binary' 9 Query use `jfedu` 9 Query select @@collation_database 9 Query SHOW TRIGGERS LIKE 't1' 9 Query SET SESSION character_set_results = 'utf8' 9 Query ROLLBACK TO SAVEPOINT sp 9 Query RELEASE SAVEPOINT sp 9 Quit # ------------------------------------------------------------------------------------------ # 关闭general.log set global general_log=0; 修改隔离级别show variables like '%iso%'; +---------------+-----------------+ | Variable_name | Value | +---------------+-----------------+ | tx_isolation | REPEATABLE-READ | +---------------+-----------------+ set global tx_isolation='read-committed'; # 重启mysql失效 set session tx_isolation='read-committed'; # 只在当前会话中有效 # 修改my.cnf永久有效 vi /etc/my.cnf #------------------------------------- transaction_isolation=read-committed #------------------------------------- show variables like '%iso%'; +---------------+----------------+ | Variable_name | Value | +---------------+----------------+ | tx_isolation | READ-COMMITTED | +---------------+----------------+ mydumper常用参数及使用示例su - mysql mydumper --help # 常用参数解释 # statement-size ： sql语句最大长度 rows ： 按照执行rows分割table数据。 chunk-filesize ： 按照输出文件的大小分割table数据。 no-locks ： 不锁表 binlogs ： 备份binlog日志 threads ： 并发线程数 mydumper -u [USER] -p [PASSWORD] -h [HOST] -P [PORT] -t [THREADS] -b -c -B [DB] -o /tmp/backup myloader queries-per-transaction：每个事务包含的记录数 overwrite-tables ：drop table if exists enable-binlog：binlog恢复数据 threads ： 并发线程数 myloader -u [USER] -p [PASSWORD] -h [HOST] -P [PORT] -t [THREADS] -o /tmp/backup - -B [DB]","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"MySQL DBA从小白到大神实战-05 MySQL DBA日常操作","date":"2017-02-21T02:07:55.513Z","path":"2017/02/21/mysql/课程学习/05-MySQL-DBA从小白到大神实战/","text":"使用mysqld_mutil start命令启动多实例3306、3307，使用mysqld_multi report命令显示结果。规划多实例目录mkdir -p /u01/mysql # 程序目录 mkdir -p /u01/conf # 配置文件 mkdir -p /u01/data/3306 mkdir -p /u01/data/3307 mkdir -p /u01/log/3306/iblog mkdir -p /u01/log/3307/iblog mkdir -p /u01/log/3306/binlog mkdir -p /u01/log/3307/binlog mkdir -p /u01/run/3306 mkdir -p /u01/run/3307 mkdir -p /u01/tmp/3306 mkdir -p /u01/tmp/3307 chown -R mysql:mysql /u01 chmod -R 755 /u01 重新编译安装mysqlcd /u01/mysql-5.6.35 rm -rf CMakeCache.txt cmake \\ -DCMAKE_INSTALL_PREFIX=/u01/mysql \\ -DINSTALL_DATADIR=/u01/data/3306 \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DEXTRA_CHARSETS=all \\ -DWITH_SSL=yes \\ -DWITH_EMBEDDED_SERVER=1 \\ -DENABLED_LOCAL_INFILE=1 \\ -DWITH_MYISAM_STORAGE_ENGINE=1 \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_ARCHIVE_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_PARTITION_STORAGE_ENGINE=1 \\ -DMYSQL_UNIX_ADDR=/u01/run/3306/mysql.sock \\ -DMYSQL_TCP_PORT=3306 \\ -DENABLED_LOCAL_INFILE=1 \\ -DSYSCONFDIR=/etc \\ -DWITH_READLINE=on make &amp;&amp; make install 配置多实例独自参数文件cd /u01/conf vi my3306.cnf ---------------------------------------------------------- [client] port=3306 socket=/u01/run/3306/mysql.sock [mysql] pid_file=/u01/run/3306/mysqld.pid [mysqld] autocommit=1 general_log=off explicit_defaults_for_timestamp=true # system basedir=/u01/mysql datadir=/u01/data/3306 max_allowed_packet=1g max_connections=3000 max_user_connections=2800 open_files_limit=65535 pid_file=/u01/run/3306/mysqld.pid port=3306 server_id=3306 skip_name_resolve=ON socket=/u01/run/3306/mysql.sock tmpdir=/u01/tmp/3306 #binlog log_bin=/u01/log/3306/binlog/binlog binlog_cache_size=32768 binlog_format=row expire_logs_days=7 log_slave_updates=ON max_binlog_cache_size=2147483648 max_binlog_size=524288000 sync_binlog=100 #logging log_error=/u01/log/3306/error.log slow_query_log_file=/u01/log/3306/slow.log log_queries_not_using_indexes=0 slow_query_log=1 log_slave_updates=ON log_slow_admin_statements=1 long_query_time=1 #relay relay_log=/u01/log/3306/relaylog relay_log_index=/u01/log/3306/relay.index relay_log_info_file=/u01/log/3306/relay-log.info #slave slave_load_tmpdir=/u01/tmp/3306 slave_skip_errors=OFF #innodb innodb_data_home_dir=/u01/log/3306/iblog innodb_log_group_home_dir=/u01/log/3306/iblog innodb_adaptive_flushing=ON innodb_adaptive_hash_index=ON innodb_autoinc_lock_mode=1 innodb_buffer_pool_instances=8 #default innodb_change_buffering=inserts innodb_checksums=ON innodb_buffer_pool_size= 128M innodb_data_file_path=ibdata1:32M;ibdata2:16M:autoextend innodb_doublewrite=ON innodb_file_format=Barracuda innodb_file_per_table=ON innodb_flush_log_at_trx_commit=1 innodb_flush_method=O_DIRECT innodb_io_capacity=1000 innodb_lock_wait_timeout=10 innodb_log_buffer_size=67108864 innodb_log_file_size=1048576000 innodb_log_files_in_group=4 innodb_max_dirty_pages_pct=60 innodb_open_files=60000 innodb_purge_threads=1 innodb_read_io_threads=4 innodb_stats_on_metadata=OFF innodb_support_xa=ON innodb_use_native_aio=OFF innodb_write_io_threads=10 [mysqld_safe] datadir=/u01/data/3306 ---------------------------------------------------------- # 将上面内容中3306替换成3307，server编辑保存my3307.cnf vi my3307.cnf 初始化多实例数据库su - mysql # 修改环境变量 vi /home/mysql/.bash_profile ---------------------------------------------------------- PATH=$PATH:$HOME/bin:/u01/mysql/bin ---------------------------------------------------------- # 初始化数据库实例 cd /u01/mysql/scripts ./mysql_install_db --defaults-file=/u01/conf/my3306.cnf \\ --datadir=/u01/data/3306 --basedir=/u01/mysql --user=mysql ./mysql_install_db --defaults-file=/u01/conf/my3307.cnf \\ --datadir=/u01/data/3307 --basedir=/u01/mysql --user=mysql # 使用独立参数启动实例 mysqld_safe --defaults-file=/u01/conf/my3306.cnf &amp; mysqld_safe --defaults-file=/u01/conf/my3307.cnf &amp; # 登陆3306实例 mysql --socket=/u01/run/3306/mysql.sock show variables like 'port'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | port | 3306 | +---------------+-------+ # 登陆3307实例 mysql --socket=/u01/run/3307/mysql.sock show variables like 'port'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | port | 3307 | +---------------+-------+ # 关闭实例 mysqladmin --socket=/u01/run/3306/mysql.sock shutdown &amp; mysqladmin --socket=/u01/run/3307/mysql.sock shutdown &amp; 修改/etc/my.cnf参数# root用户下操作 vi /etc/my.cnf ---------------------------------------------------------- [mysqld_multi] mysqld=/u01/mysql/bin/mysqld_safe mysqladmin=/u01/mysql/bin/mysqladmin user=root log=/u01/log/multi.log [mysqld3306] port=3306 basedir=/u01/mysql datadir=/u01/data/3306 socket=/u01/run/3306/mysql.sock server-id=3306 log_bin=/u01/log/3306/binlog/binlog slow_query_log_file=/u01/log/3306/slow.log innodb_data_home_dir=/u01/log/3306/iblog innodb_log_group_home_dir=/u01/log/3306/iblog log_error=/u01/log/3306/error.log pid_file=/u01/run/3306/mysqld.pid tmpdir=/u01/tmp/3306 relay_log=/u01/log/3306/relaylog relay_log_index=/u01/log/3306/relay.index relay_log_info_file=/u01/log/3306/relay-log.info slave_load_tmpdir=/u01/tmp/3306 [mysqld3307] port=3307 basedir=/u01/mysql datadir=/u01/data/3307 socket=/u01/run/3307/mysql.sock server-id=3307 log_bin=/u01/log/3307/binlog/binlog slow_query_log_file=/u01/log/3307/slow.log innodb_data_home_dir=/u01/log/3307/iblog innodb_log_group_home_dir=/u01/log/3307/iblog log_error=/u01/log/3307/error.log pid_file=/u01/run/3307/mysqld.pid tmpdir=/u01/tmp/3307 relay_log=/u01/log/3307/relaylog relay_log_index=/u01/log/3307/relay.index relay_log_info_file=/u01/log/3307/relay-log.info slave_load_tmpdir=/u01/tmp/3307 [client] port=3306 socket =/u01/run/3306/mysql.sock [mysqld] autocommit=1 general_log=off explicit_defaults_for_timestamp=true max_allowed_packet=1g max_connections=3000 max_user_connections=2800 open_files_limit=65535 skip_name_resolve=ON #binlog binlog_cache_size=32768 binlog_format=row expire_logs_days=7 log_slave_updates=ON max_binlog_cache_size=2147483648 max_binlog_size=524288000 sync_binlog=100 log_queries_not_using_indexes=0 slow_query_log=1 log_slave_updates=ON log_slow_admin_statements=1 long_query_time=1 slave_skip_errors=OFF innodb_adaptive_flushing=ON innodb_adaptive_hash_index=ON innodb_autoinc_lock_mode=1 innodb_buffer_pool_instances=8 #default innodb_change_buffering=inserts innodb_checksums=ON innodb_buffer_pool_size= 128M innodb_data_file_path=ibdata1:32M;ibdata2:16M:autoextend innodb_doublewrite=ON innodb_file_format=Barracuda innodb_file_per_table=ON innodb_flush_log_at_trx_commit=1 innodb_flush_method=O_DIRECT innodb_io_capacity=1000 innodb_lock_wait_timeout=10 innodb_log_buffer_size=67108864 innodb_log_file_size=1048576000 innodb_log_files_in_group=4 innodb_max_dirty_pages_pct=60 innodb_open_files=60000 innodb_purge_threads=1 innodb_read_io_threads=4 innodb_stats_on_metadata=OFF innodb_support_xa=ON innodb_use_native_aio=OFF innodb_write_io_threads=10 ---------------------------------------------------------- mysqld_multi启动/关闭多实例，查看多实例运行状态# 启动多实例数据库 mysqld_multi start # 启动全部配置的多实例 mysqld_multi start 3306 # 启动指定server-id的实例 mysqld_multi start 3306-3307 # 启动指定server-id连续的实例 # 查看多实例运行状态 mysqld_multi report Reporting MySQL servers MySQL server from group: mysqld3306 is running MySQL server from group: mysqld3307 is running # 关闭多实例数据库 mysqld_multi stop mysqld_multi stop 3306 mysqld_multi stop 3306-3307 在线迁移MySQL 3306实例上的数据库jfedu到MySQL 3307上。登陆3306实例，创建jfedu数据库# 登陆3306实例 mysql -S /u01/run/3306/mysql.sock # 查看port和server_id show variables like 'port'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | port | 3306 | +---------------+-------+ show variables like 'server_id'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | server_id | 3306 | +---------------+-------+ # 创建jfedu数据库，创建表t1并插入数据 create database jfedu; use jfedu; create table t1(id int,name varchar(10)); insert into t1 values(1,'AAAAA'); commit; 在3306实例上创建一个复制帐号grant replication slave,replication client on *.* to 'repl'@'%' identified by 'repl4Slave'; 备份jfedu数据库mysqldump --single-transaction --master-data=2 -uroot jfedu &gt; /tmp/jfedu.sql # --single-transaction 不锁表 # --master-data=2 在备份文件中记录master_log_file和master_log_pos的值 # 设置主从复制时会用到master_log_file和master_log_pos的值 cat /tmp/jfedu.sql | grep MASTER_LOG_FILE -- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000022', MASTER_LOG_POS=750; 在3307实例上恢复jfedu数据库# 登陆3306实例 mysql -S /u01/run/3307/mysql.sock # 查看port和server_id show variables like 'port'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | port | 3307 | +---------------+-------+ show variables like 'server_id'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | server_id | 3307 | +---------------+-------+ # 在3307上创建jfedu数据库 create database jfedu; # 恢复数据库 use jfedu; source /tmp/jfedu.sql; 3306实例在恢复时有数据插入use jfedu insert into t1 values(2,'BBBBB'); commit; 在3307实例上执行change master设置主从复制，并启动复制# 设置主从复制 change master to master_host='127.0.0.1', master_port=3306, master_user='repl', master_password='repl4Slave', master_log_file='binlog.000022', master_log_pos=750; # 启动复制 start slave; # 查看复制状态 show slave status\\G; *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 127.0.0.1 Master_User: repl Master_Port: 3306 Connect_Retry: 60 Master_Log_File: binlog.000022 Read_Master_Log_Pos: 949 Relay_Log_File: relaylog.000002 Relay_Log_Pos: 479 Relay_Master_Log_File: binlog.000022 Slave_IO_Running: Yes # Yes表示复制正常 Slave_SQL_Running: Yes # Yes表示复制正常 ...... # 观察3307上数据是否复制过来 select * from jfedu.t1; +------+-------+ | id | name | +------+-------+ | 1 | AAAAA | | 2 | BBBBB | +------+-------+ 3306实例设置成read onlyshow variables like 'read_only'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | read_only | OFF | +---------------+-------+ set global read_only=1; 数据全部一致后，停止复制stop slave; MySQL5.6升级到MySQL5.7，正常登录到MySQL5.7，详细步骤。下载MySQL5.7下载地址：https://dev.mysql.com/downloads/mysql 上传并解压软件包[mysql@mysql ~]$ cd /u01 #选择下载的软件包上传 [mysql@mysql u01]$ rz [mysql@mysql u01]$ ll total 698668 drwxr-xr-x 2 mysql mysql 4096 Feb 24 11:16 conf drwxr-xr-x 4 mysql mysql 4096 Feb 24 09:45 data drwxr-xr-x 4 mysql mysql 4096 Feb 24 11:00 log drwxr-xr-x 13 mysql mysql 4096 Feb 24 10:16 mysql drwxr-xr-x 35 mysql mysql 4096 Feb 24 10:05 mysql-5.6.35 -rwxr-xr-x. 1 mysql mysql 32167628 Jan 17 11:16 mysql-5.6.35.tar.gz -rw-r--r-- 1 mysql mysql 683233280 Feb 24 16:36 mysql-5.7.17-linux-glibc2.5-x86_64.tar # 这个就是二进制mysql5.7软件 drwxr-xr-x 4 mysql mysql 4096 Feb 24 09:50 run drwxr-xr-x 4 mysql mysql 4096 Feb 24 09:45 tmp tar -xpvf mysql-5.7.17-linux-glibc2.5-x86_64.tar tar -xpvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz # 因为是二进制包，解压后就可以用了，文件夹名改短些 mv mysql-5.7.17-linux-glibc2.5-x86_64 mysql5.7 # 修改环境变量 vi /home/mysql/.bash_profile PATH=$PATH:$HOME/bin:/u01/mysql5.7/bin 查看mysql版本信息mysql -V -------------- mysql Ver 14.14 Distrib 5.7.17, for linux-glibc2.5 (x86_64) using EditLine wrapper -------------- mysqld_multi start 3306 mysql -S /u01/run/3306/mysql.sock status; -------------- mysql Ver 14.14 Distrib 5.7.17, for linux-glibc2.5 (x86_64) using EditLine wrapper Connection id: 7 Current database: Current user: root@localhost SSL: Not in use Current pager: stdout Using outfile: '' Using delimiter: ; Server version: 5.6.35-log Source distribution Protocol version: 10 Connection: Localhost via UNIX socket Server characterset: utf8 Db characterset: utf8 Client characterset: utf8 Conn. characterset: utf8 UNIX socket: /u01/run/3306/mysql.sock Uptime: 3 min 57 sec Threads: 2 Questions: 16 Slow queries: 0 Opens: 70 Flush tables: 1 Open tables: 63 Queries per second avg: 0.067 -------------- 升级数据库字典mysql_upgrade -S /u01/run/3306/mysql.sock -------------- Checking if update is needed. Checking server version. Error: Server version (5.6.35-log) does not match with the version of the server (5.7.17) with which this program was built/distributed. You can use --skip-version-check to skip this check. -------------- mysql_upgrade -S /u01/run/3306/mysql.sock --skip-version-check -------------- Checking if update is needed. Running queries to upgrade MySQL server. mysql_upgrade: [ERROR] 1726: Storage engine 'InnoDB' does not support system tables. [mysql.plugin] -------------- # 重启下数据库 mysqld_multi stop mysqld --defaults-file=/u01/conf/my3306.cnf &amp; mysql_upgrade -S /u01/run/3306/mysql.sock --skip-version-check -------------- Checking if update is needed. Running queries to upgrade MySQL server. Checking system database. mysql.columns_priv OK mysql.db OK mysql.engine_cost OK mysql.event OK mysql.func OK mysql.general_log OK mysql.gtid_executed OK mysql.help_category OK mysql.help_keyword OK mysql.help_relation OK mysql.help_topic OK mysql.innodb_index_stats OK mysql.innodb_table_stats OK mysql.ndb_binlog_index OK mysql.plugin OK ...... Repairing tables mysql_old.innodb_index_stats Error : Unknown error 1146 status : Operation failed mysql_old.innodb_table_stats Error : Unknown error 1146 status : Operation failed mysql_old.slave_master_info Error : Unknown error 1146 status : Operation failed mysql_old.slave_relay_log_info Error : Unknown error 1146 status : Operation failed mysql_old.slave_worker_info Error : Unknown error 1146 status : Operation failed Upgrade process completed successfully. Checking if update is needed. -------------- 再查看mysql版本信息，升级完成mysql -S /u01/run/3306/mysql.sock mysql&gt; status; -------------- mysql Ver 14.14 Distrib 5.7.17, for linux-glibc2.5 (x86_64) using EditLine wrapper Connection id: 4 Current database: Current user: root@localhost SSL: Not in use Current pager: stdout Using outfile: '' Using delimiter: ; Server version: 5.7.17-log MySQL Community Server (GPL) Protocol version: 10 Connection: Localhost via UNIX socket Server characterset: latin1 Db characterset: latin1 Client characterset: utf8 Conn. characterset: utf8 UNIX socket: /u01/run/3306/mysql.sock Uptime: 6 min 3 sec Threads: 1 Questions: 3174 Slow queries: 0 Opens: 368 Flush tables: 1 Open tables: 25 Queries per second avg: 8.743 -------------- mysql&gt; select version(); +------------+ | version() | +------------+ | 5.7.17-log | +------------+ 课堂笔记整理MySQL启动# 推荐启动方式 mysqld_safe --defaults-file=/u01/conf/my3306.cnf &amp; # 编译安装可以使用的启动方式（很少用） cd /u01/mysql/support-files/ ./mysql.server start # rpm包安装可以使用的启动方式 /etc/init.d/mysqld start service mysqld start # mysqld的启动方式 mysqld --defaults-file=/u01/conf/my3306.cnf &amp; # 多实例启动方式，需要先修改my.cnf参数，并放到/etc目录下（建议单个实例维护） mysqld_mutil start # 查看mysql启动时参数my.cnf查找顺序 mysqld --verbose --help | grep my.cnf # mysqld_safe方式启动mysql后相关进程，mysqld_safe进程有监控mysqld进程的作用，mysqld异常终止时，mysqld_safe会重启mysqld ps -ef | grep mysql | grep -v bash | grep -v grep | grep -v su | grep -v ps mysql 5503 18586 0 16:33 pts/1 00:00:00 /bin/sh /u01/mysql/bin/mysqld_safe --defaults-file=/u01/conf/my3306.cnf mysql 6342 5503 0 16:33 pts/1 00:00:00 /u01/mysql/bin/mysqld --defaults-file=/u01/conf/my3306.cnf --basedir=/u01/mysql --datadir=/u01/data/3306 --plugin-dir=/u01/mysql/lib/plugin --log-error=/u01/log/3306/error.log --open-files-limit=65535 --pid-file=/u01/run/3306/mysqld.pid --socket=/u01/run/3306/mysql.sock --port=3306 # mysqld方式启动mysql后相关进程 ps -ef | grep mysql | grep -v bash | grep -v grep | grep -v su | grep -v ps mysql 6401 18586 2 16:36 pts/1 00:00:00 mysqld --defaults-file=/u01/conf/my3306.cnf MySQL关闭# 使用mysqld_safe和mysqld启动的关闭方式（推荐的方式） mysqladmin shutdown mysqladmin --socket=/u01/run/3306/mysql.sock shutdown &amp; # 编译安装可以使用的关闭方式 cd /u01/mysql/support-files/ ./mysql.server stop # rpm安装可以使用的关闭方式 /etc/init.d/mysqld stop service mysqld stop # 多实例关闭方式 mysqld_mutil stop # kill进程 kill -9 pid MySQL登陆# 本地登陆 mysql mysql -u$username -p$password # 远程登陆 mysql -u$username -p$password -h$ip # 多实例 mysql -u$username -p$password -P$port mysql --socket=/u01/run/3306/mysql.sock --port=3306 帐户权限设置-创建/删除用户select user,host,password from mysql.user; +------+-----------+----------+ | user | host | password | +------+-----------+----------+ | root | localhost | | # 密码都为空，不安全 | root | mysql | | | root | 127.0.0.1 | | | root | ::1 | | | | localhost | | | | mysql | | +------+-----------+----------+ # insert方式创建用户(用insert方式创建的用户，需要刷新缓存) insert into mysql.user(user,host,password) values('mytt','127.0.0.1',password(123456)); flush privileges; select user,host,password from mysql.user; +------+-----------+-------------------------------------------+ | user | host | password | +------+-----------+-------------------------------------------+ | root | localhost | | | root | mysql | | | root | 127.0.0.1 | | | root | ::1 | | | | localhost | | | | mysql | | | mytt | 127.0.0.1 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | +------+-----------+-------------------------------------------+ # mytt登陆mysql命令如下 mysql -umytt -p123456 -h127.0.0.1 select user(); +----------------+ | user() | +----------------+ | mytt@127.0.0.1 | +----------------+ # create方式创建用户 create user lyj@'%' identified by '123456'; # %代表可以从任意位置登陆 mysql -ulyj -p123456 -h127.0.0.1 # 删除用户 drop user lyj; 帐户权限设置-用户授权# 创建新用户并授权 grant all privileges on *.* to lyj@'%' identified by '123456'; # 查看用户权限 show grants for lyj@'%'; +-------------------------------------------------------------------------------------------------------------+ | Grants for lyj@% | +-------------------------------------------------------------------------------------------------------------+ | GRANT ALL PRIVILEGES ON *.* TO 'lyj'@'%' IDENTIFIED BY PASSWORD '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9' | +-------------------------------------------------------------------------------------------------------------+ # 给已有用户授权 grant select on *.* to mytt@127.0.0.1; show grants for mytt@127.0.0.1; +--------------------------------------------------------------------------------------------------------------+ | Grants for mytt@127.0.0.1 | +--------------------------------------------------------------------------------------------------------------+ | GRANT SELECT ON *.* TO 'mytt'@'127.0.0.1' IDENTIFIED BY PASSWORD '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9' | +--------------------------------------------------------------------------------------------------------------+ 帐户权限设置-权限等级 核心开发权限 select/insert/delete/update 管理权限–表级 create table/drop table/lock table 管理权限–server级别 create database/create user等 MySQL数据库安全配置1.禁用/删除多余的管理员帐号，设置用户密码# 删除多余的帐号 delete from mysql.user where user !='root' and password=''; flush privileges; # 使用set方式设置root用户密码 set password for root@localhost = password('123456'); set password for root@127.0.0.1 = password('123456'); # 使用mysqladmin工具设置密码 ## 格式: mysqladmin -u用户名 -p旧密码 password 新密码 ## 密码为空时，直接输入回车确认 mysqladmin -uroot -p password 654321 Enter password: Warning: Using a password on the command line interface can be insecure. ## 修改已有密码 mysqladmin -uroot -p654321 password 123456 ## 执行后会出现如下警告提示，可以忽略： ## Warning: Using a password on the command line interface can be insecure. ## 翻译过来的意思：在命令行界面上使用密码是不安全的。 # 登陆mysql mysql -uroot -p123456 # 删除所有密码为空的帐号 delete from mysql.user where password=''; flush privileges; # 确保所有用户都有密码 select user,host,password from mysql.user; +------+-----------+-------------------------------------------+ | user | host | password | +------+-----------+-------------------------------------------+ | root | localhost | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | | root | 127.0.0.1 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | | mytt | 127.0.0.1 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | +------+-----------+-------------------------------------------+ 2.删除掉db表数据(test权限)use mysql; truncate table mysql.db; 3.删除test库drop database test; 4.修改管理员帐户名5.密码复杂度要求6.权限最小化 表操作–线上可以直接删除表吗?生产环境上，不可以直接删除表，要删除表步骤如下：# 构建环境 drop database lyj; create database lyj; use lyj; create table t1 (id int, name varchar(10)); insert into t1 values (1,'lyj'); # 1.查看表 show tables; # 2.检查表是否被访问 show processlist; # 3.重命名临时表 rename table t1 to t1_bak; # 4.备份临时表 mysqldump -uroot -p123456 lyj t1_bak &gt; /tmp/lyj_t1_bak_20170223.sql # 5.一段时间后删除临时表 drop table t1_bak; show tables from lyj like '%t1%'; 常用命令show databases; use mysql; show tables; select user,host,password from mysql.user; grant all privilege on *.* to test_1@'%'; mysql -h127.0.0.1 -utest_1 select user(); create database jianfeng; create table user(id int,name varchar(10)); grant select on jianfeng.user to test_1@'%'; flush privileges; show master status\\G; change master to xxx; show engine innodb status\\G show tables from information_schema like 'INNODB%'; mysqld_safe --defaults-file=/u01/my3306/my.cnf &amp; mysqladmin -S /u01/my3306/run/mysql.sock shutdown &amp; /u01/mysql/bin/mysql_secure_installation","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"那些在11gR2中可能惹祸的新特性","date":"2017-02-15T16:00:00.000Z","path":"2017/02/16/oracle/那些在11gR2中可能惹祸的新特性/","text":"有很多朋友因为11gR2那些潜在的特性可能给升级后系统稳定运行带来麻烦而无法鼓足升级到11gR2的勇气，实际Oracle在开发新版本RDBMS软件时引入的一些特性有很好的理念的，但是往往这些理念会给已稳定的应用环境带来变数，最显著的就是10g/9i升级到11gR2时的执行计划稳定性，此外adaptive cursor sharing 自适应游标、automatic serial direct path自动判断串行直接路径读、deferred segment creation、GC read mostly DRM…….等等的一系列特性已经在大量的案例中被证明是不适合于大量国产Application的。 这篇文章里想做的是给出一张列表，能够将11gR2的优化器optimizer特性、和其他的如上列的这些可能引起问题的特性通过参数的方式给出一张列表，你可以选择性的禁用这些特性，前提是你的Applicaiton就该特性经过充分的测试，如果没有时间或者环境来测试这些新特性，那么还不如禁用这些特性，禁用新特性的结果也仅仅是回到老版本(一般是10gR2 10.2.0.4)的默认表现上来。你肯定要问：“如果都禁用了11gR2的特性，那么我还升级做什么？” 回答是：首先这里给出的是一张禁用11gR2特性列表，如果你对部分特性已经很熟悉，那么你可以选择性而非全部地禁用这些特性，如果不熟悉也测试不了，那么无畏给稳定的系统引入不确定因素。其次这里列出的仅仅是11gR2部分默认已启用的可能”惹祸”的特性， 其他的一些特性例如flashback archive、securefile，它们默认不开启，本身需要你去手动打开才会生效，并不会受到这张列表的影响。 转载自：AskMaclean","tags":[{"name":"oracle","slug":"oracle","permalink":"/tags/oracle/"},{"name":"11g","slug":"11g","permalink":"/tags/11g/"}]},{"title":"hexo解决代码块空行自动删除问题","date":"2017-02-14T09:02:02.540Z","path":"2017/02/14/tools/hexo解决代码块空行自动删除问题/","text":"修改hexo源码将node_modules\\hexo-util\\lib\\highlight.js文件中第35行# 原 numbers += '&lt;div class=\"line\"&gt;' + (firstLine + i) + '&lt;/div&gt;\\n'; content += '&lt;div class=\"line'; content += (mark.indexOf(firstLine + i) !== -1) ? ' marked' : ''; content += '\"&gt;' + line + '&lt;/div&gt;\\n'; # 改后 numbers += '&lt;span class=\"line\"&gt;' + (firstLine + i) + '&lt;/span&gt;\\n'; content += '&lt;span class=\"line'; content += (mark.indexOf(firstLine + i) !== -1) ? ' marked' : ''; content += '\"&gt;' + line + '&lt;/span&gt;\\n'; 清理临时数据库并重启本地服务hexo clean hexo s -g 查看hexo版本信息$ hexo version hexo: 3.2.2 hexo-cli: 1.0.2 os: Windows_NT 6.1.7601 win32 x64 http_parser: 2.7.0 node: 6.9.4 v8: 5.1.281.89 uv: 1.9.1 zlib: 1.2.8 ares: 1.10.1-DEV icu: 57.1 modules: 48 openssl: 1.0.2j","tags":[{"name":"tools","slug":"tools","permalink":"/tags/tools/"},{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}]},{"title":"MySQL DBA从小白到大神实战-04 揭密MySQL databock and binlog的格式","date":"2017-02-14T08:08:16.795Z","path":"2017/02/14/mysql/课程学习/04-MySQL-DBA从小白到大神实战/","text":"1. 为什么创建一个InnoDB表只分配了96K而不是1M？Mysql中extent(区)中是64个连续的page(页)，是分配空间的最小单位，标准大小是1M。 但在用户启用了参数innodb_file_per_table=on后，创建一个Innodb表时，初始分配的大小却是为96K。这是因为在每个段开始时，先用32个页大小的碎片页(fragment page)来存放数据，在使用完这些页之后才是64个连续页的申请。这样做的目的是，对于一些小表，或者是undo这类的段，可以在开始时申请较少的空间，节省磁盘容量的开销。 下面通过示例来显示InnoDB存储引擎对于区的申请方式。 创建一个测试用的InnoDB表创建数据库mysql&gt; create database lyj; 查看数据库创建信息，并切换到lyj数据库mysql&gt; show create database lyj; +----------+--------------------------------------------------------------+ | Database | Create Database | +----------+--------------------------------------------------------------+ | lyj | CREATE DATABASE `lyj` /*!40100 DEFAULT CHARACTER SET utf8 */ | +----------+--------------------------------------------------------------+ mysql&gt; use lyj; mysql&gt; select database(); +------------+ | database() | +------------+ | lyj | +------------+ 查看是否启用独享表空间存储方式（innodb_file_per_table=ON），启用后每一个表会单独的生成一个table_name.ibd的文件mysql&gt; show variables like '%per_table%'; +-----------------------+-------+ | Variable_name | Value | +-----------------------+-------+ | innodb_file_per_table | ON | +-----------------------+-------+ 在lyj数据库中创建一张表create table lyj_t1 (col1 int not null auto_increment, col2 varchar(7000), primary key (col1) ) engine=innodb; # 将col2字段设置为varchar(7000)，这样能保证一个页最多可以存放2条记录 可通过以下命令查看表的创建信息mysql&gt; show create table lyj_t1\\G; *************************** 1. row *************************** Table: lyj_t1 Create Table: CREATE TABLE `lyj_t1` ( `col1` int(11) NOT NULL AUTO_INCREMENT, `col2` varchar(7000) DEFAULT NULL, PRIMARY KEY (`col1`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 查验创建表时分配的初始大小为96K[mysql@mysql lyj]$ pwd /u01/my3306/data/lyj [mysql@mysql lyj]$ ll total 112 -rw-rw----. 1 mysql mysql 61 Feb 15 14:20 db.opt -rw-rw----. 1 mysql mysql 29070 Feb 15 17:07 lyj_t1.frm # frm 表定义 -rw-rw----. 1 mysql mysql 98304 Feb 15 17:07 lyj_t1.ibd # idb 数据和索引 创建初始分配大小是 98304/1024=96K 插入数据观察表空间大小变化插入2条记录insert into lyj_t1 select null, repeat('a',7000); insert into lyj_t1 select null, repeat('a',7000); system ls -lh /u01/my3306/data/lyj/lyj_t1.ibd -rw-rw----. 1 mysql mysql 96K Feb 15 17:16 /u01/my3306/data/lyj/lyj_t1.ibd # 这时可以通过py_innodb_page_info工具来查看表空间 # 根据之前对表的定义，插入的这两条记录应该位于同一个页中 # 所有记录都在一个页中，因此这时还没有非叶节点 $ python py_innodb_page_info.py -v /u01/my3306/data/lyj/lyj_t1.ibd page offset 00000000, page type &lt;File Space Header&gt; page offset 00000001, page type &lt;Insert Buffer Bitmap&gt; page offset 00000002, page type &lt;File Segment inode&gt; page offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0000&gt; # 这个就是数据页，page level表示所在层，0表示页子节点 page offset 00000000, page type &lt;Freshly Allocated Page&gt; page offset 00000000, page type &lt;Freshly Allocated Page&gt; Total number of page: 6: Freshly Allocated Page: 2 Insert Buffer Bitmap: 1 File Space Header: 1 B-tree Node: 1 File Segment inode: 1 py_innodb_page_info工具下载地址：py_innodb_page_type.zip 再插入1条记录insert into lyj_t1 select null, repeat('a',7000); $ python py_innodb_page_info.py -v /u01/my3306/data/lyj/lyj_t1.ibd page offset 00000000, page type &lt;File Space Header&gt; page offset 00000001, page type &lt;Insert Buffer Bitmap&gt; page offset 00000002, page type &lt;File Segment inode&gt; page offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt; page offset 00000004, page type &lt;B-tree Node&gt;, page level &lt;0000&gt; page offset 00000005, page type &lt;B-tree Node&gt;, page level &lt;0000&gt; Total number of page: 6: Insert Buffer Bitmap: 1 File Space Header: 1 B-tree Node: 3 File Segment inode: 1 创建批量插入数据的存储过程drop procedure if exists load_t1; delimiter // create procedure load_t1(count int unsigned) begin declare s int unsigned default 1; declare c varchar(7000) default repeat('a', 7000); while s&lt;= count do insert into lyj_t1 select null,c; set s=s+1; end while; end; // delimiter; 调用存储过程，插入60条记录后观察表空间大小mysql&gt; call load_t1(60); mysql&gt; select count(*) from lyj_t1; +----------+ | count(*) | +----------+ | 63 | +----------+ mysql&gt; system ls -lh /u01/my3306/data/lyj/lyj_t1.ibd -rw-rw----. 1 mysql mysql 576K Feb 15 18:10 /u01/my3306/data/lyj/lyj_t1.ibd 再插入1条记录后观察表空间大小mysql&gt; call load_t1(1); mysql&gt; select count(*) from lyj_t1; +----------+ | count(*) | +----------+ | 64 | +----------+ mysql&gt; system ls -lh /u01/my3306/data/lyj/lyj_t1.ibd -rw-rw----. 1 mysql mysql 2.0M Feb 15 18:15 /u01/my3306/data/lyj/lyj_t1.ibd # 因为已经用完了32个碎片页，新的页就会采用区的方式进行空间的申请 2. Innodb数据块解析，解析第2行记录格式创建测试表并插入数据创建测试用数据库drop database lyj; create database lyj DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci; # 查看当前数据库中存在那些数据库，以及数据库创建信息 show databases; +--------------------+ | Database | +--------------------+ | information_schema | | lyj | | mysql | | performance_schema | | test | +--------------------+ # 显示数据库创建信息，若加\\G参数是格式化输出信息 show create database lyj; +----------+-------------------------------------------------------------+ | Database | Create Database | +----------+-------------------------------------------------------------+ | lyj | CREATE DATABASE `lyj` /*!40100 DEFAULT CHARACTER SET gbk */ | +----------+-------------------------------------------------------------+ show create database lyj\\G *************************** 1. row *************************** Database: lyj Create Database: CREATE DATABASE `lyj` /*!40100 DEFAULT CHARACTER SET gbk */ 使用lyj数据库use lyj # 查看当前选择的数据库 select database(); +------------+ | database() | +------------+ | lyj | +------------+ # 若要删除数据库可使用以下命令 drop database lyj; 关闭自动提交show variables like '%autocommit%'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | autocommit | ON | +---------------+-------+ set autocommit = 0; show variables like '%autocommit%'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | autocommit | OFF | +---------------+-------+ 在lyj数据库中创建表并插入测试数据create table lyj_t1 (id int,name1 varchar(10),name2 varchar(10),name3 varchar(10),name4 varchar(10),name5 varchar(10)); show tables; +---------------+ | Tables_in_lyj | +---------------+ | lyj_t1 | +---------------+ insert into lyj_t1 values(1,'A','BB','CCC','DDDD',null); insert into lyj_t1 values(2,'aaaaaaaaaa','bbbbbbbbbb','ccccc','',null); insert into lyj_t1 values(3,'aaaaaaaaaa','bbbbbbbbbb','ccccc','dddddd','e'); commit; insert into lyj_t1 values(4,'aaaaaaaaaa','bbbbbbbbbb',null,'dddddd','e'); commit; select * from lyj_t1; +------+------------+------------+-------+--------+-------+ | id | name1 | name2 | name3 | name4 | name5 | +------+------------+------------+-------+--------+-------+ | 1 | A | BB | CCC | DDDD | NULL | | 2 | aaaaaaaaaa | bbbbbbbbbb | ccccc | | NULL | | 3 | aaaaaaaaaa | bbbbbbbbbb | ccccc | dddddd | e | | 4 | aaaaaaaaaa | bbbbbbbbbb | NULL | dddddd | e | +------+------------+------------+-------+--------+-------+ 解析数据块使用hexdump工具导出表空间文件前4个块# 一个page 16k, 导出的16进制文件一行是16byte ==&gt; 1个page在16制文件中有1024 row，即一个块是1024行 # 导出第1个块 File Space Header hexdump -C -v /u01/my3306/data/lyj/lyj_t1.ibd | head -n 1024 &gt; /tmp/1.txt # 导出第2个块 Insert Buffer Bitmap hexdump -C -v /u01/my3306/data/lyj/lyj_t1.ibd | head -n 2048 | tail -n 1024 &gt; /tmp/2.txt # 导出第3个块 File Segment inode hexdump -C -v /u01/my3306/data/lyj/lyj_t1.ibd | head -n 3072 | tail -n 1024 &gt; /tmp/3.txt # 导出第4个块 Used Page，也就是行记录开始处 hexdump -C -v /u01/my3306/data/lyj/lyj_t1.ibd | head -n 4096 | tail -n 1024 &gt; /tmp/4.txt 使用sz工具下载到windows本地查看，需要先secureCRT会话设置里先设置本地下载路径 下载命令sz /tmp/1.txt sz /tmp/2.txt sz /tmp/3.txt sz /tmp/4.txt 查看导出块类型标识 第1个块类型标识：0x0008 第2个块类型标识：0x0005 第3个块类型标识：0x0003 第4个块类型标识：0x45BF 查看行记录格式mysql&gt; show table status like '%lyj_t1%'\\G; *************************** 1. row *************************** Name: lyj_t1 Engine: InnoDB Version: 10 Row_format: Compact # 行的格式是Compact（简洁的） Rows: 4 Avg_row_length: 4096 Data_length: 16384 Max_data_length: 0 Index_length: 0 Data_free: 0 Auto_increment: NULL Create_time: 2017-02-16 10:20:15 Update_time: NULL Check_time: NULL Collation: gbk_chinese_ci Checksum: NULL Create_options: Comment: Compact行记录结构 解析块头记录是放在第4个块中，下面详细解析/tmp/4.txt文件1 0000c000 51 07 91 31 00 00 00 03 ff ff ff ff ff ff ff ff |Q..1............| 2 0000c010 00 00 00 00 00 2b d4 0d 45 bf 00 00 00 00 00 00 |.....+..E.......| 3 0000c020 00 00 00 00 00 13 00 02 01 5b 80 06 00 00 00 00 |.........[......| 4 0000c030 01 29 00 02 00 03 00 04 00 00 00 00 00 00 00 00 |.)..............| 5 0000c040 00 00 00 00 00 00 00 00 00 24 00 00 00 13 00 00 |.........$......| 6 0000c050 00 02 00 f2 00 00 00 13 00 00 00 02 00 32 01 00 |.............2..| 7 0000c060 02 00 1f 69 6e 66 69 6d 75 6d 00 05 00 0b 00 00 |...infimum......| 8 0000c070 73 75 70 72 65 6d 75 6d 04 03 02 01 20 00 00 10 |supremum.... ...| 9 0000c080 00 2b 00 00 00 00 02 0a 00 00 00 00 0e 56 95 00 |.+...........V..| 10 0000c090 00 01 42 01 10 80 00 00 01 41 42 42 43 43 43 44 |..B......ABBCCCD| 11 0000c0a0 44 44 44 00 05 0a 0a 20 00 00 18 00 3b 00 00 00 |DDD.... ....;...| 12 0000c0b0 00 02 0b 00 00 00 00 0e 56 95 00 00 01 42 01 1e |........V....B..| 13 0000c0c0 80 00 00 02 61 61 61 61 61 61 61 61 61 61 62 62 |....aaaaaaaaaabb| 14 0000c0d0 62 62 62 62 62 62 62 62 63 63 63 63 63 01 06 05 |bbbbbbbbccccc...| 15 0000c0e0 0a 0a 00 00 00 20 00 41 00 00 00 00 02 0c 00 00 |..... .A........| 16 0000c0f0 00 00 0e 56 95 00 00 01 42 01 2c 80 00 00 03 61 |...V....B.,....a| 17 0000c100 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 |aaaaaaaaabbbbbbb| 18 0000c110 62 62 62 63 63 63 63 63 64 64 64 64 64 64 65 01 |bbbcccccdddddde.| 19 0000c120 06 0a 0a 08 00 00 28 ff 47 00 00 00 00 02 0d 00 |......(.G.......| 20 0000c130 00 00 00 0e 5e 98 00 00 01 45 01 10 80 00 00 04 |....^....E......| 21 0000c140 61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 |aaaaaaaaaabbbbbb| 22 0000c150 62 62 62 62 64 64 64 64 64 64 65 00 00 00 00 00 |bbbbdddddde.....| ...... 1024 0000fff0 00 00 00 00 00 70 00 63 f2 c3 5d 27 00 2b d4 0d |.....p.c..]&apos;.+..| 第1行中的51 07 91 31和最后一行的f2 c3 5d 27是checksum，调用mysql中的一个校验函数，若检验不一致判断该块有问题 第1行中的00 00 00 03，代表这是第几个page(0开始)，这里代表是第4个page 第1行中的ff ff ff ff ff ff ff ff中前4个字节代表记录上一页指针地址，后4个字节代表记录下一页指针地址，全是f代表上一页和下一页无记录 第2行中的00 00 00 00 00 2b d4 0d是日志地址，LSN(Log Segment Number)，其中后4个字节和块最后一行后4个字节00 2b d4 0d是一致的 第2行中的45 bf代表页（块）的类型 第3行中的00 00 00 13代表tablespace的编号 第3行中的00 02代表有两个slot，对应块最后一行尾部的00 70 00 63，每2个字节代表一个slot 第3行中的01 5b代表该页下一行的空闲开始位置，也就是0000c15b 第3行中的80 06能算出块中有几行记录，compact中该值初始是8002，8006-8002=4，代表该页有4行记录 第3行中的00 00 00 00代表可重用字节，这里没有删除过记录，值都是0 第4行中的01 29代表最后一行记录的开始位置，也就是该块中第4行记录的开始位置 第4行中的00 02 00 03其中00 02为往右插，00 03为连续插入3次 第4行中的00 04代表有4行记录 第4行中的00 00 00 00 00 00 00 00代表页上最大事务数 第5行中的00 00代表page level ，也就是叶子节点 第5行中的00 00 00 00 00 00 00 24代表索引的ID 第5-6行中的00 00 00 13 00 00 00 02 00 f2 代表段头管理非叶节点的 第6行中的00 00 00 13 00 00 00 02 00 32 代表段头管理叶节点的 第6-7行中的01 00 02 00 1f代表最小虚拟值的行头，固定的5个节点 第7行中的69 6e 66 69 6d 75 6d 00代表的就是infimum，8个字节，后面的00占位 第7行中的05 00 0b 00 00代表最大虚拟值的行头，固定的5个节点 第8行中的73 75 70 72 65 6d 75 6d代表的就是supremum，8个字节 解析第1行记录8 0000c070 73 75 70 72 65 6d 75 6d 04 03 02 01 20 00 00 10 |supremum.... ...| 9 0000c080 00 2b 00 00 00 00 02 0a 00 00 00 00 0e 56 95 00 |.+...........V..| 10 0000c090 00 01 42 01 10 80 00 00 01 41 42 42 43 43 43 44 |..B......ABBCCCD| 11 0000c0a0 44 44 44 00 05 0a 0a 20 00 00 18 00 3b 00 00 00 |DDD.... ....;...| 第8行中的04 03 02 01代表变长字段长度列表，逆序，表中5个字段类型为varchar，有NULL数据 第8行中的20代表null标志位，第1行记录有null值，十六进制20转成二进制是100000，逆序，表中一共6列，1表示第6列为null，0表示其他列有值 第8-9行中的00 00 10 00 2b 是记录头信息，固定5个字节 c078(本行记录开位置)+2b(偏移量)=c0a3(下一行记录开始位置) 第9行中的00 00 00 00 02 0a 是RowID，固定6个字节，表没有主键 第9行中的00 00 00 00 0e 56 是事务ID，固定6个字节 第9-10行中的95 00 00 01 42 01 10 回滚指针Roll Pointer，固定7个字节 第10行中的80 00 00 01 是ID列int 占4字节 值是1 第10-11行的41 42 42 43 43 43 44 44 44 44是列的数据，结合变长字段长度列表，可以算出varchar每列的值 第2列 41 第3列 42 42 第4列 43 43 43 第5列 44 44 44 44 第6列 null 解析第2行记录11 0000c0a0 44 44 44 00 05 0a 0a 20 00 00 18 00 3b 00 00 00 |DDD.... ....;...| 12 0000c0b0 00 02 0b 00 00 00 00 0e 56 95 00 00 01 42 01 1e |........V....B..| 13 0000c0c0 80 00 00 02 61 61 61 61 61 61 61 61 61 61 62 62 |....aaaaaaaaaabb| 14 0000c0d0 62 62 62 62 62 62 62 62 63 63 63 63 63 01 06 05 |bbbbbbbbccccc...| 从第1行记录解析中，已可算出，第二行开始位置为c0a3 第11行中的00 05 0a 0a代表变长字段长度列表，逆序，表中5个字段类型为varchar，有NULL数据 第11行中的20代表null标志位，第2行记录有null值，十六进制20转成二进制是100000，逆序，表中一共6列，1表示第6列为null，0表示其他列有值 第11行中的00 00 18 00 3b 是记录头信息，固定5个字节 c0a3(本行记录开位置)+3b(偏移量)=c0de(下一行记录开始位置) 第11-12行中的00 00 00 00 02 0b 是RowID，固定6个字节，表没有主键 第12行中的00 00 00 00 0e 56 是事务ID，固定6个字节 第12中的95 00 00 01 42 01 1e 回滚指针Roll Pointer，固定7个字节 第13行中的80 00 00 02 是ID列int 占4字节 值是2 第13-14行的61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 62 62 62 63 63 63 63 63是列的数据，结合变长字段长度列表，可以算出varchar每列的值 第2列 61 61 61 61 61 61 61 61 61 61 第3列 62 62 62 62 62 62 62 62 62 62 第4列 63 63 63 63 63 第5列 空值 第6列 null 解析第3行记录14 0000c0d0 62 62 62 62 62 62 62 62 63 63 63 63 63 01 06 05 |bbbbbbbbccccc...| 15 0000c0e0 0a 0a 00 00 00 20 00 41 00 00 00 00 02 0c 00 00 |..... .A........| 16 0000c0f0 00 00 0e 56 95 00 00 01 42 01 2c 80 00 00 03 61 |...V....B.,....a| 17 0000c100 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 |aaaaaaaaabbbbbbb| 18 0000c110 62 62 62 63 63 63 63 63 64 64 64 64 64 64 65 01 |bbbcccccdddddde.| 第14-15行中的01 06 05 0a 0a代表变长字段长度列表，逆序，表中5个字段类型为varchar，没有NULL数据 第15行中的00代表null标志位，00表示没有null值 第15行中的00 00 20 00 41 是记录头信息，固定5个字节 第15行中的00 00 00 00 02 0c 是RowID，固定6个字节，表没有主键 第15-16行中的00 00 00 00 0e 56 是事务ID，固定6个字节 第16中的95 00 00 01 42 01 2c 回滚指针Roll Pointer，固定7个字节 第16行中的80 00 00 03 是ID列int 占4字节 值是3 第16-18行的61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 62 62 62 63 63 63 63 63 64 64 64 64 64 64 65是列的数据，结合变长字段长度列表，可以算出varchar每列的值 第2列 61 61 61 61 61 61 61 61 61 61 第3列 62 62 62 62 62 62 62 62 62 62 第4列 63 63 63 63 63 第5列 64 64 64 64 64 64 第6列 65 解析第4行记录18 0000c110 62 62 62 63 63 63 63 63 64 64 64 64 64 64 65 01 |bbbcccccdddddde.| 19 0000c120 06 0a 0a 08 00 00 28 ff 47 00 00 00 00 02 0d 00 |......(.G.......| 20 0000c130 00 00 00 0e 5e 98 00 00 01 45 01 10 80 00 00 04 |....^....E......| 21 0000c140 61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 |aaaaaaaaaabbbbbb| 22 0000c150 62 62 62 62 64 64 64 64 64 64 65 00 00 00 00 00 |bbbbdddddde.....| 第18-19行中的01 06 0a 0a代表变长字段长度列表，逆序，表中5个字段类型为varchar，有NULL数据 第19行中的08代表null标志位，十六进制08转成二进制是001000，逆序，表中一共6列，1表示第4列为null，0表示其他列有值 第19行中的00 00 28 ff 47 是记录头信息，固定5个字节 第19行中的00 00 00 00 02 0d 是RowID，固定6个字节，表没有主键 第19-20行中的00 00 00 00 0e 5e 是事务ID，固定6个字节，这里事务ID已经变化 第20中的98 00 00 01 45 01 10 回滚指针Roll Pointer，固定7个字节 第20行中的80 00 00 04 是ID列int 占4字节 值是4 第16-18行的61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 62 62 62 64 64 64 64 64 64 65是列的数据，结合变长字段长度列表，可以算出varchar每列的值 第2列 61 61 61 61 61 61 61 61 61 61 第3列 62 62 62 62 62 62 62 62 62 62 第4列 NULL 第5列 64 64 64 64 64 64 第5列 65 3.详细描述commit命令发出后，binlog日志从内存写到磁盘的过程？重启数据库重启数据库生成新的binlog，便于观察测试mysqladmin shutdown mysqld_safe --defaults-file=/u01/my3306/my.cnf &amp; [mysql@mysql binlog]$ pwd /u01/my3306/log/binlog [mysql@mysql binlog]$ ll total 928 -rw-rw----. 1 mysql mysql 933537 Feb 17 16:38 binlog.000007 -rw-rw----. 1 mysql mysql 391 Feb 17 16:54 binlog.000008 -rw-rw----. 1 mysql mysql 120 Feb 17 16:54 binlog.000009 -rw-rw----. 1 mysql mysql 111 Feb 17 16:54 binlog.index 用一个update事务做测试use lyj; begin; update lyj_t1 set name1='aaaaaaa' where id=1; 查看binlog# 未commit前 +---------------+-----+-------------+-----------+-------------+---------------------------------------+ | Log_name | Pos | Event_type | Server_id | End_log_pos | Info | +---------------+-----+-------------+-----------+-------------+---------------------------------------+ | binlog.000009 | 4 | Format_desc | 101 | 120 | Server ver: 5.6.35-log, Binlog ver: 4 | +---------------+-----+-------------+-----------+-------------+---------------------------------------+ # commit后 commit; show binlog events in 'binlog.000009'; +---------------+-----+-------------+-----------+-------------+---------------------------------------+ | Log_name | Pos | Event_type | Server_id | End_log_pos | Info | +---------------+-----+-------------+-----------+-------------+---------------------------------------+ | binlog.000009 | 4 | Format_desc | 101 | 120 | Server ver: 5.6.35-log, Binlog ver: 4 | | binlog.000009 | 120 | Query | 101 | 191 | BEGIN | | binlog.000009 | 191 | Table_map | 101 | 254 | table_id: 70 (lyj.lyj_t1) | | binlog.000009 | 254 | Update_rows | 101 | 339 | table_id: 70 flags: STMT_END_F | | binlog.000009 | 339 | Xid | 101 | 370 | COMMIT /* xid=9 */ | +---------------+-----+-------------+-----------+-------------+---------------------------------------+ # 也可用以下命令查看 mysqlbinlog -v -v binlog.000009 Binlog日志生成的流程 事务commit后，日志会被write到标准I/O cache里面，每个线程是单独缓存的，线程间的日志彼此独立，不能看到不同线程的日志，这时若发生crash，日志会丢失 write后，每个线程的日志会flush到OS file cache里，这时日志是全局可见的，每个线程都能看到这个日志，若此时crash，日志也会丢失 sync操作会从日志内存里把日志写到disk中，达到持久化。 相关的参数mysql&gt; show variables like 'sync_binlog'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | sync_binlog | 100 | # 代表做100次commit再写binlog，一般设置成1，保证数据的一致性 +---------------+-------+ 1 row in set (0.00 sec) mysql&gt; show variables like 'innodb_flush_log_at_trx_commit'; +--------------------------------+-------+ | Variable_name | Value | +--------------------------------+-------+ | innodb_flush_log_at_trx_commit | 1 | # 一般设置成1，保证数据的一致性 +--------------------------------+-------+ 1 row in set (0.01 sec) 补充查看innodb默认块的大小mysql&gt; show variables like '%innodb_page_size%'; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | innodb_page_size | 16384 | +------------------+-------+ 查看文件格式mysql&gt; show variables like '%file_format%'; +--------------------------+-----------+ | Variable_name | Value | +--------------------------+-----------+ | innodb_file_format | Barracuda | # Barracuda[,bærə''kudə] 梭鱼类 | innodb_file_format_check | ON | | innodb_file_format_max | Antelope | # Antelope['æntɪlop] 羚羊 +--------------------------+-----------+ 从下图可以看出Antelope只包括Redundant（已废弃）和Compact，故建议将innodb_file_format_max也设置为Barracuda 查看tablespace编号mysql&gt; select * from information_schema.innodb_sys_tables where name like '%lyj_t1%'; +----------+----------------------------+------+--------+-------+-------------+------------+---------------+ | TABLE_ID | NAME | FLAG | N_COLS | SPACE | FILE_FORMAT | ROW_FORMAT | ZIP_PAGE_SIZE | +----------+----------------------------+------+--------+-------+-------------+------------+---------------+ | 14 | SYS_DATAFILES | 0 | 5 | 0 | Antelope | Redundant | 0 | | 11 | SYS_FOREIGN | 0 | 7 | 0 | Antelope | Redundant | 0 | | 12 | SYS_FOREIGN_COLS | 0 | 7 | 0 | Antelope | Redundant | 0 | | 13 | SYS_TABLESPACES | 0 | 6 | 0 | Antelope | Redundant | 0 | | 27 | lyj/lyj_t1 | 1 | 5 | 13 | Antelope | Compact | 0 | | 16 | mysql/innodb_index_stats | 1 | 11 | 2 | Antelope | Compact | 0 | | 15 | mysql/innodb_table_stats | 1 | 9 | 1 | Antelope | Compact | 0 | | 18 | mysql/slave_master_info | 1 | 26 | 4 | Antelope | Compact | 0 | | 17 | mysql/slave_relay_log_info | 1 | 11 | 3 | Antelope | Compact | 0 | | 19 | mysql/slave_worker_info | 1 | 15 | 5 | Antelope | Compact | 0 | +----------+----------------------------+------+--------+-------+-------------+------------+---------------+ mysql&gt; select * from information_schema.innodb_sys_tables where name like '%lyj_t1%'; +----------+------------+------+--------+-------+-------------+------------+---------------+ | TABLE_ID | NAME | FLAG | N_COLS | SPACE | FILE_FORMAT | ROW_FORMAT | ZIP_PAGE_SIZE | +----------+------------+------+--------+-------+-------------+------------+---------------+ | 30 | lyj/lyj_t1 | 1 | 5 | 16 | Antelope | Compact | 0 | +----------+------------+------+--------+-------+-------------+------------+---------------+ 查看未提交事务IDset autocommit = 0; insert into lyj_t1 values(5,'aaaaaaaaaa','bbbbbbbbbb','ccccc','dddddd','e'); select * from information_schema.innodb_sys_idx\\G; *************************** 1. row *************************** trx_id: 3694 trx_state: RUNNING trx_started: 2017-02-17 15:42:41 trx_requested_lock_id: NULL trx_wait_started: NULL trx_weight: 2 trx_mysql_thread_id: 23 trx_query: select * from information_schema.innodb_trx trx_operation_state: NULL trx_tables_in_use: 0 trx_tables_locked: 0 trx_lock_structs: 1 trx_lock_memory_bytes: 360 trx_rows_locked: 0 trx_rows_modified: 1 trx_concurrency_tickets: 0 trx_isolation_level: REPEATABLE READ trx_unique_checks: 1 trx_foreign_key_checks: 1 trx_last_foreign_key_error: NULL trx_adaptive_hash_latched: 0 trx_adaptive_hash_timeout: 10000 trx_is_read_only: 0 trx_autocommit_non_locking: 0 rollback; 转换成16进制函数select hex('infimum'); +----------------+ | hex('infimum') | +----------------+ | 696E66696D756D | +----------------+ 文件结构图 Page结构图","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"hexo博客添加常用插件","date":"2017-02-08T02:36:10.818Z","path":"2017/02/08/tools/hexo博客添加常用插件/","text":"Hexo提供了诸多插件来增强博客体验，地址http://hexo.io/plugins 添加pdf浏览插件安装hexo-pdfcnpm install --save hexo-pdf 使用&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125; &#123;% pdf ./bash_freshman.pdf %&#125; 添加生成文章目录插件hexo-toc 安装 cnpm install hexo-toc --save 配置在博客根目录下的_config.yml中如下配置： toc: maxdepth: 3 使用在Markdown中需要显示文章目录的地方添加 &lt;!-- toc --&gt; 添加百度统计支持yilia主题自带统计支持 打开百度统计网站，注册账号 填写注册信息 记录百度统计ID号码 编辑修改themes\\yilia目录下的_config.yml文件 # Miscellaneous baidu_analytics: 'xxxxxxxxxxxx' # xxxxxx是刚获得的百度统计ID号码 统计代码安装检查，确保代码安装正确 添加多说评论支持 打开多说网站 选择微信登陆 点击我要安装 填写相应信息 编辑修改themes\\yilia目录下的_config.yml文件 #是否开启多说评论，开启填写你在多说申请的项目的short_name: dbanote #duoshuo: false duoshuo: dbanote 参考链接 Hexo站点中添加文章目录以及归档 hexo优化目录","tags":[{"name":"tools","slug":"tools","permalink":"/tags/tools/"},{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}]},{"title":"hexo更换主题并个性化定制","date":"2017-02-08T01:33:39.391Z","path":"2017/02/08/tools/hexo更换主题并个性化定制/","text":"hexo系统默认的主题虽然也不错，但我更喜欢yelee和yilia这两款主题 安装yelee主题 主题说明文档：http://moxfive.coding.me/yelee/ 在博客根目录下执行以下命令 # 克隆最新一次提交（git clone速度很慢，可只克隆最新一次提交） git clone --depth 1 https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee 编辑修改根目录下的_config.yml文件 # theme: landscape theme: yelee 更换主题后需要清理并重新生成静态页 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 安装搜索插件 cnpm install hexo-generator-search --save 参照文档修改themes\\yelee目录下的_config.yml文件 安装yilia主题 在博客根目录下执行以下命令 git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia # 或者 git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia # 克隆最新一次提交（git clone速度很慢，可只克隆最新一次提交） git clone --depth 1 https://github.com/litten/hexo-theme-yilia.git themes/yilia 在博客根目录（注意不是yilia根目录）执行以下命令： cnpm i hexo-generator-json-content --save 编辑修改根目录下的_config.yml文件 # theme: landscape theme: yilia # 添加以下内容 # jsonContent jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 更换主题后需要清理并重新生成静态页 hexo clean hexo g hexo s 更换后效果 编辑修改themes\\yilia目录下的_config.yml文件 # 修改menu menu: 主页: / 归档: /archives/ #随笔: /tags/随笔/ # 修改并注释掉不需要的项 # SubNav subnav: github: \"https://github.com/dbanote\" weibo: \"http://weibo.com/foxbei\" #rss: \"#\" #zhihu: \"#\" qq: \"http://sighttp.qq.com/msgrd?v=1&amp;uin=9320802\" #weixin: \"#\" #jianshu: \"#\" #douban: \"#\" mail: \"mailto:15004618839@139.com\" # 文章太长，截断按钮文字 # 截断需要在文章中添加 &lt;!--more--&gt; #excerpt_link: more excerpt_link: false # 设置打赏二维码 # 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏 reward_type: 2 # 打赏wording reward_wording: '喜欢的话，支付1元请我吃糖吧！' # 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg # 支付宝收款1元二维码图片 alipay: /img/zhifubao01.png # 支付宝收款无金额设置二维码图片 # alipay: /img/zhifubao.png # 微信二维码图片地址 # 微信收款1元二维码图片 weixin: /img/weixin01.png # 微信收款无金额设置二维码图片 # alipay: /img/weixin.png # 修改网站收藏夹图标 favicon: /img/favicon.png #你的头像url avatar: /img/avatar.jpg # 根据需要修改以下内容 # 智能菜单 # 如不需要，将该对应项置为false # 比如 #smart_menu: # friends: false smart_menu: innerArchive: '所有文章' friends: '常用网站' aboutme: '关于我' friends: My Oracle Support: https://support.oracle.com/ Oracle Edelivery: https://edelivery.oracle.com/ Oracle Help Center: http://docs.oracle.com/ 练数成金: http://www.dataguru.cn/ 三通IT论坛: http://www.santongit.com/ 一起自学吧: http://www.17zixueba.com/ aboutme: DBA&lt;br&gt;&lt;br&gt;工作学习笔记&lt;br&gt;谢谢大家","tags":[{"name":"tools","slug":"tools","permalink":"/tags/tools/"},{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}]},{"title":"Sublime Text 常用快捷键","date":"2017-01-30T08:33:55.000Z","path":"2017/01/30/tools/Sublime常用快捷键/","text":"通用↑ ↓ ← → 上下左右移动光标 Alt 调出菜单 Ctrl + Shift + P 调出命令板（Command Palette） Ctrl + ` 调出控制台 编辑Ctrl + Enter 在当前行下面新增一行然后跳至该行 Ctrl + Shift + Enter 在当前行上面增加一行并跳至该行 Ctrl + ←/→ 进行逐词移动 Ctrl + Shift + ←/→ 进行逐词选择 Ctrl + ↑/↓ 移动当前显示区域 Ctrl + Shift + ↑/↓ 移动当前行 选择Ctrl + D 选择当前光标所在的词并高亮该词所有出现的位置 再次 Ctrl + D 选择该词出现的下一个位置，在多重选词的过程中 使用 Ctrl + K 进行跳过，使用 Ctrl + U 进行回退，使用 Esc 退出多重编辑 Ctrl + Shift + L 将当前选中区域打散 Ctrl + J 把当前选中区域合并为一行 Ctrl + M 在起始括号和结尾括号间切换 Ctrl + Shift + M 快速选择括号间的内容 Ctrl + Shift + J 快速选择同缩进的内容 Ctrl + Shift + Space 快速选择当前作用域（Scope）的内容 查找&amp;替换F3 跳至当前关键字下一个位置 Shift + F3 跳到当前关键字上一个位置 Alt + F3 选中当前关键字出现的所有位置 Ctrl + F/H 进行标准查找/替换，之后： Alt + C 切换大小写敏感（Case-sensitive）模式 Alt + W 切换整字匹配（Whole matching）模式 Alt + R 切换正则匹配（Regex matching）模式 Ctrl + Shift + H 替换当前关键字 Ctrl + Alt + Enter 替换所有关键字匹配 Ctrl + Shift + F 多文件搜索&amp;替换 跳转Ctrl + P 跳转到指定文件，输入文件名后可以： @ 符号跳转 输入@symbol跳转到symbol符号所在的位置 # 关键字跳转 输入#keyword跳转到keyword所在的位置 : 行号跳转 输入:12跳转到文件的第12行。 Ctrl + R 跳转到指定符号 Ctrl + G 跳转到指定行号 窗口Ctrl + Shift + N 创建一个新窗口 Ctrl + N 在当前窗口创建一个新标签 Ctrl + W 关闭当前标签，当窗口内没有标签时会关闭该窗口 Ctrl + Shift + T 恢复刚刚关闭的标签 屏幕F11 切换至普通全屏 Shift + F11 切换至无干扰全屏 Alt+Shift+1 Single 切换至独屏 Alt+Shift+2 Columns:2 切换至纵向二栏分屏 Alt+Shift+3 Columns:3 切换至纵向三栏分屏 Alt+Shift+4 Columns:4 切换至纵向四栏分屏 Alt+Shift+8 Rows:2 切换至横向二栏分屏 Alt+Shift+9 Rows:3 切换至横向三栏分屏 Alt+Shift+5 Grid 切换至四格式分屏 插件”DeleteBlankLines”# Windows/Linux Ctrl+Alt+Backspace 删除所有空行 Ctrl+Alt+Shift+Backspace 删除多余空行 # Mac OS Ctrl+Alt+Delete 删除所有空行 Ctrl+Alt+Shift+Delete 删除多余空行 插件”SublimeTmpl”ctrl+alt+h html ctrl+alt+j javascript ctrl+alt+c css ctrl+alt+p php ctrl+alt+r ruby ctrl+alt+shift+p python","tags":[{"name":"tools","slug":"tools","permalink":"/tags/tools/"},{"name":"sublime text","slug":"sublime-text","permalink":"/tags/sublime-text/"}]},{"title":"MySQL DBA从小白到大神实战-03 深入MySQL体系结构","date":"2017-01-28T05:42:00.000Z","path":"2017/01/28/mysql/课程学习/03-MySQL-DBA从小白到大神实战/","text":"1. thread pool的原理是什么？线程池的原理很简单，类似于操作系统中的缓冲区的概念，它的流程如下：先启动若干数量的线程，并让这些线程都处于睡眠状态，当客户端有一个新请求时，就会唤醒线程池中的某一个睡眠线程，让它来处理客户端的这个请求，当处理完这个请求后，线程又处于睡眠状态。 MySQL线程池只在MariaDB，Oracle MySQL企业版中提供，Oracle MySQL社区版并不提供。 在传统方式下，MySQL线程调度方式有两种：每个连接一个线程(one-thread-per-connection)和所有连接一个线程（no-threads）。在实际生产中，一般用的是前者。即每当有一个客户端连接到MySQL服务器，MySQL服务器都会为该客户端创建一个单独的线程，请求结束后，销毁线程。连接数越多，则相应的线程会越多。这种方式在高并发情况下，会导致线程的频繁创建和释放。 2. 为什么用double write就能解决page坏的问题？InnoDB 的Page Size一般是16KB，其数据校验也是针对这16KB来计算的，将数据写入到磁盘是以Page为单位进行操作的，mysql的page size跟系统文件的page size是不一致的，在写数据的时候, 系统并不是把整个buffer pool page一次性写到disk上，在极端情况下（比如断电）往往并不能保证这一操作的原子性，16K的数据，写入4K时，发生了系统断电/OS crash ，只有一部分写是成功的，这种情况下就是partial page write问题。 mysql在恢复的过程中是检查page的checksum（检验和），checksum就是pgae的最后事务号，发生partial page write问题时，page已经损坏，找不到该page中的事务号，就无法恢复（redo里面是没有保留这个损坏page完全的镜像，就无法从REDO里恢复）。 为了解决 partial page write 问题 ，当mysql将脏数据flush到data file的时候, 先使用memcopy 将脏数据复制到内存中的double write buffer ，之后通过double write buffer再分2次，每次写入1MB到共享表空间，然后马上调用fsync函数，同步到磁盘上，避免缓冲带来的问题，在这个过程中，doublewrite是顺序写，开销并不大，在完成doublewrite写入后，在将double write buffer写入各表空间文件，这时是离散写入。如果发生了极端情况（断电），InnoDB再次启动后，发现了一个Page数据已经损坏，那么此时就可以从double write buffer中进行数据恢复了。 double write的优点是什么?double write解决了partial page write的问题，它能保证即使double write部分发生了partial page write但也能恢复。另外一个好处就是double write能减少redo log的量, 有了double write，redo log只记录了二进制的变化量，也就等同于binary log，而通过前段时间的测试确实发现，在double write关闭的情况下，redo log比binary logs要大。 double write的缺点是什么?虽然mysql称double write是一个buffer, 但其实它是开在物理文件上的一个buffer, 其实也就是file, 所以它会导致系统有更多的fsync操作, 而我们知道硬盘的fsync性能是很慢的, 所以它会降低mysql的整体性能. 但是并不会降低到原来的50%. 这主要是因为: double write是一个连接的存储空间, 所以硬盘在写数据的时候是顺序写, 而不是随机写, 这样性能更高。 另外将数据从double write buffer写到真正的segment中的时候, 系统会自动合并连接空间刷新的方式, 每次可以刷新多个pages。另外将数据从double write buffer写到真正的segment中的时候, 系统会自动合并连接空间刷新的方式, 每次可以刷新多个pages。 double write在恢复的时候是如何工作的?如果是写double write buffer本身失败，那么这些数据不会被写到磁盘，innodb此时会从磁盘载入原始的数据，然后通过innodb的事务日志来计算出正确的数据，重新写入到double write buffer。如果double write buffer写成功的话，但是写磁盘失败，innodb就不用通过事务日志来计算了，而是直接用buffer的数据再写一遍。在恢复的时候，innodb直接比较页面的checksum，如果不对的话，就从硬盘载入原始数据，再由事务日志开始推演出正确的数据，所以innodb的恢复通常需要较长的时间。 查看是否开启double writeshow variables like '%double%'; +--------------------+-------+ | Variable_name | Value | +--------------------+-------+ | innodb_doublewrite | ON | +--------------------+-------+ 3. InnoDB redo log与binlog有什么区别？有了InnoDB redo log为什么还要binlog? binlog会记录所有与MySQL数据库有关的日志记录，包括InnoDB、MyISAM、Heap等其他存储引擎的日志；而InnoDB存储引擎的redo log只记录有关该引擎本身的事务日志。 无论将binlog文件记录的格式设为STATEMENT还是ROW，又或是MIXED，其记录的都是关于一个事务的具体操作内容，即该日志是逻辑日志；而InnoDB存储引擎的redo log是关于每个页（page）更改的物理情况。 binlog文件仅在事务提交后进行写入，即只写磁盘一次，不论这时该事务多大；而在事务进行的过程中，却不断有重做日志条目（redo entry）被写入到重做日志文件中。 binlog是MySQL Server层记录的日志，所有引擎产生的日志都会通过binlog进行封装；MySQL的特点就是支持多存储引擎，为了兼容绝大部分引擎来支持类似复制这样的特性，就需要采用binlog日志来用实现。简单的说，binlog 是mysqld 记录全局数据结构变化的log，用于复制和恢复；innodb redo log 是innodb 引擎自己记录事务过程的log，用于回滚和crash 恢复。 4. 课程笔记 MySQL是单进程多线程 MySQL存储引擎是可插拔的，有InnoDB，MyISAM(早期)等 存储引擎是用来处理数据库相关的CRUD的操作 CRUD是指在做计算处理时的增加(Create)、读取(Retrieve)(重新得到数据)、更新(Update)和删除(Delete)几个单词的首字母简写 存储引擎的对象是表 MySQL数据库与实例的关系是一对一的 MySQL的数据库是物理操作系统文件或其他形式文件类型的集合，实例是由数据库后台进程/线程以及一个共享内存区组成 MySQL 5.6 InnoDB架构中Buffer Pool(1) index page: 数据缓存放在index page里，因MySQL数据的存储结构是Btree，所以称index page，page的概念相当于oracle中的buffer，1 page默认大小16k(2) data dictionary: 数据字典的缓冲，其文件是存放在iblog目录下的ibdata中，如/u01/my3306/log/iblog/ibdata1(3) lock info: 行锁放在lock info中，当行锁达到一定值的时候，行锁就会升级为表锁(4) undo page: 缓存UNDO操作，DML操作修改前镜像放到undo page中，其文件也是存放在iblog目录下的ibdata中(5) insert buffer page: 缓存二级索引（非唯一索引，或称辅助索引）(6) adaptive hash index: 自适应哈希索引，InnoDB存储引擎会监控对表上索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引，所以称之为自适应（adaptive）的。自适应哈希索引通过缓冲池的B+树构造而来，因此建立的速度很快。而且不需要将整个表都建哈希索引，InnoDB存储引擎会自动根据访问的频率和模式来为某些页建立哈希索引。(7) Buffer Pool的大小一般设置为物理内存的60%-80%，在MySQL中可以通过以下命令查询： mysql&gt; show variables like '%buffer_pool_size%'; +-------------------------+-----------+ | Variable_name | Value | +-------------------------+-----------+ | innodb_buffer_pool_size | 134217728 | +-------------------------+-----------+ redo log buffer: 缓存redo log，通过redo log thead写到redo log文件中存放在iblog目录下的ibdata中，如/u01/my3306/log/iblog/ib_logfile0 查找算法：链表遍历、二分查找、Btree查找、HASH查找 当数据库关闭时，把热块保存(缓存)到文件，在打开时再从文件加载到内存里，参数和设置方法如下： show variables like '%dump%'; +-------------------------------------+-------+ | Variable_name | Value | +-------------------------------------+-------+ | innodb_buffer_pool_dump_at_shutdown | OFF | | innodb_buffer_pool_dump_now | OFF | +-------------------------------------+-------+ set global innodb_buffer_pool_dump_at_shutdown=1; set global innodb_buffer_pool_dump_now=1; exit # 关闭数据库 mysqladmin shutdown # 查看缓存的文件 ll /u01/my3306/log/iblog/ total 4145172 -rw-rw----. 1 mysql mysql 884 Jan 24 17:38 ib_buffer_pool //这个就是缓存的文件 -rw-rw----. 1 mysql mysql 33554432 Jan 24 17:38 ibdata1 -rw-rw----. 1 mysql mysql 16777216 Jan 24 17:38 ibdata2 -rw-rw----. 1 mysql mysql 1048576000 Jan 24 17:38 ib_logfile0 -rw-rw----. 1 mysql mysql 1048576000 Jan 17 17:37 ib_logfile1 -rw-rw----. 1 mysql mysql 1048576000 Jan 17 17:37 ib_logfile2 -rw-rw----. 1 mysql mysql 1048576000 Jan 17 17:37 ib_logfile3 # 指定参数启动数据库 mysqld_safe --defaults-file=/u01/my3306/my.cnf &amp; 安装MySQL Utilities(1)选择MySQL Utilities适合的版本下载：https://dev.mysql.com/downloads/utilities/(2)选择Connector/Python适合的版本下载（依赖包）：https://dev.mysql.com/downloads/connector/python/(3)上传安装包到服务器/tmp目录，并安装（root用户下） ll total 32836 -rw-r--r--. 1 root root 258776 Jan 25 11:50 mysql-connector-python-2.1.5-1.el6.x86_64.rpm -rw-r--r--. 1 root root 892500 Jan 25 11:39 mysql-utilities-1.6.4-1.el6.noarch.rpm rpm -ivh mysql-connector-python-2.1.5-1.el6.x86_64.rpm rpm -ivh mysql-utilities-1.6.4-1.el6.noarch.rpm (4)MySQL Utilities–mysqlfrm # 以诊断模式查看表结构定义文件 mysqlfrm --diagnostic user.frm 查看错误日志所在位置 mysql&gt; show variables like '%log_error%'; +---------------------+---------------------------+ | Variable_name | Value | +---------------------+---------------------------+ | binlog_error_action | IGNORE_ERROR | | log_error | /u01/my3306/log/error.log | # 错误日志所在位置 +---------------------+---------------------------+ 开启慢查询 mysql&gt; show variables like '%slow%'; +---------------------------+--------------------------+ | Variable_name | Value | +---------------------------+--------------------------+ | log_slow_admin_statements | ON | | log_slow_slave_statements | OFF | | slow_launch_time | 2 | | slow_query_log | ON | # 开启慢查询 | slow_query_log_file | /u01/my3306/log/slow.log | # 慢查询日志位置 +---------------------------+--------------------------+ mysql&gt; show variables like '%query_time%'; +-----------------+----------+ | Variable_name | Value | +-----------------+----------+ | long_query_time | 1.000000 | # 慢查询时间为1s +-----------------+----------+ 通用日志默认是不开启的（通用日志主要用在数据库审计） mysql&gt; show variables like &apos;%gen%&apos;; +------------------+----------------------------+ | Variable_name | Value | +------------------+----------------------------+ | general_log | OFF | | general_log_file | /u01/my3306/data/mysql.log | +------------------+----------------------------+ 最大用户连接数 mysql&gt; show variables like &apos;%max_user_connect%&apos;; +----------------------+-------+ | Variable_name | Value | +----------------------+-------+ | max_user_connections | 2800 | +----------------------+-------+ 查出mysqld进程号为27507 ps -ef | grep 3306 root 5475 5183 0 11:44 pts/1 00:00:00 grep 3306 mysql 26656 1 0 Jan17 ? 00:00:00 /bin/sh /u01/my3306/bin/mysqld_safe --defaults-file=/u01/my3306/my.cnf --user=mysql mysql 27507 26656 0 Jan17 ? 00:01:32 /u01/my3306/bin/mysqld --defaults-file=/u01/my3306/my.cnf --basedir=/u01/my3306 --datadir=/u01/my3306/data --plugin-dir=/u01/my3306/lib/plugin --log-error=/u01/my3306/log/error.log --open-files-limit=65535 --pid-file=/u01/my3306/run/mysqld.pid --socket=/u01/my3306/run/mysql.sock --port=3306 查看mysqld进程27507下所有线程 pstack 27507 Thread 28 (Thread 0x7f9b070c4700 (LWP 27508)): #0 0x00000038a040b68c in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 #1 0x00000000009536bb in os_event_wait_low(os_event*, long) () #2 0x0000000000950aa6 in os_aio_simulated_handle(unsigned long, fil_node_t**, void**, unsigned long*) () #3 0x0000000000a49ed7 in fil_aio_wait(unsigned long) () #4 0x00000000009b9638 in io_handler_thread () #5 0x00000038a0407aa1 in start_thread () from /lib64/libpthread.so.0 #6 0x00000038a00e8aad in clone () from /lib64/libc.so.6 # ...... 中间略过 Thread 1 (Thread 0x7f9b18f637e0 (LWP 27507)): #0 0x00000038a00df283 in poll () from /lib64/libc.so.6 #1 0x0000000000585284 in handle_connections_sockets() () #2 0x000000000058cd51 in mysqld_main(int, char**) () #3 0x00000038a001ed1d in __libc_start_main () from /lib64/libc.so.6 #4 0x000000000057dbc1 in _start () read/write thread mysql&gt; show variables like '%io_thread%'; +-------------------------+-------+ | Variable_name | Value | +-------------------------+-------+ | innodb_read_io_threads | 4 | # 预读 | innodb_write_io_threads | 10 | +-------------------------+-------+ purge thread: 清undo page mysql&gt; show variables like '%purge%'; +----------------------------+-------+ | Variable_name | Value | +----------------------------+-------+ | gtid_purged | | | innodb_max_purge_lag | 0 | | innodb_max_purge_lag_delay | 0 | | innodb_purge_batch_size | 300 | | innodb_purge_threads | 1 | | relay_log_purge | ON | +----------------------------+-------+","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"VIM常用命令","date":"2017-01-27T16:00:00.000Z","path":"2017/01/28/tools/vim常用命令/","text":"文本编辑器是所有计算机系统中最常用的一种工具。UNIX下的编辑器有ex,sed和vi等，其中，使用最为广泛的是vi。 文中是两张VIM键盘图和VIM命令图解。","tags":[{"name":"tools","slug":"tools","permalink":"/tags/tools/"},{"name":"vim","slug":"vim","permalink":"/tags/vim/"}]},{"title":"GIT常用命令整理","date":"2017-01-26T09:05:44.861Z","path":"2017/01/26/tools/git常用命令整理/","text":"基本信息设置与查看git config --global user.name &apos;dbanote&apos; git config --global user.email &apos;15004618839@139.com&apos; git config --list 初始化git仓库git init 向本地仓库中添加/修改文件# 添加/修改/删除工作区文件后，保存变动内容到暂存区 git add &lt;file&gt; git add * # 查看暂存区状态 git status # 暂存区内容提交到git仓库 git commit -m \"git init\" PUSH远程仓库git remote add origin git@github.com:dbanote/08_dbanote.git git push -u origin master 克隆远程仓库git clone git@github.com:dbanote/08_dbanote.git","tags":[{"name":"git","slug":"git","permalink":"/tags/git/"},{"name":"tools","slug":"tools","permalink":"/tags/tools/"}]},{"title":"MySQL DBA从小白到大神实战-02 MySQL标准化、自动化部署","date":"2017-01-26T06:16:32.184Z","path":"2017/01/26/mysql/课程学习/02-MySQL-DBA从小白到大神实战/","text":"为什么数据目录和日志目录需要分开?这里的分开，我理解是将MySQL的数据目录和日志目录分别放到不同类型的磁盘中。假设生产环境中服务器上有两种类型的磁盘，分别是SSD和SAS，SSD比SAS的响应时间要快（SSD响应时间约0.1毫秒，SAS的响应时间约10毫秒），为了更好的利用磁盘，一般会把活跃的数据放到SSD上，冷数据放到SAS磁盘上。数据目录下的数据一般是随机读写的热数据，放到SSD盘中会有较高的响应速度；日志目录下的日志是顺序读写的冷数据，放到SAS盘中满足写日志高吞吐量的需求。 如何标准化配置多实例?（例如：一台物理主机上部署3306与3307两个实例）标准化配置多实例，主要是标准化每个实例的目录和内存设置，这样每个实例的参数设置也很容易达到标准化。标准化配置的MYSQL实例，方便实施监控及运维管理。因一个MySQL实例最多占用64G的物理内存，所以在物理内存较高的服务器上，一般会安装多个MySQL实例，MySQL不同实例是通过端口来区别的。例如：一台64G的物理主机上部署3306与3307两个MYSQL实例 标准化目录实例1： /data/my3306 /log/my3306 实例2： /data/my3307 /log/my3307 # /data 目录挂载到SSD盘上 # /log 目录挂载到SAS盘上 标准化内存实例1： 15G: InnoDB buffer cache 5G : mysql server层 实例2： 15G: InnoDB buffer cache 5G : mysql server层 OS: 24G 标准化参数结合标准化的目录及内存设置，设置标准化的参数 详细描述MySQL编译安装的过程（截图安装步骤）关闭防火墙和SELINUXservice iptables status #------------------------------------------------ Table: filter Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHED 2 ACCEPT icmp -- 0.0.0.0/0 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:22 5 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited Chain FORWARD (policy ACCEPT) num target prot opt source destination 1 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited Chain OUTPUT (policy ACCEPT) num target prot opt source destination #------------------------------------------------ service iptables stop #------------------------------------------------ iptables: Setting chains to policy ACCEPT: filter [ OK ] iptables: Flushing firewall rules: [ OK ] iptables: Unloading modules: [ OK ] #------------------------------------------------ service iptables status #------------------------------------------------ iptables: Firewall is not running. #------------------------------------------------ chkconfig iptables off vi /etc/selinux/config #------------------------------------------------ SELINUX=disabled #------------------------------------------------ 配置sysctl.conf# 查看服务器内存 free #------------------------------------------------ total used free shared buffers cached Mem: 8174352 616628 7557724 172 151904 253892 -/+ buffers/cache: 210832 7963520 Swap: 16531452 0 16531452 #------------------------------------------------ vi /etc/sysctl.conf #------------------------------------------------ # 修改 kernel.shmmax = 4398046511104 # 添加 fs.file-max = 6815744 kernel.sem = 250 32000 100 128 kernel.shmmni = 4096 kernel.panic_on_oops = 1 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048576 fs.aio-max-nr = 1048576 net.ipv4.ip_local_port_range = 9000 65500 #------------------------------------------------ # kernel.shmmax算法：修改为物理内容的50%、60% # 8G:kernel.shmmax = (8G*1024*1024*1024*1024)*50% = 4398046511104 # 使配置立即生效 sysctl -p 检查是否已安装MySQLrpm -qa | grep mysql #------------------------------------------------ mysql-libs-5.1.73-7.el6.x86_64 #------------------------------------------------ # 删除mysql-libs-5.1.73-7.el6.x86_64包 rpm -e --nodeps mysql-libs-5.1.73-7.el6.x86_64 下载MySQL源码Download MySQL Community Server https://dev.mysql.com/downloads/mysql/5.6.html#downloads Select Version: 5.6.35 -&gt; Select Platform: Source Code -&gt; 选择【Generic Linux (Architecture Independent), Compressed TAR Archive】下载 # 配置yum源，安装lrzsz(代替ftp上传和下载的工具) mkdir /media/disk mkdir /media/cdrom mount /dev/cdrom /media/cdrom cp -rf /media/cdrom/* /media/disk umount /media/cdrom cp /etc/yum.repos.d/public-yum-ol6.repo /etc/yum.repos.d/public-yum-ol6.repo.bak vi /etc/yum.repos.d/public-yum-ol6.repo #------------------------------------------------ name=Oracle Linux $releasever Latest ($basearch) baseurl=file:///media/disk/Server gpgcheck=0 enabled=1 #------------------------------------------------ yum -y install lrzsz # 上传到服务器的/u01目录下 mkdir /u01 cd /u01 rz # 选择mysql源码包，上传 rz waiting to receive. Starting zmodem transfer. Press Ctrl+C to cancel. Transferring mysql-5.6.35.tar.gz... 100% 31413 KB 15706 KB/sec 00:00:02 0 Errors ll /u01/mysql* -rw-r--r--. 1 root root 32167628 Jan 17 11:16 /u01/mysql-5.6.35.tar.gz 添加MySQL用户和组groupadd -g 501 mysql useradd -u 501 mysql -g mysql echo \"mysql123\" | passwd --stdin mysql id mysql uid=501(mysql) gid=501(mysql) groups=501(mysql) 配MySQL环境变量vi /home/mysql/.bash_profile #------------------------------------------------ PATH=$PATH:$HOME/bin:/u01/my3306/bin #------------------------------------------------ 创建目录及授权mkdir -p /u01/my3306/data mkdir -p /u01/my3306/log/iblog mkdir -p /u01/my3306/log/binlog mkdir -p /u01/my3306/run mkdir -p /u01/my3306/tmp chown -R mysql:mysql /u01/my3306 chmod -R 755 /u01/my3306 解压mysql5.6cd /u01 tar xvpf mysql-5.6.35.tar.gz 安装cmake及相关依赖包yum install -y cmake gcc gcc-c++ ncurses-devel bison zlib libxml openssl 编译并安装cd /u01/mysql-5.6.35 cmake \\ -DCMAKE_INSTALL_PREFIX=/u01/my3306 \\ -DINSTALL_DATADIR=/u01/my3306/data \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DEXTRA_CHARSETS=all \\ -DWITH_SSL=yes \\ -DWITH_EMBEDDED_SERVER=1 \\ -DENABLED_LOCAL_INFILE=1 \\ -DWITH_MYISAM_STORAGE_ENGINE=1 \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_ARCHIVE_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_PARTITION_STORAGE_ENGINE=1 \\ -DMYSQL_UNIX_ADDR=/u01/my3306/run/mysql.sock \\ -DMYSQL_TCP_PORT=3306 \\ -DENABLED_LOCAL_INFILE=1 \\ -DSYSCONFDIR=/etc \\ -DWITH_READLINE=on # 第一次CMAKE出现错误提示 #--------------------------------------------------------------------------------------------- CMake Error: The following variables are used in this project, but they are set to NOTFOUND. Please set them or make sure they are set and tested correctly in the CMake files: OPENSSL_INCLUDE_DIR used as include directory in directory /u01/mysql-5.6.35/CMakeFiles/CMakeTmp #--------------------------------------------------------------------------------------------- #安装openssl-devel包 yum -y install openssl-devel #重新cmake需要删除当前目录下CMakeCache.txt，然后再重新执行 rm -rf CMakeCache.txt #编译并安装 make make install MySQL参数配置cd /u01/my3306 vi my.cnf #---------------------------------------------------------- [client] port=3306 socket=/u01/my3306/mysql.sock [mysql] pid_file=/u01/my3306/run/mysqld.pid [mysqld] autocommit=1 general_log=off explicit_defaults_for_timestamp=true # system basedir=/u01/my3306 datadir=/u01/my3306/data max_allowed_packet=1g max_connections=3000 max_user_connections=2800 open_files_limit=65535 pid_file=/u01/my3306/run/mysqld.pid port=3306 server_id=101 skip_name_resolve=ON socket=/u01/my3306/run/mysql.sock tmpdir=/u01/my3306/tmp #binlog log_bin=/u01/my3306/log/binlog/binlog binlog_cache_size=32768 binlog_format=row expire_logs_days=7 log_slave_updates=ON max_binlog_cache_size=2147483648 max_binlog_size=524288000 sync_binlog=100 #logging log_error=/u01/my3306/log/error.log slow_query_log_file=/u01/my3306/log/slow.log log_queries_not_using_indexes=0 slow_query_log=1 log_slave_updates=ON log_slow_admin_statements=1 long_query_time=1 #relay relay_log=/u01/my3306/log/relaylog relay_log_index=/u01/my3306/log/relay.index relay_log_info_file=/u01/my3306/log/relay-log.info #slave slave_load_tmpdir=/u01/my3306/tmp slave_skip_errors=OFF #innodb innodb_data_home_dir=/u01/my3306/log/iblog innodb_log_group_home_dir=/u01/my3306/log/iblog innodb_adaptive_flushing=ON innodb_adaptive_hash_index=ON innodb_autoinc_lock_mode=1 innodb_buffer_pool_instances=8 #default innodb_change_buffering=inserts innodb_checksums=ON innodb_buffer_pool_size= 128M innodb_data_file_path=ibdata1:32M;ibdata2:16M:autoextend innodb_doublewrite=ON innodb_file_format=Barracuda innodb_file_per_table=ON innodb_flush_log_at_trx_commit=1 innodb_flush_method=O_DIRECT innodb_io_capacity=1000 innodb_lock_wait_timeout=10 innodb_log_buffer_size=67108864 innodb_log_file_size=1048576000 innodb_log_files_in_group=4 innodb_max_dirty_pages_pct=60 innodb_open_files=60000 innodb_purge_threads=1 innodb_read_io_threads=4 innodb_stats_on_metadata=OFF innodb_support_xa=ON innodb_use_native_aio=OFF innodb_write_io_threads=10 [mysqld_safe] datadir=/u01/my3306/data #---------------------------------------------------------- # 编译后重新修改目录权限 chown -R mysql:mysql /u01/my3306 初始化MySQL脚本su - mysql cd /u01/my3306/scripts ./mysql_install_db --defaults-file=/u01/my3306/my.cnf \\ --datadir=/u01/my3306/data --basedir=/u01/my3306 --user=mysql 启动MySQL/u01/my3306/bin/mysqld_safe --defaults-file=/u01/my3306/my.cnf --user=mysql &amp; 登录MySQLmysql # 或者 mysql -h127.0.0.1 -uroot Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 2 Server version: 5.6.35-log Source distribution Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql&gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | test | +--------------------+ 4 rows in set (0.01 sec)","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"MySQL DBA从小白到大神实战-01 MySQL 高级DBA职业规划","date":"2017-01-26T05:54:07.005Z","path":"2017/01/26/mysql/课程学习/01-MySQL-DBA从小白到大神实战/","text":"什么是MVCC？有什么作用？MVCC是Multiversion Concurrency Control的缩写，中文的意思是多版本并发控制。目前多数DB都采用了这一技术，比如Oracle，PostgreSQL等，但各自的实现机制不尽相同，MVCC没有一个统一的实现标准。MVCC能有效降低锁的开销，虽然不同数据库实现MVCC的机制有所有同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。 ACID中的I是怎么实现在的？ A: 原子性 Atomicity C: 一致性 Consistency I: 隔离性 Isolation D: 持久性 Durability I的实现需要对事务进行并发控制，使事务在并发环境中相互隔离，一个事务的执行不能被其他事务干扰。也就是说，不同的事务并发操纵相同的数据时，每个事务都有各自完整的数据空间，一个事务内部的操作及使用的数据对其他并发事务是隔离的，一个事务所做的修改在终提交以前，对其他事务是不可见的。 2PC在数据库中是怎么来实现的？2PC是Two Phase Commitment Protocol的缩写，中文的意思是两阶段提交协议，用于保证属于多个数据分片上的操作的原子性。这些数据分片可能分布在不同的服务器上，2PC协议保证多台服务器上的操作要么全部成功，要么全部失败。 以ORACLE数据库为例，2PC的实现步骤如下： 阶段一：提交事务请求（投票阶段） 事务询问协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应 执行事务各参与者节点执行事务操作，并将Undo和Redo信息计入事务日志中 各参与者向协调者反馈事务询问的响应如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者No响应，表示事务不可以执行。 阶段二：执行事务提交（执行阶段）执行事务提交如果所有参与者的反馈都是Yes响应，那么 发送提交请求协调者向所有参与者节点发出Commit请求 事务提交参与者接收到Commit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源 反馈事务提交结果参与者在完成事务提交之后，向协调者发送ACK信息 完成事务协调者接收到所有参与者反馈的ACK消息后，完成事务 中断事务任何一个参与者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。 发送回滚请求协调者向所有参与者节点发出Rollback请求 事务回滚参与者接收到rollback请求后，会利用其在阶段一中记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放整个事务执行期间占用的资源 反馈事务回滚结果参与者在完成事务回滚之后，向协调者发送ACK信息 中断事务协调者接收到所有参与者反馈的ACK信息后，完成事务中断 简单讲讲CAP/base/paxos算法。CAP定理一个分布式系统不可能同时满足一致性(C: Consistency)、可用性(A: Availibility)和分区容错性(P: Partition tolerance)这三个基本需求，最多只能同时满足其中的两项。其中分区容错性是一个最基本的要求，是一个分布式系统必然需要面对和解决的问题。系统架构设计的主要精力应放在根据业务特点在C（一致性）和A（可用性）之间寻求平衡。 一致性在分布式环境中，一致性是指数据在多个副本之间是否能够保持一致的特性。CAP定理应用中的放弃一致性，是指放弃数据的强一致性，而保留数据的最终一致性。这样的系统无法保证数据保持实时的一致性，但是能够承诺的是，数据最终会达到一个一致的状态。具体多久能够达到数据一致取决于系统的设计，主要包括数据副本在不同节点之间的复制时间长短。 可用性系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。CAP定理应用中的放弃可用性，是指一旦系统遇到网络分区或其他故障时，受到影响的服务需要等待一定的时间，在等待期间系统无法对外提供正常的服务，即不可用。 分区容错性分区容错性约束了一个分布式系统需要具有如下特性：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。对于一个分布式系统而言，分区容错性是一个最基本的要求，CAP定理应用中的放弃分区容错性，一种较为简单的做法是将所有的数据（或者仅仅是那些与事务相关的数据）都放在一个分布式节点上，这样就不会碰到由于网络分区带来的负面影响，但放弃P的同时，也就意味着放弃了系统的可扩展性。 BASE理论BASE是Basically Available(基本可用)、 Soft state(软状态) 和Eventually consistent(最终一致性)三个短语的简写。 BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性(Strong Consistency)，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性(Eventually consistent)。 基本可用基本可用是指分布式系统在出现不可预知故障时，允许损失部分可用性，如响应时间上的损失，部分非关键功能上的损失。 软状态软状态和是指允许系统中的数据存在中间的状态，并认为该中间状态存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。 最终一致性最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。BASE理论面向的是大型高可用可扩展的分布式系统，和传统事务的ACID强一致性相反，BASE是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性与BASE理论往往会结合一起使用。 Paxos（帕克索斯）算法Paxos是基于消息传递且具有高度容错性的一致性算法。算法要解决的问题就是如何在可能发生的宕机或网络异常的分布式系统中，快速且正确地在集群内部对某个数据的值达成一致，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。Paxos算法引入了“过半”的理念，通俗的讲就是少数服从多数据的原则。同时，Paxos算法支持分布式节点角色之间的轮换，这极大的避免了分布式单点的出现，因此Paxos算法解决了无限期等待问题，也解决了“脑残”问题，是目前来说最优秀的分布式一致性协议之一。","tags":[{"name":"mysql","slug":"mysql","permalink":"/tags/mysql/"}]},{"title":"hexo+github搭建个人博客","date":"2017-01-19T09:28:31.624Z","path":"2017/01/19/tools/hexo+github搭建个人博客/","text":"前言：我的博客之旅我用wordpress写过一段时间博客，因租用的外国空间访问速度不理想，放弃！我用vimwiki写过一段时间博客，因其配置、更新博客比较麻烦，且生成的html也需要存放到租用的空间上才能共享，放弃！我在类似CSDN免费空间上也写过一段时间博客，因没有客户端工具，在线编辑功能受限，且本地不能保存备份博客，放弃！这两年我一直用有道云笔记写博客，其本地编辑功能比较强大，有易用的分类目录和标签功能，单条博客也易于分享，但缺乏一个整体对外的窗口，文章中的代码也无法实现高亮显示，不够美观！2017年初，偶然的机会知道了hexo，因有较强的markdown和git功底，决定开启hexo写博之旅。 hexo是什么?hexo是一款基于Node.js的静态博客框架。 hexo官网地址：https://hexo.io 为什么选择Hexo目前比较流行的静态博客框架有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等。 这些静态博客框架各有各的好处，之所以选择Hexo，最主要的原因如下： Hexo基于Node.js实现，在Windows上安装Node.js环境简单；而其他的静态博客框架如Jekyll基于Ruby实现，不建议在Windows下搭建的。 Hexo有本地WEB服务器，能实现本地预览，并直接发布到WEB容器(github)中实现同步；而Jekyll没有本地服务器，无法实现本地博文预览。 Hexo主题丰富，基本直接就可以用，不需要太多的修改。 支持Markdown语法。 搭建本地博客下载并安装git和Node.js从以下地址下载所需的Windows版安装包，使用默认设置安装： Node.js: https://nodejs.org git: https://git-scm.com 安装成功后，可通过以下命令查看安装版本：$ node -v v6.9.4 $ git --version git version 2.11.1.windows.1 配置Git Bash样式（可选）新建D:\\08_dbanote目录做为博客根目录，进入目录，右键选择Git Bash Here 在弹出的窗口上右键选择Options，设置窗口样式 设置显示字体 设置窗口大小(需重新开启Git Bash方可生效) 设置鼠标右健直接粘贴 安装淘宝的cnpm源访问国外源速度较慢，建议安装淘宝的cnpm源，以后使用cnpm命令代替npmnpm install -g cnpm --registry=https://registry.npm.taobao.org 安装hexo (-g 是全局化安装)cnpm install hexo-cli -g 初始化hexo博客# 确保当前目录为博客根目录 cd D:\\08_dbanote hexo init cnpm install 安装git部署包作用：通过hexo d这一条命令，将博客部署到git服务器上，如githubcnpm install hexo-deployer-git --save 生成博客静态文件hexo g 启动本地服务器确保4000端口没有被占用# 在windows命令行下执行 netstat -ano | findstr \"4000\" TCP 127.0.0.1:4000 0.0.0.0:0 LISTENING 16360 TCP 127.0.0.1:4000 127.0.0.1:53443 ESTABLISHED 16360 TCP 127.0.0.1:4000 127.0.0.1:63485 CLOSE_WAIT 16360 TCP 127.0.0.1:53443 127.0.0.1:4000 ESTABLISHED 14256 TCP 127.0.0.1:63485 127.0.0.1:4000 FIN_WAIT_2 14256 # 4000端口被占用，查找进程号对应的程序 tasklist | findstr \"16360\" FoxitProtect.exe 16360 Services 0 11,628 K # 结束该进程 taskkill /f /t /im FoxitProtect.exe 启动本地服务器hexo s #--------------------------------------------------------------------- INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. #--------------------------------------------------------------------- 本地预览博客打开浏览器，输入http://localhost:4000 配置博客网站基本信息编辑修改根目录下的_config.yml文件# 站点基本信息修改 # Site title: 一个DBA的工作学习笔记 subtitle: 欲事之无繁，则必劳于始而逸于终 author: 刘雅君 # 设置网站url # URL url: http://dbanote.github.io # 取消代码段行号显示 # Writing highlight: enable: true line_number: false 部署远程博客注册Github账号因为是托管到Github上，所以第一步需要注册一个账号。这里我新注册了一个dbanote的帐号，步骤很简单，这里不做赘述。 建立和用户名对应的仓库建立和用户名相对应的仓库，这是什么意思呢？以我的例子来说，我的用户名是dbanote,那么我的博客仓库就必须是dbanote.github.io。 配置SSH公钥远程代码是基于SSH的，所以需要SSH的相关配置。方法是现在本地生成SSH公钥，然后添加到Github上面。打开git bash，具体的操作如下： 1. 设置你的邮箱和用户名git config --global user.name \"dbanote\" git config --global user.email \"15004618839@139.com\" 2. 生成密钥，设置密码，输入的密码不显示（也可以不设置，按三次回车，密码为空）ssh-keygen -t rsa -C \"15004618839@139.com\" 上述的命令成功后，会得到id_rsa和id_rsa.pub两个文件，一般在C:\\Users\\&lt;用户名&gt;\\.ssh文件夹里，没有的话，就用Everything搜一下。 3. 把SSH密钥添加到Github上登陆Github后，点击settings，然后进入SSH keys，把id_rsa.pub文件里内容添加进去就好了。 测试配置是否正确$ ssh -T git@github.com Hi dbanote! You’ve successfully authenticated, but GitHub does not provide shell access. 部署远程博客1. 编辑修改根目录下的_config.yml文件# 设置部署到github(https方式出现错误，使用ssh方式成功) # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repository: git@github.com:dbanote/dbanote.github.io.git branch: master 2. 部署远程博客，输入以下命令# 生成静态页 hexo g # 部署到github上 hexo d 部署好了后，在浏览器地址栏中输入你的仓库名来访问，我的是dbanote.github.io。注意一点，第一次部署的话，可能需要等待一会（一般不到10分钟就好了）才能生效，以后每次部署就可以直接访问。到这里基本的博客就搭建好了。 Tips 注意一定要验证Github的验证邮件。 出现其他任何的问题，先删除博客目录下的db.json文件，然后清理再部署远程博客，操作时输入以下的命令 hexo clean hexo d -g Hexo的基本命令 hexo g = hexo generate #生成 hexo s = hexo server #启动本地预览 hexo d = hexo deploy #远程部署 hexo n \"文章标题\" = hexo new \"文章标题\" #新建一篇博文 hexo s -g #等同先输入hexo g，再输入hexo s hexo d -g #等同先输入hexo g，再输入hexo d","tags":[{"name":"tools","slug":"tools","permalink":"/tags/tools/"},{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}]}]