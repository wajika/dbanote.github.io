[{"title":"hexo+github搭建个人博客","date":"2017-02-05T16:00:00.000Z","path":"2017/02/06/tools/hexo+github搭建个人博客/","text":"前言：我的博客之旅我用wordpress写过一段时间的博客，因租用的外国空间访问速度不理想，放弃！我用vimwiki写过一段时间博客，因其配置、更新博客比较麻烦，且生成的html也需要存放到租用的空间上才能共享，放弃！我在类似CSDN免费空间上也写过一段时间博客，因没有客户端工具，在线编辑功能受限，且本地不能保存备份博客，放弃！这两年我一直用有道云笔记写博客，其本地编辑功能比较强大，有易用的分类目录和标签功能，单条博客也易于分享，但缺乏一个整体对外的窗口，文章中的代码也无法实现高亮显示，不够美观！2017年初，偶然的机会知道了hexo，因有较强的markdown和git功底，决定开启hexo写博之旅。 hexo是什么hexo是一款基于Node.js的静态博客框架。 hexo官网地址：https://hexo.io 为什么选择Hexo目前比较流行的静态博客框架有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等。 些静态博客框架各有各的好处，之所以选择Hexo，最主要的原因如下： Hexo基于Node.js实现，在Windows上安装Node.js环境简单；而其他的静态博客框架如Jekyll基于Ruby实现，不建议在Windows下搭建的。 Hexo有本地WEB服务器，能实现本地预览，并直接发布到WEB容器(github)中实现同步；而Jekyll没有本地服务器，无法实现本地博文预览。 Hexo主题丰富，基本直接就可以用，不需要太多的修改。 支持Markdown语法。 hexo安装部署1. 下载并默认安装git和Node.js从以下地址下载所需的Windows版安装包，使用默认设置安装： Node.js: https://nodejs.org git: https://git-scm.com 安装成功后，可通过以下命令查看安装版本：$ node -vv6.9.4$ git --versiongit version 2.11.1.windows.1 2. 配置Git Bash样式（可选）新建D:\\08_dbanote目录做为博客根目录，进入目录，右键选择Git Bash Here 在弹出的窗口上右键选择Options，设置窗口样式 设置显示字体 设置窗口大小(需重新开启Git Bash方可生效) 设置鼠标右健直接粘贴 3. 安装淘宝的cnpm源考虑到国内访问速度慢，建议安装淘宝的cnpm源，以后使用cnpm命令代替npmnpm install -g cnpm --registry=https://registry.npm.taobao.org 4. 安装hexo (-g 是全局化安装)cnpm install hexo-cli -g 5. 初始化hexo博客# 确保当前目录为博客根目录cd D:\\08_dbanotehexo initcnpm install 6. 安装git部署包作用：通过hexo d这一条命令，将博客部署到git服务器上，如githubcnpm install hexo-deployer-git --save 生成SSH密码ssh-keygen -t rsa -C “foxbei@163.com”ssh-keygen -t rsa -C “15004618839@139.com” Clone Existing Repository https://github.com/foxbei/hexo.gitD:/06_MyBlog git config –global user.name “dbanote”git config –global user.email “15004618839@139.com” git config –global user.email foxbei@163.com git config –global user.name “ git init git remote add origin https://github.com/foxbei/hexo.git git pull origin liuyajun@liuyajun-PC MINGW64 /d$ git remote add origin https://github.com/foxbei/hexo.gitfatal: Not a git repository (or any of the parent directories): .git liuyajun@liuyajun-PC MINGW64 /d$ echo “# hexo” &gt;&gt; README.md liuyajun@liuyajun-PC MINGW64 /d$Initialized empty Git repository in D:/.git/ liuyajun@liuyajun-PC MINGW64 /d (master) 修改_config.yml文件中以下内容：# Sitetitle: DBA工作笔记subtitle: 欲事之无繁，则必劳于始而逸于终description: author: 刘雅君language:timezone:# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:dbanote/dbanote.github.io.git branch: master 生成静态页hexo g 启动web serverhexo s 部署到github上hexo d ssh -T git@github.com 1、在博客根目录（注意不是yilia根目录）执行以下命令：cnpm i hexo-generator-json-content –save 2、在根目录_config.yml里添加配置： jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: falsef slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true","tags":[{"name":"tools","slug":"tools","permalink":"http://dbanote.github.io/tags/tools/"}]},{"title":"Sublime Text 常用快捷键","date":"2017-01-30T08:33:55.000Z","path":"2017/01/30/tools/Sublime常用快捷键/","text":"Sublime Text 常用快捷键1、通用↑ ↓ ← → 上下左右移动光标Alt 调出菜单Ctrl + Shift + P 调出命令板（Command Palette）Ctrl + ` 调出控制台 2、编辑Ctrl + Enter 在当前行下面新增一行然后跳至该行Ctrl + Shift + Enter 在当前行上面增加一行并跳至该行Ctrl + ←/→ 进行逐词移动Ctrl + Shift + ←/→ 进行逐词选择Ctrl + ↑/↓ 移动当前显示区域Ctrl + Shift + ↑/↓ 移动当前行 3、选择Ctrl + D 选择当前光标所在的词并高亮该词所有出现的位置 再次 Ctrl + D 选择该词出现的下一个位置，在多重选词的过程中 使用 Ctrl + K 进行跳过，使用 Ctrl + U 进行回退，使用 Esc 退出多重编辑Ctrl + Shift + L 将当前选中区域打散Ctrl + J 把当前选中区域合并为一行Ctrl + M 在起始括号和结尾括号间切换Ctrl + Shift + M 快速选择括号间的内容Ctrl + Shift + J 快速选择同缩进的内容Ctrl + Shift + Space 快速选择当前作用域（Scope）的内容 4、查找&amp;替换F3 跳至当前关键字下一个位置Shift + F3 跳到当前关键字上一个位置Alt + F3 选中当前关键字出现的所有位置Ctrl + F/H 进行标准查找/替换，之后：Alt + C 切换大小写敏感（Case-sensitive）模式Alt + W 切换整字匹配（Whole matching）模式Alt + R 切换正则匹配（Regex matching）模式Ctrl + Shift + H 替换当前关键字Ctrl + Alt + Enter 替换所有关键字匹配Ctrl + Shift + F 多文件搜索&amp;替换 5、跳转Ctrl + P 跳转到指定文件，输入文件名后可以：@ 符号跳转 输入@symbol跳转到symbol符号所在的位置# 关键字跳转 输入#keyword跳转到keyword所在的位置: 行号跳转 输入:12跳转到文件的第12行。Ctrl + R 跳转到指定符号Ctrl + G 跳转到指定行号 6、窗口Ctrl + Shift + N 创建一个新窗口Ctrl + N 在当前窗口创建一个新标签Ctrl + W 关闭当前标签，当窗口内没有标签时会关闭该窗口Ctrl + Shift + T 恢复刚刚关闭的标签 7、屏幕F11 切换至普通全屏Shift + F11 切换至无干扰全屏Alt+Shift+1 Single 切换至独屏Alt+Shift+2 Columns:2 切换至纵向二栏分屏Alt+Shift+3 Columns:3 切换至纵向三栏分屏Alt+Shift+4 Columns:4 切换至纵向四栏分屏Alt+Shift+8 Rows:2 切换至横向二栏分屏Alt+Shift+9 Rows:3 切换至横向三栏分屏Alt+Shift+5 Grid 切换至四格式分屏 8、插件”DeleteBlankLines”# Windows/LinuxCtrl+Alt+Backspace 删除所有空行Ctrl+Alt+Shift+Backspace 删除多余空行# Mac OSCtrl+Alt+Delete 删除所有空行Ctrl+Alt+Shift+Delete 删除多余空行 9、插件”SublimeTmpl”ctrl+alt+h htmlctrl+alt+j javascriptctrl+alt+c cssctrl+alt+p phpctrl+alt+r rubyctrl+alt+shift+p python","tags":[{"name":"tools","slug":"tools","permalink":"http://dbanote.github.io/tags/tools/"},{"name":"sublime text","slug":"sublime-text","permalink":"http://dbanote.github.io/tags/sublime-text/"}]},{"title":"GIT常用命令整理","date":"2017-01-26T09:05:44.861Z","path":"2017/01/26/git/git常用命令整理/","text":"GIT常用命令整理基本信息设置与查看git config --global user.name &apos;dbanote&apos;git config --global user.email &apos;15004618839@139.com&apos;git config --list 初始化git仓库git init 向本地仓库中添加/修改/删除文件# 添加/修改/删除工作区文件后，保存变动内容到暂存区git add &lt;file&gt;git add *# 查看暂存区状态git status# 暂存区内容提交到git仓库git commit -m &quot;git init&quot; PUSH远程仓库git remote add origin git@github.com:dbanote/08_dbanote.gitgit push -u origin master 克隆远程仓库git clone git@github.com:dbanote/08_dbanote.git","tags":[{"name":"git","slug":"git","permalink":"http://dbanote.github.io/tags/git/"}]},{"title":"MySQL DBA从小白到大神实战-02 MySQL标准化、自动化部署","date":"2017-01-26T06:16:32.184Z","path":"2017/01/26/mysql/课程学习/02-MySQL-DBA从小白到大神实战/","text":"第二课 MySQL标准化、自动化部署作业题目 为什么数据目录和日志目录需要分开? 如何标准化配置多实例?（例如：一台物理主机上部署3306与3307两个实例） 详细描述MySQL编译安装的过程（截图安装步骤） 1. 为什么数据目录和日志目录需要分开?这里的分开，我理解是将MySQL的数据目录和日志目录分别放到不同类型的磁盘中。假设生产环境中服务器上有两种类型的磁盘，分别是SSD和SAS，SSD比SAS的响应时间要快（SSD响应时间约0.1毫秒，SAS的响应时间约10毫秒），为了更好的利用磁盘，一般会把活跃的数据放到SSD上，冷数据放到SAS磁盘上。数据目录下的数据一般是随机读写的热数据，放到SSD盘中会有较高的响应速度；日志目录下的日志是顺序读写的冷数据，放到SAS盘中满足写日志高吞吐量的需求。 2. 如何标准化配置多实例?标准化配置多实例，主要是标准化每个实例的目录和内存设置，这样每个实例的参数设置也很容易达到标准化。标准化配置的MYSQL实例，方便实施监控及运维管理。因一个MySQL实例最多占用64G的物理内存，所以在物理内存较高的服务器上，一般会安装多个MySQL实例，MySQL不同实例是通过端口来区别的。 例如：一台64G的物理主机上部署3306与3307两个MYSQL实例 标准化目录：实例1：/data/my3306/log/my3306实例2：/data/my3307/log/my3307# /data 目录挂载到SSD盘上# /log 目录挂载到SAS盘上 标准化内存：实例1：15G: InnoDB buffer cache5G : mysql server层实例2：15G: InnoDB buffer cache5G : mysql server层OS:24G 标准化参数：结合标准化的目录及内存设置，设置标准化的参数 3. 详细描述MySQL编译安装的过程关闭防火墙和SELINUXservice iptables status------------------------------------------------Table: filterChain INPUT (policy ACCEPT)num target prot opt source destination 1 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHED 2 ACCEPT icmp -- 0.0.0.0/0 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:22 5 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited Chain FORWARD (policy ACCEPT)num target prot opt source destination 1 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited Chain OUTPUT (policy ACCEPT)num target prot opt source destination ------------------------------------------------service iptables stop------------------------------------------------iptables: Setting chains to policy ACCEPT: filter [ OK ]iptables: Flushing firewall rules: [ OK ]iptables: Unloading modules: [ OK ]------------------------------------------------service iptables status------------------------------------------------iptables: Firewall is not running.------------------------------------------------chkconfig iptables offvi /etc/selinux/config------------------------------------------------SELINUX=disabled------------------------------------------------ 配置sysctl.conf# 查看服务器内存free------------------------------------------------ total used free shared buffers cachedMem: 8174352 616628 7557724 172 151904 253892-/+ buffers/cache: 210832 7963520Swap: 16531452 0 16531452------------------------------------------------vi /etc/sysctl.conf------------------------------------------------# 修改kernel.shmmax = 4398046511104# 添加fs.file-max = 6815744kernel.sem = 250 32000 100 128kernel.shmmni = 4096kernel.panic_on_oops = 1net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576fs.aio-max-nr = 1048576net.ipv4.ip_local_port_range = 9000 65500------------------------------------------------# kernel.shmmax算法：修改为物理内容的50%、60%# 8G:kernel.shmmax = (8G*1024*1024*1024*1024)*50% = 4398046511104# 使配置立即生效sysctl -p 检查是否已安装MySQLrpm -qa | grep mysql------------------------------------------------mysql-libs-5.1.73-7.el6.x86_64------------------------------------------------# 删除mysql-libs-5.1.73-7.el6.x86_64包rpm -e --nodeps mysql-libs-5.1.73-7.el6.x86_64 下载MySQL源码Download MySQL Community Server https://dev.mysql.com/downloads/mysql/5.6.html#downloadsSelect Version: 5.6.35 -&gt; Select Platform: Source Code-&gt; 选择【Generic Linux (Architecture Independent), Compressed TAR Archive】下载 # 配置yum源，安装lrzsz(代替ftp上传和下载的工具)mkdir /media/diskmkdir /media/cdrommount /dev/cdrom /media/cdromcp -rf /media/cdrom/* /media/diskumount /media/cdromcp /etc/yum.repos.d/public-yum-ol6.repo /etc/yum.repos.d/public-yum-ol6.repo.bakvi /etc/yum.repos.d/public-yum-ol6.repo------------------------------------------------name=Oracle Linux $releasever Latest ($basearch)baseurl=file:///media/disk/Servergpgcheck=0enabled=1------------------------------------------------yum -y install lrzsz# 上传到服务器的/u01目录下mkdir /u01cd /u01rz# 选择mysql源码包，上传rz waiting to receive.Starting zmodem transfer. Press Ctrl+C to cancel.Transferring mysql-5.6.35.tar.gz... 100% 31413 KB 15706 KB/sec 00:00:02 0 Errors ll /u01/mysql*-rw-r--r--. 1 root root 32167628 Jan 17 11:16 /u01/mysql-5.6.35.tar.gz 添加MySQL用户和组groupadd -g 501 mysqluseradd -u 501 mysql -g mysqlecho &quot;mysql123&quot; | passwd --stdin mysqlid mysqluid=501(mysql) gid=501(mysql) groups=501(mysql) 配MySQL环境变量vi /home/mysql/.bash_profile------------------------------------------------PATH=$PATH:$HOME/bin:/u01/my3306/bin------------------------------------------------ 创建目录及授权mkdir -p /u01/my3306/datamkdir -p /u01/my3306/log/iblogmkdir -p /u01/my3306/log/binlogmkdir -p /u01/my3306/runmkdir -p /u01/my3306/tmpchown -R mysql:mysql /u01/my3306chmod -R 755 /u01/my3306 解压mysql5.6cd /u01tar xvpf mysql-5.6.35.tar.gz 安装cmake及相关依赖包yum install -y cmake gcc gcc-c++ ncurses-devel bison zlib libxml openssl 编译并安装cd /u01/mysql-5.6.35cmake \\-DCMAKE_INSTALL_PREFIX=/u01/my3306 \\-DINSTALL_DATADIR=/u01/my3306/data \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci \\-DEXTRA_CHARSETS=all \\-DWITH_SSL=yes \\-DWITH_EMBEDDED_SERVER=1 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\-DWITH_FEDERATED_STORAGE_ENGINE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DMYSQL_UNIX_ADDR=/u01/my3306/run/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DENABLED_LOCAL_INFILE=1 \\-DSYSCONFDIR=/etc \\-DWITH_READLINE=on第一次CMAKE出现错误提示---------------------------------------------------------------------------------------------CMake Error: The following variables are used in this project, but they are set to NOTFOUND.Please set them or make sure they are set and tested correctly in the CMake files:OPENSSL_INCLUDE_DIR used as include directory in directory /u01/mysql-5.6.35/CMakeFiles/CMakeTmp---------------------------------------------------------------------------------------------安装openssl-devel包yum -y install openssl-devel重新cmake需要删除当前目录下CMakeCache.txt，然后再重新执行rm -rf CMakeCache.txt编译并安装makemake install MySQL参数配置cd /u01/my3306vi my.----------------------------------------------------------[client]port=3306socket=/u01/my3306/mysql.sock[mysql]pid_file=/u01/my3306/run/mysqld.pid[mysqld]autocommit=1general_log=offexplicit_defaults_for_timestamp=true# systembasedir=/u01/my3306datadir=/u01/my3306/datamax_allowed_packet=1gmax_connections=3000max_user_connections=2800open_files_limit=65535pid_file=/u01/my3306/run/mysqld.pidport=3306server_id=101skip_name_resolve=ONsocket=/u01/my3306/run/mysql.socktmpdir=/u01/my3306/tmp#binloglog_bin=/u01/my3306/log/binlog/binlogbinlog_cache_size=32768binlog_format=rowexpire_logs_days=7log_slave_updates=ONmax_binlog_cache_size=2147483648max_binlog_size=524288000sync_binlog=100#logginglog_error=/u01/my3306/log/error.logslow_query_log_file=/u01/my3306/log/slow.loglog_queries_not_using_indexes=0slow_query_log=1log_slave_updates=ONlog_slow_admin_statements=1long_query_time=1#relayrelay_log=/u01/my3306/log/relaylogrelay_log_index=/u01/my3306/log/relay.indexrelay_log_info_file=/u01/my3306/log/relay-log.info#slaveslave_load_tmpdir=/u01/my3306/tmpslave_skip_errors=OFF#innodbinnodb_data_home_dir=/u01/my3306/log/ibloginnodb_log_group_home_dir=/u01/my3306/log/ibloginnodb_adaptive_flushing=ONinnodb_adaptive_hash_index=ONinnodb_autoinc_lock_mode=1innodb_buffer_pool_instances=8#defaultinnodb_change_buffering=insertsinnodb_checksums=ONinnodb_buffer_pool_size= 128Minnodb_data_file_path=ibdata1:32M;ibdata2:16M:autoextendinnodb_doublewrite=ONinnodb_file_format=Barracudainnodb_file_per_table=ONinnodb_flush_log_at_trx_commit=1innodb_flush_method=O_DIRECTinnodb_io_capacity=1000innodb_lock_wait_timeout=10innodb_log_buffer_size=67108864innodb_log_file_size=1048576000innodb_log_files_in_group=4innodb_max_dirty_pages_pct=60innodb_open_files=60000innodb_purge_threads=1innodb_read_io_threads=4innodb_stats_on_metadata=OFFinnodb_support_xa=ONinnodb_use_native_aio=OFFinnodb_write_io_threads=10[mysqld_safe]datadir=/u01/my3306/data----------------------------------------------------------# 编译后重新修改目录权限chown -R mysql:mysql /u01/my3306 初始化MySQL脚本su - mysqlcd /u01/my3306/scripts./mysql_install_db --defaults-file=/u01/my3306/my.cnf \\--datadir=/u01/my3306/data --basedir=/u01/my3306 --user=mysql 启动MySQL/u01/my3306/bin/mysqld_safe --defaults-file=/u01/my3306/my.cnf --user=mysql &amp; 登录MySQLmysql或者mysql -h127.0.0.1 -urootWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 2Server version: 5.6.35-log Source distributionCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.01 sec)","tags":[{"name":"mysql","slug":"mysql","permalink":"http://dbanote.github.io/tags/mysql/"}]},{"title":"MySQL DBA从小白到大神实战-01 MySQL 高级DBA职业规划","date":"2017-01-26T05:54:07.005Z","path":"2017/01/26/mysql/课程学习/01-MySQL-DBA从小白到大神实战/","text":"第一课 MySQL 高级DBA职业规划作业题目： 什么是MVCC？有什么作用？ ACID中的I是怎么实现在的？ 2PC在数据库中是怎么来实现的？ 简单讲讲CAP/base/paxos算法。 1. 什么是MVCC？有什么作用？MVCC是Multiversion Concurrency Control的缩写，中文的意思是多版本并发控制。目前多数DB都采用了这一技术，比如Oracle，PostgreSQL等，但各自的实现机制不尽相同，MVCC没有一个统一的实现标准。MVCC能有效降低锁的开销，虽然不同数据库实现MVCC的机制有所有同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。 2. ACID中的I是怎么实现在的？ A: 原子性 Atomicity C: 一致性 Consistency I: 隔离性 Isolation D: 持久性 Durability I的实现需要对事务进行并发控制，使事务在并发环境中相互隔离，一个事务的执行不能被其他事务干扰。也就是说，不同的事务并发操纵相同的数据时，每个事务都有各自完整的数据空间，一个事务内部的操作及使用的数据对其他并发事务是隔离的，一个事务所做的修改在终提交以前，对其他事务是不可见的。 3. 2PC在数据库中是怎么来实现的？2PC是Two Phase Commitment Protocol的缩写，中文的意思是两阶段提交协议，用于保证属于多个数据分片上的操作的原子性。这些数据分片可能分布在不同的服务器上，2PC协议保证多台服务器上的操作要么全部成功，要么全部失败。 以ORACLE数据库为例，2PC的实现步骤如下： 阶段一：提交事务请求（投票阶段）（1）事务询问协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应 （2）执行事务各参与者节点执行事务操作，并将Undo和Redo信息计入事务日志中 （3）各参与者向协调者反馈事务询问的响应如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者No响应，表示事务不可以执行。 阶段二：执行事务提交（执行阶段）(1)执行事务提交如果所有参与者的反馈都是Yes响应，那么 A、发送提交请求协调者向所有参与者节点发出Commit请求 B、事务提交参与者接收到Commit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源 C、反馈事务提交结果参与者在完成事务提交之后，向协调者发送ACK信息 D、完成事务协调者接收到所有参与者反馈的ACK消息后，完成事务 (2)中断事务任何一个参与者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。 A、发送回滚请求协调者向所有参与者节点发出Rollback请求 B、事务回滚参与者接收到rollback请求后，会利用其在阶段一中记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放整个事务执行期间占用的资源 C、反馈事务回滚结果参与者在完成事务回滚之后，向协调者发送ACK信息 D、中断事务协调者接收到所有参与者反馈的ACK信息后，完成事务中断 4. 简单讲讲CAP/base/paxos算法。CAP定理一个分布式系统不可能同时满足一致性(C: Consistency)、可用性(A: Availibility)和分区容错性(P: Partition tolerance)这三个基本需求，最多只能同时满足其中的两项。其中分区容错性是一个最基本的要求，是一个分布式系统必然需要面对和解决的问题。系统架构设计的主要精力应放在根据业务特点在C（一致性）和A（可用性）之间寻求平衡。 一致性在分布式环境中，一致性是指数据在多个副本之间是否能够保持一致的特性。CAP定理应用中的放弃一致性，是指放弃数据的强一致性，而保留数据的最终一致性。这样的系统无法保证数据保持实时的一致性，但是能够承诺的是，数据最终会达到一个一致的状态。具体多久能够达到数据一致取决于系统的设计，主要包括数据副本在不同节点之间的复制时间长短。 可用性系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。CAP定理应用中的放弃可用性，是指一旦系统遇到网络分区或其他故障时，受到影响的服务需要等待一定的时间，在等待期间系统无法对外提供正常的服务，即不可用。 分区容错性分区容错性约束了一个分布式系统需要具有如下特性：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。对于一个分布式系统而言，分区容错性是一个最基本的要求，CAP定理应用中的放弃分区容错性，一种较为简单的做法是将所有的数据（或者仅仅是那些与事务相关的数据）都放在一个分布式节点上，这样就不会碰到由于网络分区带来的负面影响，但放弃P的同时，也就意味着放弃了系统的可扩展性。 BASE理论BASE是Basically Available(基本可用)、 Soft state(软状态) 和Eventually consistent(最终一致性)三个短语的简写。 BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性(Strong Consistency)，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性(Eventually consistent)。 基本可用基本可用是指分布式系统在出现不可预知故障时，允许损失部分可用性，如响应时间上的损失，部分非关键功能上的损失。 软状态软状态和是指允许系统中的数据存在中间的状态，并认为该中间状态存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。 最终一致性最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。BASE理论面向的是大型高可用可扩展的分布式系统，和传统事务的ACID强一致性相反，BASE是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性与BASE理论往往会结合一起使用。 Paxos（帕克索斯）算法Paxos是基于消息传递且具有高度容错性的一致性算法。算法要解决的问题就是如何在可能发生的宕机或网络异常的分布式系统中，快速且正确地在集群内部对某个数据的值达成一致，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。Paxos算法引入了“过半”的理念，通俗的讲就是少数服从多数据的原则。同时，Paxos算法支持分布式节点角色之间的轮换，这极大的避免了分布式单点的出现，因此Paxos算法解决了无限期等待问题，也解决了“脑残”问题，是目前来说最优秀的分布式一致性协议之一。","tags":[{"name":"mysql","slug":"mysql","permalink":"http://dbanote.github.io/tags/mysql/"}]},{"title":"MySQL DBA从小白到大神实战-03 深入MySQL体系结构","date":"2017-01-23T05:42:00.000Z","path":"2017/01/23/mysql/课程学习/03-MySQL-DBA从小白到大神实战/","text":"第三课 深入MySQL体系结构1. thread pool的原理是什么？线程池的原理很简单，类似于操作系统中的缓冲区的概念，它的流程如下：先启动若干数量的线程，并让这些线程都处于睡眠状态，当客户端有一个新请求时，就会唤醒线程池中的某一个睡眠线程，让它来处理客户端的这个请求，当处理完这个请求后，线程又处于睡眠状态。 MySQL线程池只在MariaDB，Oracle MySQL企业版中提供，Oracle MySQL社区版并不提供。 在传统方式下，MySQL线程调度方式有两种：每个连接一个线程(one-thread-per-connection)和所有连接一个线程（no-threads）。在实际生产中，一般用的是前者。即每当有一个客户端连接到MySQL服务器，MySQL服务器都会为该客户端创建一个单独的线程，请求结束后，销毁线程。连接数越多，则相应的线程会越多。这种方式在高并发情况下，会导致线程的频繁创建和释放。 2. 为什么用double write就能解决page坏的问题？InnoDB 的Page Size一般是16KB，其数据校验也是针对这16KB来计算的，将数据写入到磁盘是以Page为单位进行操作的，mysql的page size跟系统文件的page size是不一致的，在写数据的时候, 系统并不是把整个buffer pool page一次性写到disk上，在极端情况下（比如断电）往往并不能保证这一操作的原子性，16K的数据，写入4K时，发生了系统断电/OS crash ，只有一部分写是成功的，这种情况下就是partial page write问题。 mysql在恢复的过程中是检查page的checksum（检验和），checksum就是pgae的最后事务号，发生partial page write问题时，page已经损坏，找不到该page中的事务号，就无法恢复（ redo里面是没有保留这个损坏page完全的镜像，就无法从REDO里恢复）。 为了解决 partial page write 问题 ，当mysql将脏数据flush到data file的时候, 先使用memcopy 将脏数据复制到内存中的double write buffer ，之后通过double write buffer再分2次，每次写入1MB到共享表空间，然后马上调用fsync函数，同步到磁盘上，避免缓冲带来的问题，在这个过程中，doublewrite是顺序写，开销并不大，在完成doublewrite写入后，在将double write buffer写入各表空间文件，这时是离散写入。如果发生了极端情况（断电），InnoDB再次启动后，发现了一个Page数据已经损坏，那么此时就可以从double write buffer中进行数据恢复了。 double write的优点是什么?double write解决了partial page write的问题，它能保证即使double write部分发生了partial page write但也能恢复。另外一个好处就是double write能减少redo log的量, 有了double write，redo log只记录了二进制的变化量，也就等同于binary log，而通过前段时间的测试确实发现，在double write关闭的情况下，redo log比binary logs要大。 double write的缺点是什么?虽然mysql称double write是一个buffer, 但其实它是开在物理文件上的一个buffer, 其实也就是file, 所以它会导致系统有更多的fsync操作, 而我们知道硬盘的fsync性能是很慢的, 所以它会降低mysql的整体性能. 但是并不会降低到原来的50%. 这主要是因为: double write是一个连接的存储空间, 所以硬盘在写数据的时候是顺序写, 而不是随机写, 这样性能更高。 另外将数据从double write buffer写到真正的segment中的时候, 系统会自动合并连接空间刷新的方式, 每次可以刷新多个pages。另外将数据从double write buffer写到真正的segment中的时候, 系统会自动合并连接空间刷新的方式, 每次可以刷新多个pages。 double write在恢复的时候是如何工作的?如果是写double write buffer本身失败，那么这些数据不会被写到磁盘，innodb此时会从磁盘载入原始的数据，然后通过innodb的事务日志来计算出正确的数据，重新写入到double write buffer。如果double write buffer写成功的话，但是写磁盘失败，innodb就不用通过事务日志来计算了，而是直接用buffer的数据再写一遍。在恢复的时候，innodb直接比较页面的checksum，如果不对的话，就从硬盘载入原始数据，再由事务日志开始推演出正确的数据，所以innodb的恢复通常需要较长的时间。 查看是否开启double writeshow variables like &apos;%double%&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| innodb_doublewrite | ON |+--------------------+-------+ 3. InnoDB redo log与binlog有什么区别？有了InnoDB redo log为什么还要binlog? binlog会记录所有与MySQL数据库有关的日志记录，包括InnoDB、MyISAM、Heap等其他存储引擎的日志；而InnoDB存储引擎的redo log只记录有关该引擎本身的事务日志。 无论将binlog文件记录的格式设为STATEMENT还是ROW，又或是MIXED，其记录的都是关于一个事务的具体操作内容，即该日志是逻辑日志；而InnoDB存储引擎的redo log是关于每个页（page）更改的物理情况。 binlog文件仅在事务提交后进行写入，即只写磁盘一次，不论这时该事务多大；而在事务进行的过程中，却不断有重做日志条目（redo entry）被写入到重做日志文件中。 binlog是MySQL Server层记录的日志，所有引擎产生的日志都会通过binlog进行封装；MySQL的特点就是支持多存储引擎，为了兼容绝大部分引擎来支持类似复制这样的特性，就需要采用binlog日志来用实现。简单的说，binlog 是mysqld 记录全局数据结构变化的log，用于复制和恢复；innodb redo log 是innodb 引擎自己记录事务过程的log，用于回滚和crash 恢复。 课程笔记1.MySQL是单进程多线程2.MySQL存储引擎是可插拔的，有InnoDB，MyISAM(早期)等3.存储引擎是用来处理数据库相关的CRUD的操作4.CRUD是指在做计算处理时的增加(Create)、读取(Retrieve)(重新得到数据)、更新(Update)和删除(Delete)几个单词的首字母简写5.存储引擎的对象是表6.MySQL数据库与实例的关系是一对一的7.MySQL的数据库是物理操作系统文件或其他形式文件类型的集合，实例是由数据库后台进程/线程以及一个共享内存区组成8.MySQL 5.6 InnoDB架构中Buffer Pool(1)index page: 数据缓存放在index page里，因MySQL数据的存储结构是Btree，所以称index page，page的概念相当于oracle中的buffer，1 page默认大小16k(2)data dictionary: 数据字典的缓冲，其文件是存放在iblog目录下的ibdata中，如/u01/my3306/log/iblog/ibdata1(3)lock info: 行锁放在lock info中，当行锁达到一定值的时候，行锁就会升级为表锁(4)undo page: 缓存UNDO操作，DML操作修改前镜像放到undo page中，其文件也是存放在iblog目录下的ibdata中(5)insert buffer page: 缓存二级索引（非唯一索引，或称辅助索引）(6)adaptive hash index: 自适应哈希索引，InnoDB存储引擎会监控对表上索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引，所以称之为自适应（adaptive）的。自适应哈希索引通过缓冲池的B+树构造而来，因此建立的速度很快。而且不需要将整个表都建哈希索引，InnoDB存储引擎会自动根据访问的频率和模式来为某些页建立哈希索引。(7)Buffer Pool的大小一般设置为物理内存的60%-80%，在MySQL中可以通过以下命令查询：mysql&gt; show variables like &apos;%buffer_pool_size%&apos;;+-------------------------+-----------+| Variable_name | Value |+-------------------------+-----------+| innodb_buffer_pool_size | 134217728 |+-------------------------+-----------+ 9.redo log buffer: 缓存redo log，通过redo log thead写到redo log文件中存放在iblog目录下的ibdata中，如/u01/my3306/log/iblog/ib_logfile010.查找算法：链表遍历、二分查找、Btree查找、HASH查找11.当数据库关闭时，把热块保存(缓存)到文件，在打开时再从文件加载到内存里，参数和设置方法如下：show variables like &apos;%dump%&apos;;+-------------------------------------+-------+| Variable_name | Value |+-------------------------------------+-------+| innodb_buffer_pool_dump_at_shutdown | OFF || innodb_buffer_pool_dump_now | OFF |+-------------------------------------+-------+set global innodb_buffer_pool_dump_at_shutdown=1;set global innodb_buffer_pool_dump_now=1;exit# 关闭数据库mysqladmin shutdown# 查看缓存的文件ll /u01/my3306/log/iblog/total 4145172-rw-rw----. 1 mysql mysql 884 Jan 24 17:38 ib_buffer_pool //这个就是缓存的文件-rw-rw----. 1 mysql mysql 33554432 Jan 24 17:38 ibdata1-rw-rw----. 1 mysql mysql 16777216 Jan 24 17:38 ibdata2-rw-rw----. 1 mysql mysql 1048576000 Jan 24 17:38 ib_logfile0-rw-rw----. 1 mysql mysql 1048576000 Jan 17 17:37 ib_logfile1-rw-rw----. 1 mysql mysql 1048576000 Jan 17 17:37 ib_logfile2-rw-rw----. 1 mysql mysql 1048576000 Jan 17 17:37 ib_logfile3# 指定参数启动数据库mysqld_safe --defaults-file=/u01/my3306/my.cnf &amp; 12.安装MySQL Utilities(1)选择MySQL Utilities适合的版本下载：https://dev.mysql.com/downloads/utilities/(2)选择Connector/Python适合的版本下载（依赖包）：https://dev.mysql.com/downloads/connector/python/(3)上传安装包到服务器/tmp目录，并安装（root用户下）lltotal 32836-rw-r--r--. 1 root root 258776 Jan 25 11:50 mysql-connector-python-2.1.5-1.el6.x86_64.rpm-rw-r--r--. 1 root root 892500 Jan 25 11:39 mysql-utilities-1.6.4-1.el6.noarch.rpmrpm -ivh mysql-connector-python-2.1.5-1.el6.x86_64.rpmrpm -ivh mysql-utilities-1.6.4-1.el6.noarch.rpm (4)MySQL Utilities–mysqlfrm# 以诊断模式查看表结构定义文件mysqlfrm --diagnostic user.frm 13.查看错误日志所在位置mysql&gt; show variables like &apos;%log_error%&apos;;+---------------------+---------------------------+| Variable_name | Value |+---------------------+---------------------------+| binlog_error_action | IGNORE_ERROR || log_error | /u01/my3306/log/error.log | //错误日志所在位置+---------------------+---------------------------+ 14.开启慢查询mysql&gt; show variables like &apos;%slow%&apos;;+---------------------------+--------------------------+| Variable_name | Value |+---------------------------+--------------------------+| log_slow_admin_statements | ON || log_slow_slave_statements | OFF || slow_launch_time | 2 || slow_query_log | ON | //开启慢查询| slow_query_log_file | /u01/my3306/log/slow.log | //慢查询日志位置+---------------------------+--------------------------+ mysql&gt; show variables like &apos;%query_time%&apos;;+-----------------+----------+| Variable_name | Value |+-----------------+----------+| long_query_time | 1.000000 | //慢查询时间为1s+-----------------+----------+ 15.通用日志默认是不开启的（通用日志主要用在数据库审计）mysql&gt; show variables like &apos;%gen%&apos;;+------------------+----------------------------+| Variable_name | Value |+------------------+----------------------------+| general_log | OFF || general_log_file | /u01/my3306/data/mysql.log |+------------------+----------------------------+ 16.最大用户连接数mysql&gt; show variables like &apos;%max_user_connect%&apos;;+----------------------+-------+| Variable_name | Value |+----------------------+-------+| max_user_connections | 2800 |+----------------------+-------+ 17.查出mysqld进程号为27507ps -ef | grep 3306root 5475 5183 0 11:44 pts/1 00:00:00 grep 3306mysql 26656 1 0 Jan17 ? 00:00:00 /bin/sh /u01/my3306/bin/mysqld_safe --defaults-file=/u01/my3306/my.cnf --user=mysqlmysql 27507 26656 0 Jan17 ? 00:01:32 /u01/my3306/bin/mysqld --defaults-file=/u01/my3306/my.cnf --basedir=/u01/my3306 --datadir=/u01/my3306/data --plugin-dir=/u01/my3306/lib/plugin --log-error=/u01/my3306/log/error.log --open-files-limit=65535 --pid-file=/u01/my3306/run/mysqld.pid --socket=/u01/my3306/run/mysql.sock --port=3306 18.查看mysqld进程27507下所有线程pstack 27507Thread 28 (Thread 0x7f9b070c4700 (LWP 27508)):#0 0x00000038a040b68c in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0#1 0x00000000009536bb in os_event_wait_low(os_event*, long) ()#2 0x0000000000950aa6 in os_aio_simulated_handle(unsigned long, fil_node_t**, void**, unsigned long*) ()#3 0x0000000000a49ed7 in fil_aio_wait(unsigned long) ()#4 0x00000000009b9638 in io_handler_thread ()#5 0x00000038a0407aa1 in start_thread () from /lib64/libpthread.so.0#6 0x00000038a00e8aad in clone () from /lib64/libc.so.6# ...... 中间略过Thread 1 (Thread 0x7f9b18f637e0 (LWP 27507)):#0 0x00000038a00df283 in poll () from /lib64/libc.so.6#1 0x0000000000585284 in handle_connections_sockets() ()#2 0x000000000058cd51 in mysqld_main(int, char**) ()#3 0x00000038a001ed1d in __libc_start_main () from /lib64/libc.so.6#4 0x000000000057dbc1 in _start () 19.read/write threadmysql&gt; show variables like &apos;%io_thread%&apos;;+-------------------------+-------+| Variable_name | Value |+-------------------------+-------+| innodb_read_io_threads | 4 | # 预读| innodb_write_io_threads | 10 |+-------------------------+-------+ 20.purge thread: 清undo pagemysql&gt; show variables like &apos;%purge%&apos;;+----------------------------+-------+| Variable_name | Value |+----------------------------+-------+| gtid_purged | || innodb_max_purge_lag | 0 || innodb_max_purge_lag_delay | 0 || innodb_purge_batch_size | 300 || innodb_purge_threads | 1 || relay_log_purge | ON |+----------------------------+-------+","tags":[{"name":"mysql","slug":"mysql","permalink":"http://dbanote.github.io/tags/mysql/"}]}]